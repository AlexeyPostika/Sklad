USE [JDB_POS]

GO
CREATE SCHEMA [srv] 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[AnotherCompanyAttributes](
	[ID] [smallint] IDENTITY(1,1) NOT NULL,
	[CompanyID] [int] NULL,
	[Type] [tinyint] NULL,
	[Name] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Value] [nvarchar](max) COLLATE Cyrillic_General_CI_AS NULL,
	[AttributeGroup] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Attributesort] [int] NULL,
	[Visibility] [bit] NULL,
	[IsEnable] [bit] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[ShopID] [smallint] NULL,
	[SyncID] [int] NULL,
 CONSTRAINT [PK_AnotherCompanyAttributes] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[Attributes](
	[ID] [smallint] IDENTITY(1,1) NOT NULL,
	[Type] [tinyint] NULL,
	[Name] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Value] [nvarchar](max) COLLATE Cyrillic_General_CI_AS NULL,
	[AttributeGroup] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[AttributeSort] [int] NULL,
	[Visibility] [bit] NULL,
	[IsEnable] [bit] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[SyncID] [int] NULL,
	[Description] [varchar](250) COLLATE Cyrillic_General_CI_AS NULL,
 CONSTRAINT [PK_Attributes] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Coupon](
	[ID] [int] NOT NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Discount] [money] NULL,
	[Quantity] [int] NULL,
	[CouponDateFrom] [datetime] NULL,
	[CouponDateTo] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_Coupon] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Currency](
	[Code] [int] NOT NULL,
	[ShortDescription] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[LongDescription] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_Currency_1] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Document](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ReffID] [bigint] NULL,
	[ReffDate] [datetime] NULL,
	[SenderID] [int] NULL,
	[ReceiverID] [int] NULL,
	[Type] [int] NULL,
	[Contract] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Status] [int] NULL,
	[DocumentID] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[SyncDate] [datetime] NULL,
 CONSTRAINT [PK_Document] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[DocumentDetails](
	[ID] [int] NOT NULL,
	[DocumentID] [int] NOT NULL,
	[LineDocument] [int] NULL,
	[Model] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[ModelID] [int] NULL,
	[Type] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[KtID] [int] NULL,
	[Size] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Color] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Gender] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[SupplierID] [int] NULL,
	[SupplierName] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Country] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[ThemedCollection] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Weight] [money] NULL,
	[CostWithoutVAT] [money] NULL,
	[CostCurrency] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[TagPriceWithVAT] [money] NULL,
	[TagPriceCurrency] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[TagPriceExtra] [money] NULL,
	[IsChecked] [bit] NULL,
	[ShowcaseID] [int] NULL,
	[TagPriceWithOutVAT] [money] NULL,
	[DeclarationNumber] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[TnvedCode] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_DocumenDetails] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[DocumentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[DocumentStonesDetails](
	[ID] [int] NOT NULL,
	[ProductID] [int] NOT NULL,
	[DocumentID] [int] NULL,
	[Stone] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Shape] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Size] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Color] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Clarity] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[Quantity] [int] NULL,
	[Weight] [money] NULL,
	[Setting] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_DocumentStonesDetails] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[KT](
	[ID] [int] NOT NULL,
	[MetalID] [int] NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_KT_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Location](
	[ID] [int] NOT NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF__Location__Create__36D11DD4]  DEFAULT (getdate()),
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[CompanyID] [tinyint] NOT NULL,
 CONSTRAINT [PK_Location] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[CompanyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[LogErr](
	[LogErrID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[DtErr] [datetime] NOT NULL,
	[ERROR_MESSAGE] [nvarchar](4000) COLLATE Cyrillic_General_CI_AS NULL,
 CONSTRAINT [PK_LogErr] PRIMARY KEY CLUSTERED 
(
	[LogErrID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
ALTER TABLE [dbo].[LogErr] ADD  CONSTRAINT [DF_LogErr_DtErr]  DEFAULT (getdate()) FOR [DtErr] 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Metal](
	[ID] [int] NOT NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_Metal] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[MetalPrices](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[KTID] [int] NOT NULL,
	[PriceType] [int] NOT NULL,
	[PriceValue] [money] NOT NULL,
	[Source] [bit] NOT NULL CONSTRAINT [DF_MetalPrices_Source]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
 CONSTRAINT [PK_MetalPrices] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[MetalPricesN](
	[PriceDat] [date] NOT NULL,
	[PriceType] [int] NOT NULL,
	[KTID] [int] NOT NULL,
	[PriceValue] [money] NOT NULL,
	[Source] [bit] NOT NULL CONSTRAINT [DF_MetalPricesN_Source]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_MetalPricesN] PRIMARY KEY CLUSTERED 
(
	[PriceDat] ASC,
	[PriceType] ASC,
	[KTID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[PaymentsDetails](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PosID] [int] NULL,
	[WorkShiftID] [int] NOT NULL,
	[OperationType] [int] NOT NULL,
	[ExtRefOperationTypeID] [int] NOT NULL,
	[PaymentType] [int] NOT NULL,
	[ExtRefPaymentTypeID] [int] NOT NULL,
	[Amount] [money] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[IsRemotePayment] [bit] NULL,
 CONSTRAINT [PK_PaymentsDetails] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[Photo](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Type] [tinyint] NOT NULL,
	[ParentID] [int] NOT NULL,
	[Photo] [varbinary](max) NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
 CONSTRAINT [PK_Photo] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[POSObjects](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) COLLATE Cyrillic_General_CI_AS NULL,
	[SyncType] [int] NULL,
	[Description] [nvarchar](max) COLLATE Cyrillic_General_CI_AS NULL,
 CONSTRAINT [PK_Objects] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Product](
	[ID] [int] NOT NULL,
	[Model] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[ModelID] [int] NULL,
	[Type] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[KtID] [int] NULL,
	[Size] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Color] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Gender] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[SupplierID] [int] NULL,
	[SupplierName] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Country] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[ThemedCollection] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Weight] [money] NULL,
	[CostWithoutVAT] [money] NULL,
	[CostCurrency] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[TagPriceWithVat] [money] NULL,
	[TagPriceCurrency] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[TagPriceExtra] [money] NULL,
	[Status] [int] NULL,
	[ShowcaseID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[TagPriceWithOutVat] [money] NULL,
	[DeclarationNumber] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[TnvedCode] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[FromDatePrice] [datetime] NULL,
 CONSTRAINT [PK_Product] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[ProductTransfer](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int] NOT NULL,
	[Status] [int] NULL,
	[ExReffOperationType] [int] NULL,
	[ExtReffID] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
 CONSTRAINT [PK_ProductTransfer] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
create TRIGGER [dbo].[trg_ProductTransfer]
   ON  [dbo].[ProductTransfer]
   AFTER insert
AS 
BEGIN

	SET NOCOUNT ON;
	declare @ID_Num int,
			@count int

	select @count = ISNULL(COUNT(*),0) from inserted
	
	if @count>0
	begin
		select @ID_Num = ProductID from inserted
		update [dbo].[Product]
		set FromDatePrice = getdate()
		where ID = @ID_Num
	end

end


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[Prog](
	[ID] [smallint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Prim] [varchar](500) COLLATE Cyrillic_General_CI_AS NULL,
	[DtAdd] [datetime2](7) NULL CONSTRAINT [DF_Prog_dt_add]  DEFAULT (getdate()),
 CONSTRAINT [PK_Prog] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[ProgF](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[VerID] [smallint] NOT NULL,
	[StartF] [bit] NULL CONSTRAINT [DF_ProgF_StartF]  DEFAULT ((0)),
	[NameFile] [varchar](150) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[BinFile] [varbinary](max) NULL,
	[SizeFile] [int] NULL,
	[PathFile] [varchar](150) COLLATE Cyrillic_General_CI_AS NULL,
	[DtAdd] [datetime] NULL CONSTRAINT [DF_ProgF_DtAdd]  DEFAULT (getdate()),
	[MD5] [char](32) COLLATE Cyrillic_General_CI_AS NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[ProgVer](
	[ID] [smallint] IDENTITY(1,1) NOT NULL,
	[ProgID] [smallint] NOT NULL,
	[NameVer] [varchar](50) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[DtVer] [date] NULL,
	[Prim] [varchar](1000) COLLATE Cyrillic_General_CI_AS NULL,
	[IsAct] [bit] NOT NULL,
	[DtAdd] [datetime2](7) NOT NULL CONSTRAINT [DF_ProgVer_DtAdd]  DEFAULT (getdate())
) ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[RefreshInfo](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Obj] [varchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[DatVal] [date] NULL,
	[DtMod] [datetime] NULL,
	[Source] [bit] NULL,
	[DtRefresh] [datetime] NULL,
	[UserID] [int] NULL,
	[InvalidAttempts] [int] NULL
) ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Register](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ScrapRegisterNumber] [bigint] NOT NULL,
	[Status] [tinyint] NOT NULL,
	[SyncDate] [datetime] NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_Register] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[RelatedProduct](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PartNumber] [int] NOT NULL,
	[Model] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Supplier] [int] NOT NULL,
	[Quantity] [int] NOT NULL,
	[TagPriceWithVat] [money] NULL,
	[TagPriceWithOutVat] [money] NULL,
	[UnitPrice] [money] NULL,
	[Currency] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_RelatedProduct] PRIMARY KEY CLUSTERED 
(
	[PartNumber] ASC,
	[Model] ASC,
	[Supplier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[RelatedProductDocument](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ReffID] [bigint] NOT NULL,
	[ReffDate] [datetime] NULL,
	[SenderID] [int] NULL,
	[Contract] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[DocumentID] [bigint] NULL,
	[Status] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[SyncDate] [datetime] NULL,
 CONSTRAINT [PK_RelatedProductDocument_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[RelatedProductDocumentDetails](
	[ID] [int] NOT NULL,
	[DocumentID] [int] NOT NULL,
	[ReffDate] [datetime] NOT NULL,
	[LineDocument] [int] NOT NULL,
	[PartNumber] [int] NOT NULL,
	[Model] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Quantity] [int] NULL,
	[TagPriceWithVat] [money] NULL,
	[TagPriceWithOutVat] [money] NULL,
	[IsChecked] [bit] NULL,
	[Currency] [nchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedData] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[Supplier] [int] NULL,
 CONSTRAINT [PK_RelatedProductDocumentDetails_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[DocumentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[RelatedProductGuide](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Model] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Supplier] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Price] [money] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_RelatedProductGuiad] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[RelatedProductTransfer](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ExtReffDate] [datetime] NULL,
	[Model] [nchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[PartNumber] [int] NULL,
	[Quantity] [int] NULL,
	[QuantityOnStorage] [int] NULL,
	[ExReffOperationType] [int] NULL,
	[ExtReffID] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[Supplier] [int] NULL,
 CONSTRAINT [PK_RelatedProductTransfer] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[RevaluationDocument](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ReffID] [bigint] NOT NULL,
	[ReffDate] [datetime] NOT NULL,
	[SyncDate] [datetime] NULL,
	[Status] [int] NOT NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Reason] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
 CONSTRAINT [PK_RevaluationDocument, PK_RevaluationDocument]]] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[RevaluationDocumentDetails](
	[ProductID] [int] NOT NULL,
	[DocumentID] [int] NOT NULL,
	[TagPriceWithVAT] [money] NOT NULL,
	[TagPriceWithOutVAT] [money] NOT NULL,
	[Status] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[Currency] [int] NULL,
 CONSTRAINT [PK_RevaluationDetails, PK_RevaluationDetails] PRIMARY KEY CLUSTERED 
(
	[ProductID] ASC,
	[DocumentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocument](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentNumber] [bigint] NULL,
	[Type] [int] NULL,
	[UserID] [int] NULL,
	[ClientCardNumber] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[ClientPhone] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[ClientEmail] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[SendCheck] [bit] NULL,
	[Currency] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[SyncDate] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[Amount] [money] NULL,
	[Count] [int] NULL,
 CONSTRAINT [PK_SaleDocument] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentAdditionalDiscount](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NULL,
	[ExtRefID] [bigint] NULL,
	[Amount] [money] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SaleDocumentAdditionalDiscount] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentCoupon](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NULL,
	[CouponID] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SaleDocumentCoupon] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentPayment](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NULL,
	[PosID] [int] NULL,
	[WorkShiftID] [int] NULL,
	[ExtReffID] [bigint] NULL,
	[PaymentType] [int] NULL,
	[Amount] [money] NULL,
	[CardType] [int] NULL,
	[CardNumber] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[CardDate] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[CreditNumber] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[ConditionType] [bit] NULL,
	[IsRemotePayment] [bit] NULL,
 CONSTRAINT [PK_SaleDocumentPayment] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentPrepayment](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Amount] [money] NULL,
	[DocumentID] [int] NULL,
	[UseDocumentID] [int] NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SaleDocumentPrepayment] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentProduct](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NULL,
	[LineDocument] [int] NULL,
	[ProductID] [int] NULL,
	[Quantity] [int] NULL,
	[TagPriceWithVAT] [money] NULL,
	[TagPriceWithoutVAT] [money] NULL,
	[PriceFromCRM] [money] NULL,
	[DiscountType] [int] NULL,
	[DiscountDescription] [text] COLLATE Cyrillic_General_CI_AS NULL,
	[ReasonReturnType] [int] NULL,
	[ReasonReturnDescription] [text] COLLATE Cyrillic_General_CI_AS NULL,
	[SalePriceWithVAT] [money] NULL,
	[SalePriceWithoutVAT] [money] NULL,
	[InternetNumber] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SaleDocumentProduct] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentRelatedProduct](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NULL,
	[LineDocument] [int] NULL,
	[PartNumber] [int] NULL,
	[Model] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[Quantity] [int] NULL,
	[TagPriceWithVAT] [money] NULL,
	[TagPriceWithoutVAT] [money] NULL,
	[SalePriceWithVAT] [money] NULL,
	[SalePriceWithoutVAT] [money] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[Supplier] [int] NULL,
 CONSTRAINT [PK_SaleDocumentRelatedProduct] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentScrapDocument](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NULL,
	[ScrapDocumentID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SaleDocumentScrapDocument] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SaleDocumentServices](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NULL,
	[Type] [int] NULL,
	[Amount] [money] NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SaleDocumentServices] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SalePlan](
	[ID] [int] NOT NULL,
	[Category] [int] NULL,
	[AmountPlan] [money] NULL,
	[Status] [int] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SalePlan] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[SalePlanDetails](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SalePlanID] [int] NULL,
	[UsersID] [int] NULL,
	[AmountPlan] [money] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_SalePlanDetails] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[ScrapDocument](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ScrapDocumentNumber] [bigint] NULL,
	[Status] [tinyint] NULL,
	[VendorID] [int] NULL,
	[RegisterID] [int] NULL,
	[SyncDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[Type] [tinyint] NULL,
 CONSTRAINT [PK_ScrapDocument] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[ScrapDocumentDetails](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[KTID] [int] NOT NULL,
	[Quantity] [int] NOT NULL,
	[Weight] [money] NOT NULL,
	[Description] [text] COLLATE Cyrillic_General_CI_AS NULL,
	[Imennik] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Impress] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[DocumentID] [int] NOT NULL,
	[Summa] [money] NOT NULL,
	[SinglePrice] [money] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_ScrapDetails] PRIMARY KEY NONCLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Shop_](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Number] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
 CONSTRAINT [PK_Shop] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[ShopAttributes_](
	[ID] [smallint] IDENTITY(1,1) NOT NULL,
	[Type] [tinyint] NULL,
	[Name] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Value] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[AttributeGroup] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[AttributeSort] [int] NULL,
	[Visibility] [bit] NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ShopAttribute_CreatedDate]  DEFAULT (getdate()),
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_ShopAttributes] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Showcase](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Description] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF__Showcase__Create__6F4A8121]  DEFAULT (getdate()),
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_Showcase] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Stones](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int] NOT NULL,
	[Stone] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Shape] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Size] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Color] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Clarity] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[Quantity] [int] NULL,
	[Weight] [money] NULL,
	[Setting] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_Stones] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[TransferDocument](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SyncDate] [datetime] NULL,
	[SenderID] [int] NULL,
	[ReceiverID] [int] NULL,
	[Type] [int] NULL,
	[Contract] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Status] [int] NULL,
	[TransferDocumentNumber] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_TransferDocument] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[TransferDocumentDetails](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NOT NULL,
	[LineDocument] [int] NULL,
	[Model] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[ProductID] [int] NULL,
	[Type] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[KtID] [int] NULL,
	[Size] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Color] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Gender] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[SupplierID] [int] NULL,
	[SupplierName] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Country] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[ThemedCollection] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Weight] [money] NULL,
	[CostWithoutVAT] [money] NULL,
	[CostCurrency] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[TagPriceWithVAT] [money] NULL,
	[TagPriceCurrency] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[TagPriceExtra] [money] NULL,
	[IsChecked] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[ShowcaseID] [int] NULL,
	[TagPriceWithOutVAT] [money] NULL,
	[DeclarationNumber] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
	[TnvedCode] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NULL,
 CONSTRAINT [PK_TransferDocumentDetails_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[DocumentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[TransferDocumentStonesDetails](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int] NOT NULL,
	[DocumentID] [int] NOT NULL,
	[Stone] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Shape] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Size] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Color] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Clarity] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[Quantity] [int] NULL,
	[Weight] [money] NULL,
	[Setting] [nvarchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_TransferDocumentStonesDetails] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[ProductID] ASC,
	[DocumentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[TransferRelatedProductDocument](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SyncDate] [datetime] NULL,
	[SenderID] [int] NULL,
	[ReceiverID] [int] NULL,
	[Contract] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Status] [int] NULL,
	[DocumentNumber] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
 CONSTRAINT [PK_TransferRelatedDocument] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[TransferRelatedProductDocumentDetails](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocumentID] [int] NOT NULL,
	[RelatedProductID] [int] NULL,
	[LineDocument] [int] NOT NULL,
	[PartNumber] [int] NOT NULL,
	[Model] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Quantity] [int] NOT NULL,
	[TagPriceWithVat] [money] NULL,
	[TagPriceWithOutVat] [money] NULL,
	[UnitPrice] [money] NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[LastModifiedByUserID] [int] NULL,
	[Supplier] [int] NULL,
 CONSTRAINT [PK_TransferRelatedProductDocumentDetails_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[UpdID](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [varchar](50) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[DtAdd] [datetime] NOT NULL CONSTRAINT [DF_UpdID_DtAdd]  DEFAULT (getdate()),
	[Res] [varchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[DtRes] [datetime] NULL,
 CONSTRAINT [PK_UpdID] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[UserActiveHistory](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Path] [varchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_UserActiveHistory_DtAdd]  DEFAULT (getdate()),
	[CreatedByUserID] [int] NOT NULL,
	[AttributeID] [int] NULL,
	[Type] [int] NULL,
	[SyncDate] [datetime] NULL,
 CONSTRAINT [PK_UserActiveHistory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[Users](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Number] [int] NULL,
	[FirstName] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[LastName] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[SecondName] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[INN] [varchar](20) COLLATE Cyrillic_General_CI_AS NULL,
	[RoleID] [tinyint] NULL,
	[Phone] [varchar](50) COLLATE Cyrillic_General_CI_AS NULL,
	[Email] [varchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[Active] [bit] NULL,
	[Login] [nvarchar](30) COLLATE Cyrillic_General_CI_AS NULL,
	[Password] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[Birthday] [date] NULL,
	[GenderID] [tinyint] NULL,
	[ThemeID] [tinyint] NULL,
 CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[UsersWRK](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[Type] [tinyint] NOT NULL,
	[DtAdd] [datetime] NOT NULL CONSTRAINT [DF_UsersWRK_DtAdd]  DEFAULT (getdate()),
	[SyncDate] [datetime] NULL,
 CONSTRAINT [PK_UsersWRK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[Vendor](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Address] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Serial] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Number] [nvarchar](40) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Issue] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[IssueDate] [datetime] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
 CONSTRAINT [PK_Vendor] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
SET ANSI_PADDING ON 

GO
CREATE TABLE [dbo].[Versions](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Number] [varchar](20) COLLATE Cyrillic_General_CI_AS NULL,
	[SyncDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_Versions] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_PADDING OFF 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[WorkPinPad](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PosID] [nvarchar](max) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[Status] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
 CONSTRAINT [PK_WorkPinPad] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [dbo].[WorkShift](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PosID] [int] NOT NULL,
	[WorkShiftID] [int] NOT NULL,
	[OpeningDate] [datetime] NOT NULL,
	[OpeningUser] [int] NOT NULL,
	[ClosingDate] [datetime] NULL,
	[ClosingUser] [int] NULL,
 CONSTRAINT [PK_WorkShift] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [srv].[ddl_log](
	[DDL_Log_GUID] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ddl_log_DDL_Log_GUID]  DEFAULT (newid()),
	[PostTime] [datetime] NOT NULL,
	[DB_Login] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[DB_User] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Event] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[TSQL] [nvarchar](max) COLLATE Cyrillic_General_CI_AS NULL,
 CONSTRAINT [PK_ddl_log] PRIMARY KEY CLUSTERED 
(
	[DDL_Log_GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE TABLE [srv].[ddl_log_all](
	[DDL_Log_GUID] [uniqueidentifier] NOT NULL,
	[Server_Name] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[DB_Name] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NOT NULL,
	[PostTime] [datetime] NOT NULL,
	[DB_Login] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[DB_User] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[Event] [nvarchar](255) COLLATE Cyrillic_General_CI_AS NULL,
	[TSQL] [nvarchar](max) COLLATE Cyrillic_General_CI_AS NULL,
	[InsertUTCDate] [datetime] NOT NULL,
 CONSTRAINT [PK_ddl_log_all] PRIMARY KEY CLUSTERED 
(
	[DDL_Log_GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 

GO
ALTER TABLE [srv].[ddl_log_all] ADD  CONSTRAINT [DF_ddl_log_all_DDL_Log_GUID]  DEFAULT (newid()) FOR [DDL_Log_GUID] 

GO
ALTER TABLE [srv].[ddl_log_all] ADD  CONSTRAINT [DF_ddl_log_all_InsertUTCDate]  DEFAULT (getutcdate()) FOR [InsertUTCDate] 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MS_CreateJob_UpdateSales]
	-- Add the parameters for the stored procedure here

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @jobId BINARY(16)
EXEC  msdb.dbo.sp_add_job @job_name=N'UpdateSales', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=2, 
		@notify_level_netsend=2, 
		@notify_level_page=2, 
		@delete_level=0, 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'MJF\Knyazev', @job_id = @jobId OUTPUT
select @jobId

EXEC msdb.dbo.sp_add_jobserver @job_name=N'UpdateSales', @server_name = N'SERV72\TAMUZ'

EXEC msdb.dbo.sp_add_jobstep @job_name=N'UpdateSales', @step_name=N'First Step', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_fail_action=2, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'exec xp_UpdSaleDocument ', 
		@database_name=N'', 
		@flags=0

EXEC msdb.dbo.sp_update_job @job_name=N'UpdateSales', 
		@enabled=1, 
		@start_step_id=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=2, 
		@notify_level_netsend=2, 
		@notify_level_page=2, 
		@delete_level=0, 
		@description=N'', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'MJF\Knyazev', 
		@notify_email_operator_name=N'', 
		@notify_netsend_operator_name=N'', 
		@notify_page_operator_name=N''

DECLARE @schedule_id int
EXEC msdb.dbo.sp_add_jobschedule @job_name=N'UpdateSales', @name=N'Time_Stamp_For_Update_Sales', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=8, 
		@freq_subday_interval=3, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=1, 
		@active_start_date=20200923, 
		@active_end_date=99991231, 
		@active_start_time=80000, 
		@active_end_time=225959, @schedule_id = @schedule_id OUTPUT
select @schedule_id

end 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
CREATE proc [dbo].[SQL_exec_proc]
(
@tab_name nvarchar (50),
@Column_Name nvarchar (50),
@is_nulable nvarchar (50)
)
as
begin
	declare @alt_str nvarchar(max)
	set @alt_str = 'alter table '+ @tab_name + ' alter column '+@Column_Name+' money ' + @is_nulable
	exec sp_sqlexec @alt_str
END  


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
	--параметры входа 
	--p_AddUserID
	--p_productID
	--p_documentID
	--реализация - xp_AddTransferProductProcedure 
	--искать в Product товар
	--если находиться - менять статус (на 1)
	--добавлять Product в табличку TransferDocumentDetails
-- =============================================
CREATE PROCEDURE [dbo].[xp_AddTransferProductProcedure]  
	@p_AddUserID int=0,
	@p_ProductID int = null,
	@p_DocumentID bigint = null
AS
BEGIN
	SET NOCOUNT ON;
	declare @n int =0
		-- Insert statements for procedure here
	SELECT [ID]
		  ,[Model]
		  ,[ModelID]
		  ,[Type]
		  ,[KtID]
		  ,[Size]
		  ,[Color]
		  ,[Gender]
		  ,[SupplierID]
		  ,[SupplierName]
		  ,[Country]
		  ,[ThemedCollection]
		  ,[Weight]
		  ,[CostWithoutVAT]
		  ,[CostCurrency]
		  ,[TagPriceWithVAT]
		  ,[TagPriceCurrency]
		  ,[TagPriceExtra]
		  ,[Status]
		  ,[ShowcaseID]
		  ,[CreatedDate]
		  ,[LastModifiedDate]
		  ,[CreatedByUserID]
		  ,[LastModifiedByUserID]
		  ,[TagPriceWithOutVAT]
		  ,[DeclarationNumber]
		  ,[TnvedCode]
	  FROM [dbo].[Product]
	  WHERE [ID] = @p_ProductID

  set @n=@@ROWCOUNT
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xp_clear_all_tbl_UpdID]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete FROM [dbo].[UpdID]

	--delete from  [Tamuz].[DataAdapter].[dbo].[UpdID]
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xp_Create_LinkedServer] 
AS
BEGIN
	SET NOCOUNT ON;
	
  declare @Vserver varchar(100),
  @Vsrvproduct varchar(100),
  @Vprovider varchar(100),
  @Vdatasrc varchar(100),
  @Vlocation varchar(100),
  @Vprovstr varchar(100),
  @Vcatalog varchar(100),
  @Vrmtsrvname varchar(100),
  @Vuseself varchar(100),
  @Vrmtuser varchar(100),
  @Vlocallogin varchar(100),
  @Vrmtpassword varchar(100)

  select @Vserver=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='server'
  select @Vsrvproduct=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='product_name'
  select @Vprovider=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='provider_name'
  select @Vdatasrc=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='data_source'
  select @Vlocation=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='location'
  select @Vprovstr=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='provider_string'
  select @Vcatalog=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='catalog'
  select @Vrmtsrvname=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='rmtsrvname'
  select @Vuseself=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='useself'
  select @Vlocallogin=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='locallogin'
  select @Vrmtuser=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='rmtuser'
  select @Vrmtpassword=Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='rmtpassword'

  -- select @Vserver,@Vsrvproduct,@Vprovider,@Vdatasrc,@Vlocation,@Vprovstr,@Vcatalog,@Vrmtsrvname,@Vuseself,@Vlocallogin,@Vrmtuser,@Vrmtpassword
  
begin try 
		EXEC master.dbo.sp_dropserver @Vserver, @droplogins='droplogins'
end try

begin catch
		select 'dont_exist'
end catch

EXEC sp_addlinkedserver  
  @server=@Vserver,
  @srvproduct=@Vsrvproduct,       
  @provider=@Vprovider,
  @datasrc=@Vdatasrc,
  @location=@Vlocation,  
  @provstr=@Vprovstr,  
  @catalog=@Vcatalog

EXEC sp_addlinkedsrvlogin  
  @rmtsrvname=@Vrmtsrvname,  
  @useself=@Vuseself,  
  @rmtpassword=@Vrmtpassword,
  @rmtuser=@Vrmtuser
  

EXEC sp_serveroption @Vserver, 'rpc out', true; 
EXEC sp_serveroption @Vserver, 'remote proc transaction promotion', false

declare @IsDataAdapterConnection int 
declare @VServ2 sysname = (select Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='server')
EXEC @IsDataAdapterConnection = [master].[dbo].sp_testlinkedserver @VServ2
select @IsDataAdapterConnection
update Attributes set Value = case when @IsDataAdapterConnection = 0 then 'True' else 'False' end where Name = 'IsDataAdapterConnection'

END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetAbstractTransferDocumentStonesDetails 61463000

-- =============================================
CREATE PROCEDURE [dbo].[xp_GetAbstractTransferDocumentStonesDetails]
	@p_ProductID int,	
	@p_DocumentID int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

		declare @p_SearchResult int =isnull((select top 1 [ID] from dbo.[TransferDocumentDetails] a where a.[ProductID]=@p_ProductID and a.DocumentID = @p_DocumentID),0)
		if @p_SearchResult=0 begin
			exec xp_GetStones @p_ProductID
		end
		else begin
			exec xp_GetTransferDocumentStonesDetails @p_ProductID, @p_DocumentID
		end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetAnotherCompanyAttributes 'Item', 1
-- xp_GetAnotherCompanyAttributes 'Name'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetAnotherCompanyAttributes]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Name
	@p_ID int=0,
	@p_CompanyID int=0,
	@p_Name nvarchar(255) ='', 
    @p_ShopID smallint=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)
	set @p_Name = isnull(@p_Name,'')
	set @p_ShopID = isnull(@p_ShopID,0)

	if @p_TypeScreen='item' begin
		SELECT l.[ID],
					l.[CompanyID],
					l.[ShopID],
					l.[Type],
					l.[Name],
					l.[Value],
					l.[AttributeGroup],
					l.[Attributesort],
					l.[Visibility],
					l.[IsEnable],
					l.[CreatedByUserID],
					l.[LastModifiedByUserID],
					l.[CreatedDate],
					l.[LastModifiedDate]
		  FROM [dbo].AnotherCompanyAttributes l
		where l.ID=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
			SELECT l.[ID],
					l.[CompanyID],
					l.[ShopID],
					l.[Type],
					l.[Name],
					l.[Value],
					l.[AttributeGroup],
					l.[Attributesort],
					l.[Visibility],
					l.[IsEnable],
					l.[CreatedByUserID],
					l.[LastModifiedByUserID],
					l.[CreatedDate],
					l.[LastModifiedDate]
			  FROM [dbo].AnotherCompanyAttributes l
			  WHERE 
			  (l.[ShopID] = @p_ShopID or l.CompanyID=(select lo.CompanyID from [dbo].[Location] lo(nolock) where lo.ID  = @p_ShopID) and  l.ShopID is null) 
			  OR
			  (@p_CompanyID=0 or l.[CompanyID]=@p_CompanyID)
			  AND 
			  (@p_ShopID=0 or l.[ShopID] = @p_ShopID)
			  AND 
			  (@p_Name=0 or l.[Name] = @p_Name)
	end
	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
			SELECT l.[ID],
					l.[CompanyID],
					l.[ShopID],
					l.[Type],
					l.[Name],
					l.[Value],
					l.[AttributeGroup],
					l.[Attributesort],
					l.[Visibility],
					l.[IsEnable],
					l.[CreatedByUserID],
					l.[LastModifiedByUserID],
					l.[CreatedDate],
					l.[LastModifiedDate]
			  FROM [dbo].AnotherCompanyAttributes l
			  WHERE 			  
			  (@p_Name=0 or l.[Name] = @p_Name)
	end

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [xp_GetAttributes] 'grid', '', 0, 0, '', '', 'CRM'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetAttributes]
	@p_TypeScreen nvarchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',
	@p_ID int=0,
	@p_Type tinyint = 0,
	@p_Name nvarchar(255) = '',
	@p_Value nvarchar(max) = '',
	@p_AttributeGroup nvarchar(50)='',
	@p_SyncID int=null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT [ID]
			,[Type]
			,[Name]
			,[Description]
			,[Value]
			,[AttributeGroup]
			,[AttributeSort]
			,[Visibility]
			,[SyncID]
			,[IsEnable]
			,[CreatedDate]
			,[LastModifiedDate]
			,[CreatedByUserID]
			,[LastModifiedByUserID]
		FROM [dbo].[Attributes]
		where ID=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		SELECT [ID]
			,[Type]
			,[Name]
			,[Description]
			,[Value]
			,[AttributeGroup]
			,[AttributeSort]
			,[Visibility]
			,[SyncID]
			,[IsEnable]
			,[CreatedDate]
			,[LastModifiedDate]
			,[CreatedByUserID]
			,[LastModifiedByUserID]
		FROM [dbo].[Attributes] 
		where (@p_Search='' 
				or (convert(varchar(10), ID) like @p_search 
					or [Name]  like '%' + @p_search +'%'
					or [Value]  like '%' + @p_search +'%')) 
				and (@p_AttributeGroup='' or AttributeGroup=@p_AttributeGroup)
				and ((@p_SyncID is null) or (@p_SyncID is not null and [SyncID] = 0))
		order by [AttributeSort]
	end
	else if @p_TypeScreen='name' begin
		SELECT [ID]
			,[Type]
			,[Name]
			,[Description]
			,[Value]
			,[AttributeGroup]
			,[Visibility]
			,[SyncID]
			,[IsEnable]
			,[CreatedDate]
			,[LastModifiedDate]
			,[CreatedByUserID]
			,[LastModifiedByUserID]
		FROM [dbo].[Attributes] 
		where [Name]=@p_Name
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.Coupon
-- =============================================
-- xp_GetCoupon 'Item', '', 1
-- xp_GetCoupon 'Grid', ''
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetCoupon]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',
	@p_ID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @dt_now datetime=getdate()

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
	set @p_search='%' + @p_search + '%'
		SELECT [ID]
			  ,[Description]
			  ,[Discount]
			  ,[Quantity]
			  ,[CouponDateFrom]
			  ,[CouponDateTo]
			  ,[CreatedDate]
			  ,[LastModifiedDate]
			  ,[CreatedByUserID]
			  ,[LastModifiedByUserID]
		  FROM [dbo].[Coupon]
		  WHERE
			   [ID] = @p_ID
			   AND [CouponDateFrom]<=@dt_now
			   AND [CouponDateTo]>=@dt_now

	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		set @p_search='%' + @p_search + '%'
		SELECT [ID]
			  ,[Description]
			  ,[Discount]
			  ,[Quantity]
			  ,[CouponDateFrom]
			  ,[CouponDateTo]
			  ,[CreatedDate]
			  ,[LastModifiedDate]
			  ,[CreatedByUserID]
			  ,[LastModifiedByUserID]
		  FROM [dbo].[Coupon]
		  WHERE 	  
			 ([ID] like @p_search or
			 [Description] like @p_search or
			 [Discount] like @p_search or
			 [Quantity] like @p_search) AND
			 ([CouponDateFrom]<=@dt_now
			   AND [CouponDateTo]>=@dt_now)
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Справочники, сопутствующие товары
-- xp_GetCurrencyGuide 'grid', 'Белорусский рубль'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetCurrencyGuide]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Name
	@p_search nvarchar(40)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)
	
	if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
			set @p_search='%' + @p_search + '%'
			SELECT crr.[Code]
				  ,crr.[ShortDescription]
				  ,crr.[LongDescription]
				  ,crr.[LastModifiedDate]
				  ,crr.[CreatedByUserID]
				  ,crr.[LastModifiedByUserID]
			  FROM [dbo].[Currency] crr
			  WHERE 
			  Code like @p_search or
			  ShortDescription like @p_search or
			  LongDescription like @p_search
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> старая Поставки, результирующая грида
-- =============================================
-- xp_GetDocument 'Item','', 0,0,'','','','','','','',''
-- xp_GetDocument 'Grid','',0,0,'','','','','','','',''
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetDocument]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter
	@p_search nvarchar(40)='',
	@p_UserID int,
	@p_ID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT d.[ID]
			  ,d.[ReffID]
			  ,d.[ReffDate]
			  ,d.[SenderID]
			  ,d.[Contract]
			  ,d.[Status]
			  ,d.[DocumentID]
			  ,d.[CreatedDate]
			  ,d.[LastModifiedDate]
			  ,d.[CreatedByUserID]
			  ,d.[LastModifiedByUserID]
		  FROM [dbo].[Document] d
		where d.ID=@p_ID
	end
	
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		if @p_Search='' begin
			SELECT d.[ID]
				  ,d.[ReffID]
				  ,d.[ReffDate]
				  ,d.[SenderID]
				  ,d.[Contract]
				  ,d.[Status]
				  ,d.[DocumentID]
				  ,d.[CreatedDate]
				  ,d.[LastModifiedDate]
				  ,d.[CreatedByUserID]
				  ,d.[LastModifiedByUserID]
			  FROM [dbo].[Document] d
		end
		else begin
			set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
			set @p_search='%' + @p_search + '%'
			SELECT d.[ID]
				  ,d.[ReffID]
				  ,d.[ReffDate]
				  ,d.[SenderID]
				  ,d.[Contract]
				  ,d.[Status]
				  ,d.[DocumentID]
				  ,d.[CreatedDate]
				  ,d.[LastModifiedDate]
				  ,d.[CreatedByUserID]
				  ,d.[LastModifiedByUserID]
			  FROM [dbo].[Document] d
		end
	end
	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
			SELECT 1
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, детали
-- =============================================
-- xp_GetDocumentDetails 'Name',18
-- xp_GetDocumentDetails 'Grid',0
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetDocumentDetails]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter	
	@p_DocumentID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	set @p_TypeScreen = LOWER(@p_TypeScreen)
			
	if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
			SELECT dd.[ID]
				  ,dd.[DocumentID]
				  ,dd.[LineDocument]
				  ,dd.[Model]
				  ,dd.[ModelID]
				  ,dd.[Type]
				  ,dd.[KtID]
				  ,meid.[Description] as MetalDescription
				  ,ktid.[Description] as KtIDShortDescription
				  ,Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) as KtIDDescription
				  ,dd.[Size]
				  ,dd.[Color]
				  ,dd.[Gender]
				  ,dd.[SupplierID]
				  ,dd.[SupplierName]
				  ,dd.[Country]
				  ,dd.[ThemedCollection]
				  ,dd.[Weight]
				  ,dd.[CostWithoutVAT]
				  ,dd.[CostCurrency]
				  ,dd.[TagPriceWithVAT]
				  ,dd.[TagPriceCurrency]
				  ,cur.[Code]
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,dd.[TagPriceExtra]
				  ,dd.[ShowcaseID]
				  ,shid.[Description] as ShowcaseIDDescription
				  ,dc.[ReffID]
				  ,dd.[IsChecked]
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
				  ,dd.TagPriceWithOutVAT 
				  ,dd.DeclarationNumber 
				  ,dd.TnvedCode  

			  FROM [dbo].[DocumentDetails] dd
			  		left join dbo.[KT] ktid on ktid.ID=dd.[KtID]
					left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					left join dbo.[Showcase] shid on shid.ID=dd.[ShowcaseID]
					left join dbo.[Document] dc on dc.ID=dd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dd.TagPriceCurrency
			  where dd.DocumentID = @p_DocumentID
			  order by dd.[LineDocument]
	end

	if @p_TypeScreen in ('Grid') begin ---------------------------------------------------------------------
			SELECT dd.[ID]
				  ,dd.[DocumentID]
				  ,dd.[LineDocument]
				  ,dd.[Model]
				  ,dd.[ModelID]
				  ,dd.[Type]
				  ,dd.[KtID]
				  ,meid.[Description] as MetalDescription
				  ,ktid.[Description] as KtIDShortDescription
				  ,Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) as KtIDDescription
				  ,dd.[Size]
				  ,dd.[Color]
				  ,dd.[Gender]
				  ,dd.[SupplierID]
				  ,dd.[SupplierName]
				  ,dd.[Country]
				  ,dd.[ThemedCollection]
				  ,dd.[Weight]
				  ,dd.[CostWithoutVAT]
				  ,dd.[CostCurrency]
				  ,dd.[TagPriceWithVAT]
				  ,dd.[TagPriceCurrency]
				  ,cur.[Code]
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,dd.[TagPriceExtra]
				  ,dd.[ShowcaseID]
				  ,shid.[Description] as ShowcaseIDDescription
				  ,dc.[ReffID]
				  ,dd.[IsChecked]
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
				  ,dd.TagPriceWithOutVAT 
				  ,dd.DeclarationNumber 
				  ,dd.TnvedCode  

			  FROM [dbo].[DocumentDetails] dd
			  		left join dbo.[KT] ktid on ktid.ID=dd.[KtID]
					left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					left join dbo.[Showcase] shid on shid.ID=dd.[ShowcaseID]
					left join dbo.[Document] dc on dc.ID=dd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dd.TagPriceCurrency
			  order by dd.[LineDocument]
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, сборка фильтров
-- =============================================
-- xp_GetDocumentFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetDocumentFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_Users nvarchar(MAX)='',
		@p_SenderID nvarchar(MAX)='',
		@p_ReceiverID nvarchar(MAX)='',
		@p_Type nvarchar(MAX)='',
		@p_Status nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_Quantity_Min money = 0,
		@p_Quantity_Max money = 0,
		@p_Weight_Min money = 0,
		@p_Weight_Max money = 0,
		@p_TagPriceWithVAT_Min money = 0,
		@p_TagPriceWithVAT_Max money = 0,
		@p_TagPriceWithOutVAT_Min money = 0,
		@p_TagPriceWithOutVAT_Max money = 0

	--Users
-------------------------------------------------------------------
	SELECT
		@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[CreatedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[Document] ua
					left join dbo.Users u on u.[ID]=ua.[CreatedByUserID]
		) as Temp
	IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

	--LastUsers
-------------------------------------------------------------------
	SELECT
		@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[LastModifiedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[Document] ua
					inner join dbo.Users u on u.[ID]=ua.[LastModifiedByUserID]
		) as Temp
	IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL

	--SenderID
-------------------------------------------------------------------
	SELECT
		@p_SenderID = CONCAT(@p_SenderID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[SenderID] as [Id]
					,Concat(p.[SenderID],' ',ls.Description) as [Value]
				FROM [dbo].[Document] p
					left join dbo.Location ls on ls.[ID]=p.[SenderID]
		) as Temp
	IF LEN(@p_SenderID) > 2 SET @p_SenderID = SUBSTRING(@p_SenderID,1, LEN(@p_SenderID)-1) ELSE SET @p_SenderID = NULL

	--ReceiverID
-------------------------------------------------------------------
	SELECT
		@p_ReceiverID = CONCAT(@p_ReceiverID,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[ReceiverID] as [Value]
				FROM [dbo].[Document] p
		) as Temp
	IF LEN(@p_ReceiverID) > 2 SET @p_ReceiverID = SUBSTRING(@p_ReceiverID,1, LEN(@p_ReceiverID)-1) ELSE SET @p_ReceiverID = NULL

	--Type
-------------------------------------------------------------------
	SELECT
		@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[Type] as [Value]
				FROM [dbo].[Document] p
		) as Temp
	IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL

	--Status
-------------------------------------------------------------------
	SELECT
		@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					[Status] as [Value]
				FROM [dbo].[Document] p
		) as Temp
	IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

	--Quantity_Min Quantity_Max
-------------------------------------------------------------------
	SELECT @p_Quantity_Min=MIN(qs.QuantitySumm), @p_Quantity_Max=MAX(qs.QuantitySumm) FROM (
		SELECT (SELECT COUNT(ID) from DocumentDetails doc WHERE doc.DocumentID=p.[ID]) as QuantitySumm
	FROM [dbo].[Document] as p) as qs

	--Weight_Min Weight_Max
-------------------------------------------------------------------
	SELECT @p_Weight_Min=MIN(ws.WeightSumm), @p_Weight_Max=MAX(ws.WeightSumm) FROM (
		SELECT (SELECT SUM(Weight) from DocumentDetails doc WHERE doc.DocumentID=p.[ID]) as WeightSumm
	FROM [dbo].[Document] as p) as ws

	--TagPriceWithVAT_Min TagPriceWithVAT_Max
-------------------------------------------------------------------
	SELECT @p_TagPriceWithVAT_Min=MIN(ss.SummaSumm), @p_TagPriceWithVAT_Max=MAX(ss.SummaSumm) FROM (
		SELECT (SELECT SUM(TagPriceWithVAT) from DocumentDetails doc WHERE doc.DocumentID=p.[ID]) as SummaSumm
	FROM [dbo].[Document] as p) as ss

	--TagPriceWithOutVAT_Min TagPriceWithOutVAT_Max
-------------------------------------------------------------------
	SELECT @p_TagPriceWithOutVAT_Min=MIN(ss.SummaSumm), @p_TagPriceWithOutVAT_Max=MAX(ss.SummaSumm) FROM (
		SELECT (SELECT SUM(TagPriceWithOutVAT) from DocumentDetails doc WHERE doc.DocumentID=p.[ID]) as SummaSumm
	FROM [dbo].[Document] as p) as ss

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Users as CreatedByUserID,
			@p_LastUsers as LastModifiedByUserID,
			@p_SenderID as SenderID,
			@p_ReceiverID as ReceiverID,
			@p_Type as [Type],
			@p_Status as [Status],
		 	@p_Quantity_Min as QuantityMin,
			@p_Quantity_Max as QuantityMax,
			@p_Weight_Min as WeightMin,
			@p_Weight_Max as WeightMax,
			@p_TagPriceWithVAT_Min as TagPriceWithVATMin,
			@p_TagPriceWithVAT_Max as TagPriceWithVATMax,
			@p_TagPriceWithOutVAT_Min as TagPriceWithOutVATMin,
			@p_TagPriceWithOutVAT_Max as TagPriceWithOutVATMax
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, детали камней
-- =============================================
-- xp_GetDocumentStonesDetails 'Item','', 0,0,'','','','','','','',''
-- xp_GetDocumentStonesDetails 'Grid',0,0
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetDocumentStonesDetails]
	@p_TypeScreen varchar(10), --Name, Grid
	@p_ProductID int,	
	@p_DocumentID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)
			
	if @p_TypeScreen in ('name') begin ---------------------------------------------------------------------
		SELECT ds.[ID]
			  ,ds.[ProductID]
			  ,ds.[DocumentID]
			  ,ds.[Stone]
			  ,ds.[Shape]
			  ,ds.[Size]
			  ,ds.[Color]
			  ,ds.[Clarity]
			  ,ds.[Quantity]
			  ,ds.[Weight]
			  ,ds.[Setting]
			  ,ds.[CreatedDate]
			  ,ds.[LastModifiedDate]
			  ,ds.[CreatedByUserID]
			  ,ds.[LastModifiedByUserID]
		  FROM [dbo].[DocumentStonesDetails] ds
		where ds.[ProductID]=@p_ProductID and ds.[DocumentID]=@p_DocumentID
	end

	if @p_TypeScreen in ('grid') begin ---------------------------------------------------------------------
		SELECT ds.[ID]
			  ,ds.[ProductID]
			  ,ds.[DocumentID]
			  ,ds.[Stone]
			  ,ds.[Shape]
			  ,ds.[Size]
			  ,ds.[Color]
			  ,ds.[Clarity]
			  ,ds.[Quantity]
			  ,ds.[Weight]
			  ,ds.[Setting]
			  ,ds.[CreatedDate]
			  ,ds.[LastModifiedDate]
			  ,ds.[CreatedByUserID]
			  ,ds.[LastModifiedByUserID]
		  FROM [dbo].[DocumentStonesDetails] ds
	end

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, подсчет сумм
-- =============================================
-- xp_GetDocumentSummary '', '01.01.1753 0:00:00', '11.12.2020 11:53:41', '01.01.1753 0:00:00', '11.12.2020 11:53:41', 'All', 'All', 'All', 'All', 'All', 'All', 5, 5, 8.4, 49.65, 0, 1387800, 0, 1387800
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetDocumentSummary]
	@p_search nvarchar(40)='',

	@p_FromDateRefDate datetime,
	@p_ToDateRefDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_SenderID nvarchar(MAX)='',	
	@p_ReceiverID nvarchar(MAX)='',	
	@p_Type nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,

	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_TagPriceWithOutVAT_Min money = 0,
	@p_TagPriceWithOutVAT_Max money = 0
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

		declare @p_search_money nvarchar(40)
		declare @p_search_string nvarchar(40)
		declare @p_order nvarchar(40)='ASC';
		declare @delimeter nvarchar(10)= '''|''';
		declare @filter_all nvarchar(10)= '''All''';

		declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
		declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
		declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
		declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)

		if (@p_Type = '' or @p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = ''or @p_ReceiverID= '')
			return

		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
		set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
		set @p_ReceiverID = REPLACE(@p_ReceiverID, '|', ',')
		set @p_Type = REPLACE(@p_Type, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')

		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'
		
		declare @p_search_type nvarchar(MAX) = ''
		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_createdByUserID nvarchar(MAX) = ''		
		declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
		declare @p_search_senderID nvarchar(MAX) = ''
		declare @p_search_receiverID nvarchar(MAX) = ''

		declare @p_search_timeReffDate nvarchar(MAX) = ''	
		declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''	
		declare @p_filter_request_Weight nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''
		declare @p_filter_request_TagPriceWithOutVAT nvarchar(MAX) = ''
		
		set @p_filter_request_Quantity = ' 		
					(
						(
							( (SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
							( (SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_Weight = ' and		
				(
					(
						( (SELECT SUM([Weight])  from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
						( (SELECT SUM([Weight]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
					) 					
				)'

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and (
					(
						( (SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						( (SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
					) 					
				)'					

		set @p_filter_request_TagPriceWithOutVAT = 		 		
				' and (
					(
						( (SELECT SUM([TagPriceWithOutVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Min,126 ) + ') and
						( (SELECT SUM([TagPriceWithOutVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Max,126 ) + ')
					) 					
				)'					

		if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
			set @p_search_timeReffDate =  		
				' and (
					CONVERT(date, s.ReffDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''				
				)'		
			end

		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''
				)'			
			end

		set @p_filter_request =@p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_filter_request_TagPriceWithOutVAT
		set @p_filter_request = @p_filter_request + @p_search_timeReffDate + @p_search_timeLastModifiedDate  

		--print @p_filter_request

		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.DocumentID as nvarchar(40)) like ''' + @p_search_money + ''' or
						(cast(s.ReffID as nvarchar(40)) like ''' + @p_search_money + ''' and s.Status > 0) or
						s.[Contract] like ''' + @p_search_string + '''
					)				
				)
			)'

		set @p_filter_request = @p_filter_request + @p_search_request 	

		if (@p_Type != 'All')
			set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;
		if (@p_SenderID != 'All') 
			set @p_search_SenderID = ' and s.[SenderID] in (' + @p_SenderID + ') ' ;
		if (@p_ReceiverID != 'All') 
			set @p_search_ReceiverID = ' and s.[ReceiverID] in (' + @p_ReceiverID + ') ' ;
		
		set @p_filter_request = @p_filter_request + @p_search_type + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID + @p_search_ReceiverID

		declare @end_request nvarchar(max) = ''	

		set @end_request = 
		'SELECT 		
					COUNT(st.[ID]) as DocumentCount,
					SUM(SummaryQuantity) as DocumentSummaryQuantity,
					SUM(SummaryWeigth) as DocumentSummaryWeigth,
					SUM(SummarySumma) as DocumentSummarySumma
					FROM (
							SELECT								
									s.[ID]
							  ,s.[ReffID]
							  ,s.[ReffDate]
							  ,s.[SenderID]
							  ,s.[ReceiverID]
							  ,s.[Type]
							  ,s.[Contract]
							  ,s.[Status]
							  ,s.[DocumentID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as SummaryQuantity
							  ,(SELECT SUM([Weight]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as SummaryWeigth
							  ,(SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as SummarySumma
						FROM [dbo].[Document] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
								+ @p_filter_request									
					+')  AS st'
											
		--print @end_request
		EXECUTE (@end_request);	
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, результирующая грида
-- =============================================
-- xp_GetDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:00', '11.02.2021 11:53:41', '01.01.1753 0:00:00', '11.02.2021 11:53:41', 'All', 'All', 'All', 'All', 'All', 'All', 0, 99999999999, 0, 999999999, 0, 999999999, 0, 999999999, 0, 20, 'ID', 1
-- xp_GetDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:00', '11.02.2021 11:53:41', '01.01.1753 0:00:00', '11.02.2021 11:53:41'
-- xp_GetDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:10', '11.02.2021 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 'All', 'All', 'All', 'All', 'All', 'All', 5, 5, 11.42, 40.03, 102135, 1528067, 81708, 1222453.6, 0, 20, 'ID', 1
-- xp_GetDocumentTable 'item', '', 12 , '01.01.1753 0:00:00', '11.02.2021 11:53:41', '01.01.1753 0:00:00', '11.02.2021 11:53:41', 'All', 'All', 'All', 'All', 'All', 'All', 5, 5, 11.42, 40.03, 102135, 1528067, 81708, 1222453.6, 0, 20, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetDocumentTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,

	@p_FromDateRefDate datetime,
	@p_ToDateRefDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_SenderID nvarchar(MAX)='',	
	@p_ReceiverID nvarchar(MAX)='',	
	@p_Type nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,

	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_TagPriceWithOutVAT_Min money = 0,
	@p_TagPriceWithOutVAT_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)



	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT TOP 1  s.[ID]
							  ,s.[ReffID]
							  ,s.[ReffDate]
							  ,s.[SenderID]
							  ,s.[ReceiverID]
							  ,s.[Type]
							  ,s.[Contract]
							  ,s.[Status]
							  ,s.[DocumentID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(s.SenderID,case when ls.Description is null then '' else ' - ' end,ls.Description) as SenderDescription
							  ,Concat(s.ReceiverID,case when lr.Description is null then '' else ' - ' end,lr.Description) as ReceiverDescription
							  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM([Weight]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
							  ,(SELECT SUM([TagPriceWithOutVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as SummaSummOUTVAT
						FROM [dbo].[Document] s
								left join dbo.Location ls on ls.[ID]=s.[SenderID]
								left join dbo.Location lr on lr.[ID]=s.[ReceiverID]
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]
								where s.ID=@p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_Type = '' or @p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = ''or @p_ReceiverID= '')
				return
		
		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
		set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
		set @p_ReceiverID = REPLACE(@p_ReceiverID, '|', ',')
		set @p_Type = REPLACE(@p_Type, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')

		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;
		
		declare @p_search_type nvarchar(MAX) = ''
		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_createdByUserID nvarchar(MAX) = ''		
		declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
		declare @p_search_senderID nvarchar(MAX) = ''
		declare @p_search_receiverID nvarchar(MAX) = ''

		declare @p_search_timeReffDate nvarchar(MAX) = ''	
		declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''	
		declare @p_filter_request_Weight nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''
		declare @p_filter_request_TagPriceWithOutVAT nvarchar(MAX) = ''

		set @p_filter_request_Quantity = ' 		
					(
						(
							( (SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
							( (SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_Weight = ' and		
				(
					(
						( (SELECT SUM([Weight])  from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
						( (SELECT SUM([Weight]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
					) 					
				)'

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and (
					(
						( (SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						( (SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
					) 					
				)'					

		set @p_filter_request_TagPriceWithOutVAT = 		 		
				' and (
					(
						( (SELECT SUM([TagPriceWithOutVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Min,126 ) + ') and
						( (SELECT SUM([TagPriceWithOutVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Max,126 ) + ')
					) 					
				)'					

		if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
			set @p_search_timeReffDate =  		
				' and (
					CONVERT(date, s.ReffDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''				
				)'		
			end

		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''
				)'			
			end

		set @p_filter_request =@p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_filter_request_TagPriceWithOutVAT
		set @p_filter_request = @p_filter_request + @p_search_timeReffDate + @p_search_timeLastModifiedDate  

		--print @p_filter_request

		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.DocumentID as nvarchar(40)) like ''' + @p_search_money + ''' or
						(cast(s.ReffID as nvarchar(40)) like ''' + @p_search_money + ''' and s.Status > 0) or
						s.[Contract] like ''' + @p_search_string + '''
					)				
				)
			)'

		set @p_filter_request = @p_filter_request + @p_search_request 	

		if (@p_Type != 'All')
			set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;
		if (@p_SenderID != 'All') 
			set @p_search_SenderID = ' and s.[SenderID] in (' + @p_SenderID + ') ' ;
		if (@p_ReceiverID != 'All') 
			set @p_search_ReceiverID = ' and s.[ReceiverID] in (' + @p_ReceiverID + ') ' ;
		
		set @p_filter_request = @p_filter_request + @p_search_type + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID + @p_search_ReceiverID

		declare @end_request nvarchar(max) = ''	

		if(@p_SortColumn='QuantitySumm')
			set  @p_SortColumn='(SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='WeightSumm')
			set @p_SortColumn='(SELECT SUM([Weight]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='SummaSumm')
			set @p_SortColumn='(SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='SummaSummOUTVAT')
			set @p_SortColumn='(SELECT SUM([TagPriceWithOutVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='CreatedByUserID')
			set  @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else if(@p_SortColumn='LdisplayUserName')
			set  @p_SortColumn='(Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName)) '
		else
			set @p_SortColumn='s.'+@p_SortColumn

		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[ReffID]
							  ,s.[ReffDate]
							  ,s.[SenderID]
							  ,s.[ReceiverID]
							  ,s.[Type]
							  ,s.[Contract]
							  ,s.[Status]
							  ,s.[DocumentID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(s.SenderID,case when ls.Description is null then '''' else '' - '' end,ls.Description) as SenderDescription
							  ,Concat(s.ReceiverID,case when lr.Description is null then '''' else '' - '' end,lr.Description) as ReceiverDescription
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM([Weight]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT SUM([TagPriceWithVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
							  ,(SELECT SUM([TagPriceWithOutVAT]) from [dbo].[DocumentDetails] WHERE DocumentID=s.[ID]) as SummaSummOUTVAT
						FROM [dbo].[Document] s
								left join dbo.Location ls on ls.[ID]=s.[SenderID]
								left join dbo.Location lr on lr.[ID]=s.[ReceiverID]
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
								+ @p_filter_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)	+'order by st.RowNumber asc'				
		--select @end_request
		EXECUTE (@end_request);	
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-19 14:41
-- Description:	Получение записей из таблицы dbo.KT
-- =============================================
-- xp_GetKT 'Item', 1
-- xp_GetKT 'Grid', '', -1, '' ,0, 1
-- xp_GetKT 'Name', '', 0, 'Золото - 585'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetKT]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Name
	@p_search nvarchar(40)='',
	@p_MetalID int=0,
	@p_DisplayName nvarchar(255),
	@p_ID int=0,
	@p_PriceType int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT k.[ID]
			  ,k.[MetalID]
			  ,k.[Description]
			  ,m.[Description] as MetalDescription
			  ,mp.PriceValue as SinglePrice
			  ,Concat(m.[Description],case when k.[Description] is null then '' else ' - ' end,k.[Description]) as DisplayName			  
		  FROM [dbo].[KT] k
		  inner join dbo.Metal m on m.[ID]=k.[MetalID]
		  left join dbo.MetalPrices mp on mp.KTID=k.[ID]
		where k.ID=@p_ID and mp.PriceType=@p_PriceType
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		set @p_search='%' + @p_search + '%'
		if @p_MetalID < 0 begin
			SELECT k.[ID]
				  ,k.[MetalID]
				  ,k.[Description]
				  ,m.[Description] as MetalDescription
			  FROM [dbo].[KT] k
			  inner join dbo.Metal m on m.[ID]=k.[MetalID]
			  WHERE
			   m.[Description] like @p_search or
			   k.[Description] like @p_search or
			   k.ID like @p_search
			order by [MetalID]
		end
		else begin
			SELECT k.[ID]
				  ,k.[MetalID]
				  ,k.[Description]
				  ,m.[Description] as MetalDescription
				  ,mp.PriceValue as SinglePrice
				  ,Concat(m.[Description],case when k.[Description] is null then '' else ' - ' end,k.[Description]) as DisplayName				  
			  FROM [dbo].[KT] k
			  inner join dbo.Metal m on m.[ID]=k.[MetalID]
			  left join dbo.MetalPrices mp on mp.KTID=k.[ID]
			  WHERE 
			  (k.[MetalID]=@p_MetalID and mp.PriceType=@p_PriceType) AND
			  (k.[ID] like @p_search or
			   m.[Description] like @p_search or
			   k.[Description] like @p_search)
			order by [ID]
		end
	end

	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
		
		--DECLARE @p_DisplayName nvarchar(255)
		--set @p_DisplayName = 'Золото - 555'
		DECLARE @position_space INT
		DECLARE @name_product NVARCHAR(255)
		DECLARE @kt_product NVARCHAR(255)
		SELECT @position_space  = CHARINDEX('-', @p_DisplayName)  
		SELECT @name_product = LTRIM(RTRIM((SUBSTRING(@p_DisplayName, 0, @position_space-1))))
		SELECT @kt_product = LTRIM(RTRIM(SUBSTRING(@p_DisplayName, @position_space+1, LEN(@p_DisplayName))))

		SELECT k.[ID]
			,k.[MetalID]
			,k.[Description]
			,m.[Description] as MetalDescription
			,mp.PriceValue as SinglePrice
			,Concat(m.[Description],case when k.[Description] is null then '' else ' - ' end,k.[Description]) as DisplayName			
		FROM [dbo].[KT] k
			  inner join dbo.Metal m on m.[ID]=k.[MetalID]
			  left join dbo.MetalPrices mp on mp.KTID=k.[ID]
		WHERE k.[Description]=@kt_product and m.Description=@name_product and mp.PriceType=@p_PriceType
			
	end

END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetLocation 'Item', '', 1
-- xp_GetLocation 'Name'
-- xp_GetLocation 'Grid', '', 0, ''
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetLocation]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Name
	@p_search nvarchar(40)='',
	@p_ID int=0,
	@p_DisplayName nvarchar(255)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT l.[ID]
			  ,l.[Description]
			  ,l.[CreatedDate]
			  ,l.[LastModifiedDate]
			  ,l.[CreatedByUserID]
			  ,l.[LastModifiedByUserID]
			  ,l.[CompanyID]
		  FROM [dbo].[Location] l
		where l.ID=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
			set @p_search='%' + @p_search + '%'
			SELECT l.[ID]
				  ,l.[Description]
				  ,l.[CreatedDate]
				  ,l.[LastModifiedDate]
				  ,l.[CreatedByUserID]
				  ,l.[LastModifiedByUserID]
				  ,l.[CompanyID]
			  FROM [dbo].[Location] l
			  WHERE 
			  convert(nvarchar(40), ID) like @p_search or
			  Description like @p_search
			  end

	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
		DECLARE @position_space INT
		DECLARE @id NVARCHAR(255)
		DECLARE @description NVARCHAR(255)
		SELECT @position_space  = CHARINDEX('-', @p_DisplayName)  
		SELECT @id = LTRIM(RTRIM((SUBSTRING(@p_DisplayName, 0, @position_space-1))))
		SELECT @description = LTRIM(RTRIM(SUBSTRING(@p_DisplayName, @position_space+1, LEN(@p_DisplayName))))

		SELECT l.[ID]					
		FROM [dbo].[Location] l			  
		WHERE l.Description=@description and l.ID=@id
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.Metal
-- =============================================
-- xp_GetMetal 'Item', '', 0
-- xp_GetMetal 'Grid', ''
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetMetal]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',
	@p_ID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		set @p_search='%' + @p_search + '%'
		SELECT [ID]
			  ,[Description]
		  FROM [dbo].[Metal]
		where ID=@p_ID 
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		set @p_search='%' + @p_search + '%'
		SELECT [ID]
			  ,[Description]
		  FROM [dbo].[Metal]
		  WHERE 	  
			  [ID] like @p_search or
			  [Description] like @p_search
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetMetalPrices 'Item', 3
-- xp_GetMetalPrices 'Grid', 0
-- xp_GetMetalPrices 'Name', 0, 1, 9
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetMetalPrices]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_ID int=0,
	@p_PriceType int=0,
	@p_KTID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT u.[ID]
			  ,u.[KTID]
			  ,u.[PriceType]
			  ,u.[PriceValue]
			  ,u.[Source]
			  ,Concat(me.[Description],case when kt.[Description] is null then '' else ' - ' end,kt.[Description]) as KTDescription
			  ,me.[Description] as MetalDescription
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[MetalPrices] u
		  inner join dbo.KT kt on kt.ID=u.KTID
		  inner join dbo.Metal me on me.ID=kt.[MetalID]
		where u.ID=@p_ID  
		and (@p_PriceType=0 or u.PriceType=@p_PriceType)
		
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		SELECT u.[ID]
			  ,u.[KTID]
			  ,u.[PriceType]
			  ,u.[PriceValue]
			  ,u.[Source]
			  ,Concat(me.[Description],case when kt.[Description] is null then '' else ' - ' end,kt.[Description]) as KTDescription
			  ,me.[Description] as MetalDescription
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[MetalPrices] u
		  inner join dbo.KT kt on kt.ID=u.KTID
		  inner join dbo.Metal me on me.ID=kt.[MetalID]
		where
		@p_PriceType=0 or u.PriceType=@p_PriceType
		order by u.[PriceType], u.[KTID]
	end
	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
		SELECT u.[ID]
			  ,u.[KTID]
			  ,u.[PriceType]
			  ,u.[PriceValue]
			  ,u.[Source]
			  ,Concat(me.[Description],case when kt.[Description] is null then '' else ' - ' end,kt.[Description]) as KTDescription
			  ,me.[Description] as MetalDescription
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[MetalPrices] u
		  inner join dbo.KT kt on kt.ID=u.KTID
		  inner join dbo.Metal me on me.ID=kt.[MetalID]
		where
		(@p_PriceType=0 or u.PriceType=@p_PriceType) and (@p_KTID=0 or u.[KTID]=@p_KTID)
		order by u.[PriceType], u.[KTID]
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

--exec xp_GetNotification 66,0

CREATE procedure [dbo].[xp_GetNotification]
	@p_UserID int=0,
	@p_PosID nvarchar(MAX)=''
as 
begin
	declare @p_RevaluationDocumentID int,
			@p_DocumentID int,
			@p_TransferDocumentID int,
			@p_RevaluationDocumentDate datetime, 
			@p_DocumentDate datetime,
			@p_TransferDocumentDate datetime,
			@p_NotificationRevaluationDocument bit,
			@p_NotificationDocument bit,
			@p_NotificationTransferDocument bit,
			@p_NotificationWorkPinPad bit
	--RevaluationDocument переоценка
	set @p_RevaluationDocumentID =(select max(ID) from UserActiveHistory
									where [Path] = 'Меню >> Операции >> Переоценка'
									and CreatedByUserID = case when ISNULL(@p_UserID, 0)=0 then CreatedByUserID else @p_UserID end)
	
	set @p_RevaluationDocumentDate = (select CreatedDate from UserActiveHistory
									where ID = @p_RevaluationDocumentID)

	if 
	(select COUNT(ID) from RevaluationDocument	where [Status] = 0)>0	and	((select COUNT(ID) from RevaluationDocument	where CONVERT(nvarchar,[CreatedDate], 102)>@p_RevaluationDocumentDate)>0 or isnull(@p_RevaluationDocumentDate,'')='')
	begin
		set @p_NotificationRevaluationDocument = 1
	end else
	begin
		set @p_NotificationRevaluationDocument = 0
	end

	
	--Список поставок
	CREATE TABLE #UserActiveHistoryRev
							(ID INT ,
							Path NVARCHAR(MAX),
							CreatedDate Date,
							UserID int)
	Insert into #UserActiveHistoryRev
	select top 1 ID,Path, CreatedDate, CreatedByUserID  from UserActiveHistory where [Path] in( 'Меню >> Поставки >> Список поставок' , 'Список поставок >> ОБНОВИТЬ' , 'Список поставок >> ОБНОВИТЬ ИЗ ФАЙЛА' , 'Список поставок >> В НАЧАЛО', 'Список поставок >> ПОДТВЕРДИТЬ') 
																							and CreatedByUserID=@p_UserID 
																							order by CreatedDate DESC 	
	set @p_DocumentDate=(Select CreatedDate From #UserActiveHistoryRev)

	if 
	(select COUNT(ID) from Document	where [Status] = 0)>0 and	((select COUNT(ID) from Document where CONVERT(nvarchar,[CreatedDate], 102)>@p_DocumentDate)>0	or isnull(@p_DocumentDate,'')='')
	begin
		set @p_NotificationDocument = 1
	end else
	begin
		set @p_NotificationDocument = 0
	end
	--set @p_DocumentDate = (select CreatedDate from UserActiveHistory
	--								where ID = @p_DocumentID)
	--set @p_DocumentID =(select max(ID) from UserActiveHistory
	--								where [Path] = 'Меню >> Поставки >> Список поставок'
	--								and CreatedByUserID = case when ISNULL(@p_UserID, 0)=0 then CreatedByUserID else @p_UserID end)	
	
	--Список перемещений
	CREATE TABLE #UserActiveHistoryTransf
							(ID INT ,
							Path NVARCHAR(MAX),
							CreatedDate Date,
							UserID int)

	--set @p_TransferDocumentID =(select max(ID) from UserActiveHistory
--									where [Path] in(  'Новое перемещение >> СОХРАНИТЬ И ВЫЙТИ' , 'Новое перемещение >> ПОДТВЕРДИТЬ' , 'Список перемещений >> НОВОЕ ПЕРЕМЕЩЕНИЕ')
--									and CreatedByUserID = case when ISNULL(@p_UserID, 0)=0 then CreatedByUserID else @p_UserID end)


	Insert into #UserActiveHistoryTransf
	select top 1 ID,Path, CreatedDate, CreatedByUserID  from UserActiveHistory where [Path] in( 'Меню >> Перемещения >> Список перемещений' , 'Новое перемещение >> СОХРАНИТЬ И ВЫЙТИ' , 'Новое перемещение >> ПОДТВЕРДИТЬ' , 'Список перемещений >> НОВОЕ ПЕРЕМЕЩЕНИЕ') 
																							and CreatedByUserID=@p_UserID 
																							order by CreatedDate DESC 

	set @p_TransferDocumentDate = (select CreatedDate from #UserActiveHistoryTransf)
	
	if(select COUNT(ID) from TransferDocument where [Status]  in (2,3))>0	and	((select COUNT(ID) from TransferDocument where CONVERT(nvarchar,[CreatedDate], 102)>@p_TransferDocumentDate)>0	or isnull(@p_TransferDocumentDate,'')='')
	begin
		set @p_NotificationTransferDocument = 1
	end else
	begin
		set @p_NotificationTransferDocument = 0
	end	
	
	
	--Список банковских терминалов	
	declare @DateFrom_string_Now nvarchar(40) = convert(nvarchar, getdate(), 102) -- получил нужную дату сегодня
	if (select TOP 1 Status from WorkPinPad where  CONVERT(nvarchar,[CreatedDate], 102)=@DateFrom_string_Now and PosID=@p_PosID order by CreatedDate DESC)>0
	begin
		set @p_NotificationWorkPinPad= 0 --мигаем НЕ надо 
	END ELSE BEGIN			
		set @p_NotificationWorkPinPad= 1 --мигаем надо сделать сверку
	END 

	--Вывод
	select @p_NotificationRevaluationDocument as NotificationRevaluationDocument, 
			@p_NotificationDocument as NotificationDocument, 
			@p_NotificationTransferDocument as NotificationTransferDocument,
			@p_NotificationWorkPinPad AS NotificationWorkPinPad


	

end






 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetPaymentsDetails 'Item', 1
-- xp_GetPaymentsDetails 'Grid', '', 0, 0, 0, 0, 0, 0, 0, 0, '10-23-1777 15:13:39', '10-23-2022 15:13:39'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPaymentsDetails]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',
	@p_ID int=0,
	@p_UserID int=0,
	@p_WorkShiftID int=0,
	@p_OperationType tinyint=0,
	@p_PaymentType tinyint=0,
	@p_ExtRefOperationTypeID int=0,
	@p_ExtRefPaymentTypeID int=0,
	@p_PosID int=0,
	@p_DateFrom datetime,
	@p_DateTo datetime

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	set @p_TypeScreen = LOWER(@p_TypeScreen)
	if @p_TypeScreen='item' begin
		SELECT pd.[ID]
			  ,pd.[WorkShiftID]
			  ,pd.[OperationType]
			  ,pd.[ExtRefOperationTypeID]
			  ,pd.[PaymentType]
			  ,pd.[ExtRefPaymentTypeID]
			  ,pd.[Amount]
			  ,pd.[CreatedByUserID]
			  ,pd.[CreatedDate]
			  ,ws.WorkShiftID as WorkShiftNumber
			  ,at.[ID] as PosID
			  ,at.[Value] as DisplayPosName
			  ,Concat(u.FirstName,' ',u.SecondName,' ',u.LastName) as DisplayUserName
		  FROM [dbo].[PaymentsDetails] pd
		  left join dbo.Users u on u.[ID]=pd.[CreatedByUserID]
		  inner join WorkShift ws on ws.ID = pd.[WorkShiftID]
		  left join Attributes at on at.ID = ws.[PosID]
		  where pd.[ID]=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

		if @p_Search != '' begin
			set @p_Search='%' + @p_Search + '%'
		end

		SELECT pd.[ID]
			  ,pd.[WorkShiftID]
			  ,pd.[OperationType]
			  ,pd.[ExtRefOperationTypeID]
			  ,pd.[PaymentType]
			  ,pd.[ExtRefPaymentTypeID]
			  ,pd.[Amount]
			  ,pd.[CreatedByUserID]
			  ,pd.[CreatedDate]
			  ,ws.WorkShiftID as WorkShiftNumber
			  ,at.[ID] as PosID
			  ,at.[Value] as DisplayPosName
			  ,Concat(u.FirstName,' ',u.SecondName,' ',u.LastName) as DisplayUserName
			  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortUserName
		  FROM [dbo].[PaymentsDetails] pd
			  left join dbo.Users u on u.[ID]=pd.[CreatedByUserID]
			  inner join WorkShift ws on ws.ID = pd.[WorkShiftID]
			  left join Attributes at on at.ID = ws.[PosID]
		  where
				(@p_PosID=0 or at.ID=@p_PosID) and
				(@p_WorkShiftID=0 or pd.[WorkShiftID]=@p_WorkShiftID) and
				(@p_OperationType=0 or pd.[OperationType]=@p_OperationType) and
				(@p_PaymentType=0 or pd.[PaymentType]=@p_PaymentType) and
				(@p_UserID=0 or pd.[CreatedByUserID]=@p_UserID) and
				(CONVERT(date, pd.CreatedDate) between @p_DateFrom and @p_DateTo) and
				( @p_Search='' or convert(varchar(10), pd.ExtRefOperationTypeID) like @p_search or
				  @p_Search='' or convert(varchar(10), ws.WorkShiftID) like @p_search or
				  @p_Search='' or convert(varchar(10), pd.ExtRefPaymentTypeID) like @p_search or
				  @p_Search='' or convert(varchar(10), pd.Amount) like @p_search 
				)
		 ORDER By PosID asc,WorkShiftNumber asc, pd.ID desc
	end
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, сборка фильтров
-- =============================================
-- xp_GetPaymentsDetailsFilters 279, '2467'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPaymentsDetailsFilters]
	@p_WorkShiftID int=0,
	@p_PosID nvarchar(MAX)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_TempPosID nvarchar(MAX)='',
		@p_PaymentType nvarchar(MAX)='',
		@p_OperationType nvarchar(MAX)='',
		@p_UserID nvarchar(MAX)='',
		@p_Amount_Min money = 0,
		@p_Amount_Max money = 0		


if (@p_WorkShiftID=0) begin
	--Users
-------------------------------------------------------------------
	SELECT
		@p_UserID = CONCAT(@p_UserID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[CreatedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[PaymentsDetails] ua
					left join dbo.Users u on u.[ID]=ua.[CreatedByUserID]
		) as Temp
	IF LEN(@p_UserID) > 2 SET @p_UserID = SUBSTRING(@p_UserID,1, LEN(@p_UserID)-1) ELSE SET @p_UserID = NULL

	--PaymentType
-------------------------------------------------------------------
	SELECT
		@p_PaymentType = CONCAT(@p_PaymentType,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Source])),'|')
		FROM (
				SELECT DISTINCT
					p.[PaymentType] as [Source]
				FROM [dbo].[PaymentsDetails] p
		) as Temp
	IF LEN(@p_PaymentType) > 2 SET @p_PaymentType = SUBSTRING(@p_PaymentType,1, LEN(@p_PaymentType)-1) ELSE SET @p_PaymentType = NULL

	--OperationType
-------------------------------------------------------------------
	SELECT
		@p_OperationType = CONCAT(@p_OperationType,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Source])),'|')
		FROM (
				SELECT DISTINCT
					p.[OperationType] as [Source]
				FROM [dbo].[PaymentsDetails] p
		) as Temp
	IF LEN(@p_OperationType) > 2 SET @p_OperationType = SUBSTRING(@p_OperationType,1, LEN(@p_OperationType)-1) ELSE SET @p_OperationType = NULL

	--PosID
-------------------------------------------------------------------
	SELECT
		@p_TempPosID = CONCAT(@p_TempPosID,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ws.[PosID] as [Source],
					at.[Value] as [Value]
				FROM [dbo].[PaymentsDetails] p
					left join WorkShift ws on ws.ID = p.[WorkShiftID]
					left join Attributes at on at.ID = ws.[PosID]
		) as Temp
	IF LEN(@p_TempPosID) > 2 SET @p_TempPosID = SUBSTRING(@p_TempPosID,1, LEN(@p_TempPosID)-1) ELSE SET @p_TempPosID = NULL

	--Amount
-------------------------------------------------------------------
	SELECT @p_Amount_Min=(SELECT IsNull(MIN(Amount),0) from [dbo].[PaymentsDetails] ),
		   @p_Amount_Max=(SELECT IsNull( MAX(Amount),0) from [dbo].[PaymentsDetails] )

	
end else
		begin
				--Users
		-------------------------------------------------------------------
			SELECT
				@p_UserID = CONCAT(@p_UserID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							ua.[CreatedByUserID] as [Id]
							,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
						FROM [dbo].[PaymentsDetails] ua
							left join dbo.Users u on u.[ID]=ua.[CreatedByUserID]
							where ua.[PosID]=@p_PosID and ua.[WorkShiftID]=@p_WorkShiftID
				) as Temp
			IF LEN(@p_UserID) > 2 SET @p_UserID = SUBSTRING(@p_UserID,1, LEN(@p_UserID)-1) ELSE SET @p_UserID = NULL

			--PaymentType
		-------------------------------------------------------------------
			SELECT
				@p_PaymentType = CONCAT(@p_PaymentType,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Source])),'|')
				FROM (
						SELECT DISTINCT
							p.[PaymentType] as [Source]
						FROM [dbo].[PaymentsDetails] p
						where p.[PosID]=@p_PosID and p.[WorkShiftID]=@p_WorkShiftID
				) as Temp
			IF LEN(@p_PaymentType) > 2 SET @p_PaymentType = SUBSTRING(@p_PaymentType,1, LEN(@p_PaymentType)-1) ELSE SET @p_PaymentType = NULL

			--OperationType
		-------------------------------------------------------------------
			SELECT
				@p_OperationType = CONCAT(@p_OperationType,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Source])),'|')
				FROM (
						SELECT DISTINCT
							p.[OperationType] as [Source]
						FROM [dbo].[PaymentsDetails] p
						where p.[PosID]=@p_PosID and p.[WorkShiftID]=@p_WorkShiftID
				) as Temp
			IF LEN(@p_OperationType) > 2 SET @p_OperationType = SUBSTRING(@p_OperationType,1, LEN(@p_OperationType)-1) ELSE SET @p_OperationType = NULL

			--PosID
		-------------------------------------------------------------------
			SELECT
				@p_TempPosID = CONCAT(@p_TempPosID,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							ws.[PosID] as [Source],
							at.[Value] as [Value]
						FROM [dbo].[PaymentsDetails] p
							left join WorkShift ws on ws.ID = p.[WorkShiftID]
							left join Attributes at on at.ID = ws.[PosID]
						where p.[PosID]=@p_PosID and p.[WorkShiftID]=@p_WorkShiftID
				) as Temp
			IF LEN(@p_TempPosID) > 2 SET @p_TempPosID = SUBSTRING(@p_TempPosID,1, LEN(@p_TempPosID)-1) ELSE SET @p_TempPosID = NULL

			--Amount
		-------------------------------------------------------------------
			SELECT @p_Amount_Min=(SELECT IsNull(MIN(Amount),0) from [dbo].[PaymentsDetails] where [PosID]=@p_PosID and [WorkShiftID]=@p_WorkShiftID),
				   @p_Amount_Max=(SELECT IsNull( MAX(Amount),0) from [dbo].[PaymentsDetails] where [PosID]=@p_PosID and [WorkShiftID]=@p_WorkShiftID)


		end
	
	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_TempPosID as [PosID],
			@p_PaymentType as [PaymentType],
			@p_OperationType as [OperationType],
			@p_UserID as [UserID],
		 	@p_Amount_Min as AmountMin,
			@p_Amount_Max as AmountMax
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, подсчет сумм
-- =============================================
-- xp_GetPaymentsDetailsSummary '', 215, '1998', 'All', 'All', 'All', 0, 0, '01-17-2020 0:00:00', '05-05-2022 13:39:15', -99999999, 99999999
-- xp_GetPaymentsDetailsSummary '', 270, 'All', 'All', 'All', 'All', 0, 0, '01-01-1753 0:00:10', '08-02-2021 13:39:15', -99999999, 99999999
--01.01.1753 0:00:10 08.02.2021
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPaymentsDetailsSummary]
	@p_search nvarchar(40)='',
	
	@p_WorkShiftID int=0,
	@p_PosID nvarchar(MAX)='',

	@p_PaymentType nvarchar(MAX)='',
	@p_OperationType nvarchar(MAX)='',
	@p_UserID nvarchar(MAX)='',

	@p_ExtRefOperationTypeID int=0,
	@p_ExtRefPaymentTypeID int=0,

	@p_DateFrom datetime,
	@p_DateTo datetime,

	@p_Amount_Min money = 0,
	@p_Amount_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	--SET STATISTICS TIME ON;

		declare @p_search_money nvarchar(40)
		declare @p_search_string nvarchar(40)
		declare @p_order nvarchar(40)='ASC';
		declare @delimeter nvarchar(10)= '''|''';
		declare @filter_all nvarchar(10)= '''All''';
		declare @p_MaxValue int = 0;
		declare @p_MinValue int = 0;

		declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
		declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

		declare @p_search_posid nvarchar(MAX) = ''
		declare @p_search_paymenttype nvarchar(MAX) = ''
		declare @p_search_operationtype nvarchar(MAX) = ''	
		declare @p_search_userid nvarchar(MAX) = ''
		declare @p_search_time nvarchar(MAX) = ''

		declare @p_filter_request nvarchar(MAX) = ''

		if (@p_PosID = '' or @p_PaymentType = '' or @p_OperationType = '' or @p_UserID = '') 
			return

		set @p_PosID = REPLACE(@p_PosID, '|', ',')
		set @p_PaymentType = REPLACE(@p_PaymentType, '|', ',')
		set @p_OperationType = REPLACE(@p_OperationType, '|', ',')
		set @p_UserID = REPLACE(@p_UserID, '|', ',')

		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		declare @p_filter_request_Amount nvarchar(MAX) = ''	
		set @p_filter_request_Amount = ' 		
					(
						(
							( s.[Amount]  >= ' + convert(nvarchar(40),@p_Amount_Min,126 ) + ') and
							( s.[Amount] <= ' + convert(nvarchar(40),@p_Amount_Max,126 ) + ')
						) 					
					)'	

		if (@DateFrom_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_search_time =  		
				' and (
					CONVERT(date, s.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
				)'			
			end

		set @p_filter_request = @p_filter_request_Amount + @p_search_time

		declare @p_search_request nvarchar(MAX) = ''

		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.[WorkShiftID] as nvarchar(40)) like ''' + @p_search_string + '''
					) 
					or
					(
						cast((SELECT CASE
								WHEN s.[OperationType] = 4 THEN sd1.[DocumentNumber]
								WHEN s.[OperationType] = 3 THEN sd2.[DocumentNumber]
								WHEN s.[OperationType] = 5 THEN sd3.[DocumentNumber]
						END) as nvarchar(40)) like ''' + @p_search_string + '''
					)
				)
			)'

		set @p_filter_request = @p_filter_request + @p_search_request	

		if (@p_PosID != 'All')
			set @p_search_posid = ' and s.[PosID] in (' + @p_PosID + ') ' ;
		if (@p_PaymentType != 'All')
			set @p_search_paymenttype = ' and s.[PaymentType] in (' + @p_PaymentType + ') ' ;
		if (@p_OperationType != 'All')
			set @p_search_operationtype = ' and s.[OperationType] in (' + @p_OperationType + ') ' ;
		if (@p_UserID != 'All')
			set @p_search_userid = ' and s.[CreatedByUserID] in (' + @p_UserID + ') ' ;

		declare @end_request nvarchar(max) = ''	

		set @p_filter_request = @p_filter_request + @p_search_posid + @p_search_paymenttype + @p_search_operationtype + @p_search_userid

		if (@p_WorkShiftID != 0) begin
			set @p_filter_request = @p_filter_request + ' and s.[WorkShiftID] =' + CAST(@p_WorkShiftID AS nvarchar)
		end
		
		declare @end_requestDeclare nvarchar(MAX)

		set @end_requestDeclare='
				Declare
					@p_DocumentCount int = 0,
					--Приход
					@p_ComingSummaryCash money = 0,
					@p_ComingSummaryNonCash money = 0,
					@p_ComingSummaryCertificate money = 0,
					@p_ComingSummaryPrepayment money = 0,
					@p_ComingSummaryGold money = 0,
					@p_ComingSummaryCredit money = 0,
					@p_ComingSummaryTotal money = 0,
					--Расход					
					@p_ExpenditureSummaryCash money = 0,
					@p_ExpenditureSummaryNonCash money = 0,
					@p_ExpenditureSummaryCertificate money = 0,
					@p_ExpenditureSummaryPrepayment money = 0,
					@p_ExpenditureSummaryGold money = 0,
					@p_ExpenditureSummaryCredit money = 0,
					@p_ExpenditureSummaryTotal money = 0,	
					--Покупка					
					@p_BuySummaryCash money = 0,
					@p_BuySummaryNonCash money = 0,
					@p_BuySummaryCertificate money = 0,
					@p_BuySummaryPrepayment money = 0,
					@p_BuySummaryGold money = 0,
					@p_BuySummaryCredit money = 0,
					@p_BuySummaryTotal money = 0,						
					--Возврат					
					@p_ReturnSummaryCash money = 0,
					@p_ReturnSummaryNonCash money = 0,
					@p_ReturnSummaryCertificate money = 0,
					@p_ReturnSummaryPrepayment money = 0,
					@p_ReturnSummaryGold money = 0,
					@p_ReturnSummaryCredit money = 0,
					@p_ReturnSummaryTotal money = 0,	
					
					--Выручка				
					@p_ProceedsSummaryCash money = 0,
					@p_ProceedsSummaryNonCash money = 0,
					@p_ProceedsSummaryCertificate money = 0,
					@p_ProceedsSummaryPrepayment money = 0,
					@p_ProceedsSummaryGold money = 0,
					@p_ProceedsSummaryCredit money = 0,
					@p_ProceedsSummaryTotal money = 0,	
					--Работа с кассой				
					@p_SummarychangeFund money = 0,
					@p_SummaryEncashment money = 0,	
					--ИТОГО ИТОГО								
					@p_SummaryTotal money = 0

					CREATE TABLE #WorkshiftTableNow(
						[DateTimeOperation] datetime, 
						[WorkshiftID] int,
						[PaymentType] int,
						[OperationType] int,
						[Amount] money
					)

				SELECT
					@p_DocumentCount = IsNull(COUNT(distinct s.[ID]),0)
				FROM [dbo].[PaymentsDetails] s
					left join dbo.SaleDocument sd1 on sd1.ID = s.[ExtRefOperationTypeID] and sd1.Type=9
					left join dbo.SaleDocument sd2 on sd2.ID = s.[ExtRefOperationTypeID] and sd2.Type=3
					left join dbo.SaleDocument sd3 on sd3.ID = s.[ExtRefOperationTypeID] and sd3.Type=6				
					left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
					left join WorkShift ws on ws.[ID] = s.[WorkShiftID]
					left join Attributes at on at.[ID] = s.[PosID] where '
						+ @p_filter_request
			+'
				INSERT INTO #WorkshiftTableNow(	
					[DateTimeOperation],				
					[WorkshiftID],
					[PaymentType],
					[OperationType],
					[Amount]
					)
				SELECT	
					s.[CreatedDate],				
					s.[WorkShiftID],
					s.[PaymentType],
					s.[OperationType],
					s.[Amount]
				FROM [dbo].[PaymentsDetails] s
					left join dbo.SaleDocument sd1 on sd1.ID = s.[ExtRefOperationTypeID] and sd1.Type=9
					left join dbo.SaleDocument sd2 on sd2.ID = s.[ExtRefOperationTypeID] and sd2.Type=3
					left join dbo.SaleDocument sd3 on sd3.ID = s.[ExtRefOperationTypeID] and sd3.Type=6
					left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
					left join WorkShift ws on ws.[ID] = s.[WorkShiftID]
					left join Attributes at on at.[ID] = s.[PosID] where'	
					+ @p_filter_request

		set @end_request = '		
				SELECT @p_ComingSummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 0 and OperationType = 4				
				SELECT @p_ComingSummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 1 and OperationType = 4
				SELECT @p_ComingSummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 2 and OperationType = 4				
				SELECT @p_ComingSummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 3 and OperationType = 4				
				SELECT @p_ComingSummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 4 and OperationType = 4				
				SELECT @p_ComingSummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 5 and OperationType = 4
				SELECT @p_ComingSummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE OperationType = 4												
				
				SELECT @p_ExpenditureSummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 0 and OperationType in (3,5)				
				SELECT @p_ExpenditureSummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 1 and OperationType in (3,5)				
				SELECT @p_ExpenditureSummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 2 and OperationType in (3,5)				
				SELECT @p_ExpenditureSummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 3 and OperationType in (3,5)			
				SELECT @p_ExpenditureSummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 4 and OperationType in (3,5)				
				SELECT @p_ExpenditureSummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 5 and OperationType in (3,5)				
				SELECT @p_ExpenditureSummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE  OperationType in (3,5)								
				
				SELECT @p_BuySummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 0 and OperationType in (3)				
				SELECT @p_BuySummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 1 and OperationType in (3)				
				SELECT @p_BuySummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 2 and OperationType in (3)				
				SELECT @p_BuySummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 3 and OperationType in (3)			
				SELECT @p_BuySummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 4 and OperationType in (3)				
				SELECT @p_BuySummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 5 and OperationType in (3)				
				SELECT @p_BuySummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE  OperationType in (3)
				
				SELECT @p_ReturnSummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 0 and OperationType in (5)				
				SELECT @p_ReturnSummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 1 and OperationType in (5)				
				SELECT @p_ReturnSummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 2 and OperationType in (5)				
				SELECT @p_ReturnSummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 3 and OperationType in (5)			
				SELECT @p_ReturnSummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 4 and OperationType in (5)				
				SELECT @p_ReturnSummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE PaymentType = 5 and OperationType in (5)				
				SELECT @p_ReturnSummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE  OperationType in (5)			

				set @p_ProceedsSummaryCash =@p_ComingSummaryCash + @p_ExpenditureSummaryCash
				set @p_ProceedsSummaryNonCash =@p_ComingSummaryNonCash + @p_ExpenditureSummaryNonCash
				set @p_ProceedsSummaryCertificate =@p_ComingSummaryCertificate + @p_ExpenditureSummaryCertificate
				set @p_ProceedsSummaryPrepayment =@p_ComingSummaryPrepayment + @p_ExpenditureSummaryPrepayment
				set @p_ProceedsSummaryGold =@p_ComingSummaryGold + @p_ExpenditureSummaryGold
				set @p_ProceedsSummaryCredit =@p_ComingSummaryCredit + @p_ExpenditureSummaryCredit			
				set @p_ProceedsSummaryTotal =@p_ProceedsSummaryCash + @p_ProceedsSummaryNonCash + @p_ProceedsSummaryGold							
				
				--РАБОТА С КАССОЙ
				--Работа с кассой (внесение разменного фонда)
				SELECT @p_SummarychangeFund = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE OperationType = 1
				-- Работа с кассой (инкассация)
				SELECT @p_SummaryEncashment = IsNull(Sum(IsNull([Amount],0)),0)
				FROM #WorkshiftTableNow WHERE OperationType = 2								
				--ИТОГО ИТОГО
				set @p_SummaryTotal=@p_ProceedsSummaryCash + @p_SummarychangeFund + @p_SummaryEncashment

				SELECT
					@p_DocumentCount as DocumentCount,
					@p_ComingSummaryCash as ComingSummaryCash,
					@p_ComingSummaryNonCash as ComingSummaryNonCash,
					@p_ComingSummaryCertificate as ComingSummaryCertificate,
					@p_ComingSummaryPrepayment as ComingSummaryPrepayment,
					@p_ComingSummaryGold as ComingSummaryGold,	
					@p_ComingSummaryCredit as ComingSummaryCredit,	
					@p_ComingSummaryTotal as ComingSummaryTotal,
					
					@p_ExpenditureSummaryCash as ExpenditureSummaryCash,
					@p_ExpenditureSummaryNonCash as ExpenditureSummaryNonCash,
					@p_ExpenditureSummaryCertificate as ExpenditureSummaryCertificate,
					@p_ExpenditureSummaryPrepayment as ExpenditureSummaryPrepayment,
					@p_ExpenditureSummaryGold as ExpenditureSummaryGold,
					@p_ExpenditureSummaryCredit as ExpenditureSummaryCredit,
					@p_ExpenditureSummaryTotal as ExpenditureSummaryTotal,
					
					@p_BuySummaryCash as BuySummaryCash,
					@p_BuySummaryNonCash as BuySummaryNonCash,
					@p_BuySummaryCertificate as EBuySummaryCertificate,
					@p_BuySummaryPrepayment as BuySummaryPrepayment,
					@p_BuySummaryGold as BuySummaryGold,
					@p_BuySummaryCredit as BuySummaryCredit,
					@p_BuySummaryTotal as BuySummaryTotal,
					
					@p_ReturnSummaryCash as ReturnSummaryCash,
					@p_ReturnSummaryNonCash as ReturnSummaryNonCash,
					@p_ReturnSummaryCertificate as ReturnSummaryCertificate,
					@p_ReturnSummaryPrepayment as ReturnSummaryPrepayment,
					@p_ReturnSummaryGold as ReturnSummaryGold,
					@p_ReturnSummaryCredit as ReturnSummaryCredit,
					@p_ReturnSummaryTotal as ReturnSummaryTotal,
					
					@p_ProceedsSummaryCash as ProceedsSummaryCash,
					@p_ProceedsSummaryNonCash as ProceedsSummaryNonCash,
					@p_ProceedsSummaryCertificate as ProceedsSummaryCertificate,	
					@p_ProceedsSummaryPrepayment as ProceedsSummaryPrepayment,
					@p_ProceedsSummaryGold as ProceedsSummaryGold,
					@p_ProceedsSummaryCredit as ProceedsSummaryCredit,
					@p_ProceedsSummaryTotal as ProceedsSummaryTotal,
					
					@p_SummarychangeFund as CashBoxSummarychangeFund,
					@p_SummaryEncashment as CashBoxSummaryEncashment,
					@p_SummaryTotal as SummaryTotal
			'
		--print @end_request
		-- select @end_requestDeclare + @end_request
		EXECUTE (@end_requestDeclare + @end_request);	
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, результирующая грида
-- =============================================
-- xp_GetPaymentsDetailsTable 'Item', '', 138, 0, 'All', 'All', 'All', 'All', 0, 0, '01-01-1753 0:00:10', '05-05-2022 13:39:15', 0, 20, 'ID', 0
-- xp_GetPaymentsDetailsTable 'Grid', '104', 0, 160, 'All', 'All', 'All', 'All', 0, 0, '01-01-1753 0:00:10', '05-05-2022 13:39:15', 0, 1000000000, 0, 20, 'ExtRefOperationTypeIDDescription', 1
-- xp_GetPaymentsDetailsTable 'Grid', '', 0, 164, 'All', 'All', 'All', 'All', 0, 0, '01-01-1753 0:00:10', '05-05-2022 13:39:15', 0, 1000000000, 0, 20, 'ID', 1

-- xp_GetPaymentsDetailsTable 'Grid', '', 0, 9, '2467', 'All', 'All', 'All', 0, 0, '01-01-1753 0:00:10', '01-19-2022 13:39:15', 0, 1000000000, 0, 200000, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPaymentsDetailsTable]
	@p_TypeScreen varchar(40), --Item, Grid, InGrid
	@p_search nvarchar(40)='',
	@p_ID int,

	@p_WorkShiftID int=0,
	@p_PosID nvarchar(MAX)='',

	@p_PaymentType nvarchar(MAX)='',
	@p_OperationType nvarchar(MAX)='',
	@p_UserID nvarchar(MAX)='',

	@p_ExtRefOperationTypeID int=0,
	@p_ExtRefPaymentTypeID int=0,

	@p_DateFrom datetime,
	@p_DateTo datetime,

	@p_Amount_Min money = 0,
	@p_Amount_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

	declare @p_search_posid nvarchar(MAX) = ''
	declare @p_search_paymenttype nvarchar(MAX) = ''
	declare @p_search_operationtype nvarchar(MAX) = ''	
	declare @p_search_userid nvarchar(MAX) = ''
	declare @p_search_time nvarchar(MAX) = ''

	declare @p_filter_request nvarchar(MAX) = ''			

	set @p_TypeScreen = LOWER(@p_TypeScreen)	

	if @p_TypeScreen='Item' begin ---------------------------------------------------------------------
		SELECT pd.[ID]
			  ,pd.[WorkShiftID]
			  ,pd.[OperationType]
			  ,pd.[ExtRefOperationTypeID]
			  ,pd.[PaymentType]
			  ,pd.[ExtRefPaymentTypeID]
			  ,pd.[Amount]
			  ,pd.[CreatedByUserID]
			  ,pd.[CreatedDate]
			  ,pd.[IsRemotePayment]
			  ,ws.WorkShiftID as WorkShiftNumber
			  ,at.[ID] as PosID
			  ,at.[Value] as DisplayPosName
			  ,Concat(u.FirstName,' ',u.SecondName,' ',u.LastName) AS DisplayUserName
		  FROM [dbo].[PaymentsDetails] pd
			  left join dbo.Users u on u.[ID]=pd.[CreatedByUserID]
			  inner join WorkShift ws on ws.ID = pd.[WorkShiftID]
			  left join Attributes at on at.ID = ws.[PosID]
		  WHERE pd.[ID]=@p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_PosID = '' or @p_PaymentType = '' or @p_OperationType = '' or @p_UserID = '')
			return

		set @p_PosID = REPLACE(@p_PosID, '|', ',')
		set @p_PaymentType = REPLACE(@p_PaymentType, '|', ',')
		set @p_OperationType = REPLACE(@p_OperationType, '|', ',')
		set @p_UserID = REPLACE(@p_UserID, '|', ',')

		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

		declare @p_filter_request_Amount nvarchar(MAX) = ''	
		set @p_filter_request_Amount = ' 		
					(
						(
							( s.[Amount]  >= ' + convert(nvarchar(40),@p_Amount_Min,126 ) + ') and
							( s.[Amount] <= ' + convert(nvarchar(40),@p_Amount_Max,126 ) + ')
						) 					
					)'	

		if (@DateFrom_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_search_time =  		
				' and (
					CONVERT(date, s.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
				)'			
			end

		set @p_filter_request = @p_filter_request_Amount + @p_search_time

		declare @p_search_request nvarchar(MAX) = ''

		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.[WorkShiftID] as nvarchar(40)) like ''' + @p_search_string + '''
					) 
					or
					(
						cast((SELECT CASE
								WHEN s.[OperationType] = 4 THEN sd1.[DocumentNumber]
								WHEN s.[OperationType] = 3 THEN sd2.[DocumentNumber]
								WHEN s.[OperationType] = 5 THEN sd3.[DocumentNumber]
						END) as nvarchar(40)) like ''' + @p_search_string + '''
					)
				)
			)'

		set @p_filter_request = @p_filter_request + @p_search_request	

		if (@p_PosID != 'All')
			set @p_search_posid = ' and s.[PosID] in (' + @p_PosID + ') ' ;
		if (@p_PaymentType != 'All')
			set @p_search_paymenttype = ' and s.[PaymentType] in (' + @p_PaymentType + ') ' ;
		if (@p_OperationType != 'All')
			set @p_search_operationtype = ' and s.[OperationType] in (' + @p_OperationType + ') ' ;
		if (@p_UserID != 'All')
			set @p_search_userid = ' and s.[CreatedByUserID] in (' + @p_UserID + ') ' ;

		declare @end_request nvarchar(max) = ''	

		set @p_filter_request = @p_filter_request + @p_search_posid + @p_search_paymenttype + @p_search_operationtype + @p_search_userid

		if (@p_WorkShiftID != 0) begin
			set @p_filter_request = @p_filter_request + ' and s.[WorkShiftID] =' + CAST(@p_WorkShiftID AS nvarchar)
		end

		if(@p_SortColumn='DisplayPosName')
			set @p_SortColumn='at.[Value]'
		else if (@p_SortColumn='WorkShiftNumber')
			set @p_SortColumn='s.WorkShiftID'
		else if (@p_SortColumn='ExtRefOperationTypeIDDescription')
			set @p_SortColumn='(SELECT CASE
									WHEN s.[OperationType] = 4 THEN sd1.[DocumentNumber]
									WHEN s.[OperationType] = 3 THEN sd2.[DocumentNumber]
									WHEN s.[OperationType] = 5 THEN sd3.[DocumentNumber]
							    END)'
		else if (@p_SortColumn='ShortUserName')
			set @p_SortColumn='(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END)'
		else
			set @p_SortColumn='s.'+@p_SortColumn

		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[WorkShiftID]
							  ,s.[OperationType]
							  ,s.[ExtRefOperationTypeID]
							  ,s.[PaymentType]				  
							  ,s.[ExtRefPaymentTypeID]
							  ,s.[Amount]
							  ,s.[CreatedByUserID]
							  ,s.[CreatedDate]
							  ,s.[IsRemotePayment]
							  ,ws.WorkShiftID as WorkShiftNumber
							  ,at.[ID] as PosID
							  ,at.[Value] as DisplayPosName
							  ,(SELECT CASE 
									WHEN s.[OperationType] = 4 THEN sd1.[DocumentNumber]
									WHEN s.[OperationType] = 3 THEN sd2.[DocumentNumber]
									WHEN s.[OperationType] = 5 THEN sd3.[DocumentNumber]
							    END) as ExtRefOperationTypeIDDescription
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayUserName
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortUserName
						FROM [dbo].[PaymentsDetails] s
							left join dbo.SaleDocument sd1 on sd1.ID = s.[ExtRefOperationTypeID] and sd1.Type=9
							left join dbo.SaleDocument sd2 on sd2.ID = s.[ExtRefOperationTypeID] and sd2.Type=3
							left join dbo.SaleDocument sd3 on sd3.ID = s.[ExtRefOperationTypeID] and sd3.Type=6
							left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
							left join dbo.WorkShift ws on ws.[ID]=s.[WorkShiftID]							
							left join dbo.Attributes at on at.[ID] = s.[PosID] where '
								+ @p_filter_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+'order by st.RowNumber asc'					
		--print @end_request
		--select @end_request
		EXECUTE (@end_request);	
	end
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetPaymentsSummByOperationType '106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPaymentsSummByOperationType]
	@StrVal nvarchar(MAX)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--declare @p_search_StrVal nvarchar(MAX)=''
	--set @StrVal = REPLACE(@StrVal, '|', ',')
	--if (@StrVal != 'All')begin						
	--		set @p_search_StrVal = ' ws.[PosID] in (' + @StrVal + ')'
	--		end

	SELECT Sum([Amount]) as Amount, OperationType 
		  FROM [PaymentsDetails] pd
			  inner join WorkShift ws on ws.ID = pd.WorkShiftID
			  inner join dbo.tf_ParserStrTo1Varchar150(@StrVal,'|') t on t.Val1 = ws.ID 
		  --where OperationType =2
		  group by OperationType
		 
END
select * from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121)
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and OperationType = 1
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and OperationType = 2
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and OperationType = 3
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and OperationType = 4

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetPaymentsSummByPaymentType '106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPaymentsSummByPaymentType]
	@StrVal nvarchar(MAX)=''	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT Sum([Amount]) as Amount, PaymentType 
		  FROM [PaymentsDetails] pd
			  inner join WorkShift ws on ws.ID = pd.WorkShiftID
			  inner join dbo.tf_ParserStrTo1Varchar150(@StrVal,'|') t on t.Val1 = ws.ID 
		  group by PaymentType
END

select * from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121)
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and PaymentType = 1
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and PaymentType = 2
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and PaymentType = 3
select Sum(Amount) from [PaymentsDetails] where WorkShiftID in(106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121) and PaymentType = 4 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- 03.03.2021
-- exec xp_GetPosObjectsTable 'name', 2, '''MetalPrices''', 'All'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPosObjectsTable]
	@p_TypeScreen nvarchar(10),
	@p_ID int,
	@p_MassName nvarchar(max)= '',
	@p_MassSyncType nvarchar(max) = ''
AS
BEGIN
	declare @p_search_MassName nvarchar(max) =''
	declare @p_search_MassSyncType nvarchar(max) =''
	declare @Search_request nvarchar(max)
	declare @endrequest nvarchar(max)

	if @p_TypeScreen='item'
		begin
			select top 1
						p.Name,			 
						p.SyncType,	
						p.Description,	 
						r.Obj,			 
						r.DatVal,		 
						r.DtMod,		 
						r.Source,		
						r.DtRefresh,		
						r.UserID,		  
						r.InvalidAttempts,
						Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayUserName,
						(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayUserName
			from PosObjects p
			left join RefreshInfo r on p.Name = r.Obj
			left join dbo.Users u on u.[ID]= r.[UserID]
			where p.id = @p_id 
			order by Description
		end
	
	else if @p_TypeScreen in ('grid', 'ingrid')
		begin
			if (@p_MassName = '' or @p_MassSyncType = '')
				return

			set @p_MassName = REPLACE(@p_MassName, '|', ',')
			set @p_MassSyncType = REPLACE(@p_MassSyncType, '|', ',')


			if (@p_MassName != 'All')
				set @p_search_MassName = ' and p.[Name] in (' + @p_MassName + ') ';
			if (@p_MassSyncType != 'All')
				set @p_search_MassSyncType = ' and p.[SyncType] in (' + @p_MassSyncType +') ';
			
			set @search_request = @p_search_MassName + @p_search_MassSyncType
			
			set @endrequest = 'select 
			            p.Name,			  
						p.SyncType,	
						p.Description,	
						r.Obj,			
						r.DatVal,		 
						r.DtMod	,		  
						r.Source,		 
						r.DtRefresh,		  
						r.UserID,		  
						r.InvalidAttempts,
						Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayUserName,
						(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayUserName
						from [dbo].[PosObjects] p
						left join RefreshInfo r on p.Name = r.Obj
						left join dbo.Users u on u.[ID]= r.[UserID]
						where 1=1 '+ @search_request +' order by description'
			
			-- print @endrequest
			EXECUTE (@endrequest);
		end

	else if @p_TypeScreen = 'Name'
		begin
			if (@p_MassName = '')
				return

			set @endrequest = 'select top 1
			            p.Name,			  
						p.SyncType,	
						p.Description,	
						r.Obj,			
						r.DatVal,		 
						r.DtMod	,		  
						r.Source,		 
						r.DtRefresh,		  
						r.UserID,		  
						r.InvalidAttempts,
						Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayUserName,
						(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayUserName
						from [dbo].[PosObjects] p
					    join RefreshInfo r on p.Name = r.Obj
						left join dbo.Users u on u.[ID]= r.[UserID]
						where 1=1 '+ @p_search_MassName +' order by description'
			-- print @endrequest
			EXECUTE (@endrequest);
		end

		
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetPrepaymentNumber 2001020000055
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetPrepaymentNumber]
	@p_PrepaymentNumber bigint=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT
		pp.[ID]
      ,pp.[PrepaymentNumber]
      ,pp.[Amount]
      ,pp.[IsActive]
      ,pp.[Description]
      ,pp.[Source]
      ,pp.[CreatedDate]
      ,pp.[LastModifiedDate]
      ,pp.[CreatedByUserID]
      ,pp.[LastModifiedByUserID]
	FROM [dbo].[Prepayment] pp
	WHERE
		pp.[PrepaymentNumber]=@p_PrepaymentNumber
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Продукция, сборка фильтров
-- =============================================
-- xp_GetProductFilters ''
-- xp_GetProductFilters '0'
-- xp_GetProductFilters '1'
-- xp_GetProductFilters '2'
-- xp_GetProductFilters '3'
-- xp_GetProductFilters '9'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetProductFilters]
	@p_StatusDocument nvarchar(40)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	DECLARE
		@p_Type nvarchar(MAX)='',
		@p_Color nvarchar(MAX)='',
		@p_Size nvarchar(MAX)='',
		@p_Gender nvarchar(MAX)='',
		@p_ThemedCollection nvarchar(MAX)='',
		@p_Status nvarchar(MAX)='',
		@p_KtID nvarchar(MAX)='',
		@p_ShowcaseID nvarchar(MAX)='',
		@p_Stones nvarchar(MAX)='',
		@p_Currency nvarchar(MAX)='',
		@p_WeightMin money,
		@p_WeightMax money,
		@p_TagPriceWithVATMin money,
		@p_TagPriceWithVATMax money,
		@p_TagPriceWithOutVATMin money,
		@p_TagPriceWithOutVATMax money

if @p_StatusDocument!=''
	begin 
		declare @Stat int = CAST(@p_StatusDocument AS INTEGER)
		--Type
-------------------------------------------------------------------
		SELECT
			@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Type] as [Value]
					FROM [dbo].[Product] p
					WHERE p.[Type] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL

		--Color
-------------------------------------------------------------------
		SELECT
			@p_Color = CONCAT(@p_Color,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Color] as [Value]
					FROM [dbo].[Product] p
					WHERE p.[Color] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_Color) > 2 SET @p_Color = SUBSTRING(@p_Color,1, LEN(@p_Color)-1) ELSE SET @p_Color = NULL

		--Size
-------------------------------------------------------------------
		SELECT
			@p_Size = CONCAT(@p_Size,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Size] as [Value]
					FROM [dbo].[Product] p
					WHERE p.[Size] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_Size) > 2 SET @p_Size = SUBSTRING(@p_Size,1, LEN(@p_Size)-1) ELSE SET @p_Size = NULL

		--Gender
-------------------------------------------------------------------
		SELECT
			@p_Gender = CONCAT(@p_Gender,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Gender] as [Value]
					FROM [dbo].[Product] p				
					where p.[Status]=@Stat
			) as Temp
		IF LEN(@p_Gender) > 2 SET @p_Gender = SUBSTRING(@p_Gender,1, LEN(@p_Gender)-1) ELSE SET @p_Gender = NULL

		--ThemedCollection
-------------------------------------------------------------------
		SELECT
			@p_ThemedCollection = CONCAT(@p_ThemedCollection,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[ThemedCollection] as [Value]
					FROM [dbo].[Product] p
					WHERE p.[ThemedCollection] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_ThemedCollection) > 2 SET @p_ThemedCollection = SUBSTRING(@p_ThemedCollection,1, LEN(@p_ThemedCollection)-1) ELSE SET @p_ThemedCollection = NULL

		--Status
-------------------------------------------------------------------
		SELECT
			@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Status] as [Value]
					FROM [dbo].[Product] p
					WHERE p.[Status] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

		--Currency
-------------------------------------------------------------------
		SELECT
			@p_Currency = CONCAT(@p_Currency,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Description])),'|')
			FROM (
					SELECT DISTINCT
						cur.[Code] as [Value]
						,cur.[LongDescription] as [Description]
					FROM [dbo].[Product] p
					left join [dbo].[Currency] cur on cur.Code=p.TagPriceCurrency
					WHERE p.[TagPriceCurrency] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_Currency) > 2 SET @p_Currency = SUBSTRING(@p_Currency,1, LEN(@p_Currency)-1) ELSE SET @p_Currency = NULL

		--Stones
-------------------------------------------------------------------
		SELECT
			@p_Stones = CONCAT(@p_Stones,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Description])),'|')
			FROM (
					SELECT DISTINCT
						st.[Stone] as [Value]
						,st.[Stone] as [Description]
					FROM [dbo].[Product] p
					left join [dbo].[Stones] st on st.[ProductID]=p.[ID]
					WHERE st.[Stone] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
			ORDER BY Temp.[Description]
		IF LEN(@p_Stones) > 2 SET @p_Stones = SUBSTRING(@p_Stones,1, LEN(@p_Stones)-1) ELSE SET @p_Stones = NULL

		--KtID
-------------------------------------------------------------------
		SELECT
			@p_KtID = CONCAT(@p_KtID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),' - ',LTRIM(RTRIM([Description])),'|')
			FROM (
					SELECT DISTINCT
						p.[KtID] as [Id]
						,meid.[Description] as [Value]
						,ktid.[Description] as [Description]
					FROM [dbo].[Product] p
						left join dbo.[KT] ktid on ktid.ID=p.[KtID]
						left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					WHERE meid.[Description] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_KtID) > 2 SET @p_KtID = SUBSTRING(@p_KtID,1, LEN(@p_KtID)-1) ELSE SET @p_KtID = NULL

		--ShowcaseID
-------------------------------------------------------------------
		SELECT
			@p_ShowcaseID = CONCAT(@p_ShowcaseID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[ShowcaseID] as [Id]
						,shid.[Description] as [Value]
					FROM [dbo].[Product] p
						left join dbo.[Showcase] shid on shid.ID=p.[ShowcaseID]
					WHERE shid.[Name] IS NOT NULL
					AND p.[Status]=@Stat
			) as Temp
		IF LEN(@p_ShowcaseID) > 2 SET @p_ShowcaseID = SUBSTRING(@p_ShowcaseID,1, LEN(@p_ShowcaseID)-1) ELSE SET @p_ShowcaseID = NULL

		--Min Max
-------------------------------------------------------------------
		SELECT
			@p_WeightMin=MIN([Weight]),
			@p_WeightMax=MAX([Weight]),
			@p_TagPriceWithVATMin=MIN([TagPriceWithVAT]),
			@p_TagPriceWithVATMax=MAX([TagPriceWithVAT]),
			@p_TagPriceWithOutVATMin=MIN([TagPriceWithOutVAT]),
			@p_TagPriceWithOutVATMax=MAX([TagPriceWithOutVAT])
		FROM [dbo].[Product] p
		WHERE
			 p.[Status]=@Stat

	end
else
	begin
		--Type
-------------------------------------------------------------------
		SELECT
			@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Type] as [Value]
					FROM [dbo].[Product] p
			) as Temp
		IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL

		--Color
-------------------------------------------------------------------
		SELECT
			@p_Color = CONCAT(@p_Color,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Color] as [Value]
					FROM [dbo].[Product] p
			) as Temp
		IF LEN(@p_Color) > 2 SET @p_Color = SUBSTRING(@p_Color,1, LEN(@p_Color)-1) ELSE SET @p_Color = NULL

		--Size
-------------------------------------------------------------------
		SELECT
			@p_Size = CONCAT(@p_Size,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Size] as [Value]
					FROM [dbo].[Product] p
			) as Temp
		IF LEN(@p_Size) > 2 SET @p_Size = SUBSTRING(@p_Size,1, LEN(@p_Size)-1) ELSE SET @p_Size = NULL

		--Gender
-------------------------------------------------------------------
		SELECT
			@p_Gender = CONCAT(@p_Gender,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Gender] as [Value]
					FROM [dbo].[Product] p				
			) as Temp
		IF LEN(@p_Gender) > 2 SET @p_Gender = SUBSTRING(@p_Gender,1, LEN(@p_Gender)-1) ELSE SET @p_Gender = NULL

		--ThemedCollection
-------------------------------------------------------------------
		SELECT
			@p_ThemedCollection = CONCAT(@p_ThemedCollection,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[ThemedCollection] as [Value]
					FROM [dbo].[Product] p
			) as Temp
		IF LEN(@p_ThemedCollection) > 2 SET @p_ThemedCollection = SUBSTRING(@p_ThemedCollection,1, LEN(@p_ThemedCollection)-1) ELSE SET @p_ThemedCollection = NULL

		--Status
-------------------------------------------------------------------
		SELECT
			@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Status] as [Value]
					FROM [dbo].[Product] p
			) as Temp
		IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

		--Currency
-------------------------------------------------------------------
		SELECT
			@p_Currency = CONCAT(@p_Currency,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Description])),'|')
			FROM (
					SELECT DISTINCT
						cur.[Code] as [Value]
						,cur.[LongDescription] as [Description]
					FROM [dbo].[Product] p
					left join [dbo].[Currency] cur on cur.Code=p.TagPriceCurrency
			) as Temp
		IF LEN(@p_Currency) > 2 SET @p_Currency = SUBSTRING(@p_Currency,1, LEN(@p_Currency)-1) ELSE SET @p_Currency = NULL

		--Stones
-------------------------------------------------------------------
		SELECT
			@p_Stones = CONCAT(@p_Stones,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Description])),'|')
			FROM (
					SELECT DISTINCT
						st.[Stone] as [Value]
						,st.[Stone] as [Description]
					FROM [dbo].[Product] p
					left join [dbo].[Stones] st on st.[ProductID]=p.[ID]
					WHERE st.[Stone] IS NOT NULL
			) as Temp
			ORDER BY Temp.[Description]
		IF LEN(@p_Stones) > 2 SET @p_Stones = SUBSTRING(@p_Stones,1, LEN(@p_Stones)-1) ELSE SET @p_Stones = NULL

		--KtID
-------------------------------------------------------------------
		SELECT
			@p_KtID = CONCAT(@p_KtID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),' - ',LTRIM(RTRIM([Description])),'|')
			FROM (
					SELECT DISTINCT
						p.[KtID] as [Id]
						,meid.[Description] as [Value]
						,ktid.[Description] as [Description]
					FROM [dbo].[Product] p
						left join dbo.[KT] ktid on ktid.ID=p.[KtID]
						left join dbo.[Metal] meid on meid.ID=ktid.MetalID
			) as Temp
		IF LEN(@p_KtID) > 2 SET @p_KtID = SUBSTRING(@p_KtID,1, LEN(@p_KtID)-1) ELSE SET @p_KtID = NULL

		--ShowcaseID
-------------------------------------------------------------------
		SELECT
			@p_ShowcaseID = CONCAT(@p_ShowcaseID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[ShowcaseID] as [Id]
						,shid.[Description] as [Value]
					FROM [dbo].[Product] p
						left join dbo.[Showcase] shid on shid.ID=p.[ShowcaseID]
			) as Temp
		IF LEN(@p_ShowcaseID) > 2 SET @p_ShowcaseID = SUBSTRING(@p_ShowcaseID,1, LEN(@p_ShowcaseID)-1) ELSE SET @p_ShowcaseID = NULL

	--Min Max
-------------------------------------------------------------------
		SELECT
			@p_WeightMin=MIN([Weight]),
			@p_WeightMax=MAX([Weight]),
			@p_TagPriceWithVATMin=MIN([TagPriceWithVAT]),
			@p_TagPriceWithVATMax=MAX([TagPriceWithVAT]),
			@p_TagPriceWithOutVATMin=MIN([TagPriceWithOutVAT]),
			@p_TagPriceWithOutVATMax=MAX([TagPriceWithOutVAT])
		FROM [dbo].[Product] p

	end

	--Out Final Result
-------------------------------------------------------------------
	SELECT  @p_Type as Type,
			@p_Color as Color,
			@p_Size as Size,
			@p_Gender as Gender,
			@p_ThemedCollection as ThemedCollection,
			@p_Status as Status,
			@p_KtID as KtID,
			@p_ShowcaseID as ShowcaseID,
			@p_WeightMin as WeightMin,
			@p_WeightMax as WeightMax,
			@p_TagPriceWithVATMin as TagPriceWithVATMin,
			@p_TagPriceWithVATMax as TagPriceWithVATMax,
			@p_TagPriceWithOutVATMin as TagPriceWithOutVATMin,
			@p_TagPriceWithOutVATMax as TagPriceWithOutVATMax,
			@p_Currency as Currency,
			@p_Stones as Stones
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Продукция, сборка фильтров
-- =============================================
-- xp_GetProductGroupTable 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetProductGroupTable]
			@p_TypeGroup int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
		
	--Select [Color] from [dbo].[Product] group by [Color]
	--Select [ThemedCollection] from [dbo].[Product] group by [ThemedCollection]
	--Select [Gender] from [dbo].[Product] group by [Gender]
	if (@p_TypeGroup=1) begin
						Select * from [dbo].[Product] where [Status] =1 and  [Color] ='Белый'
						end
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetProductStonesFilters 'Бр.'
-- xp_GetProductStonesFilters 'Агат'
-- xp_GetProductStonesFilters 'Изумруд'
-- xp_GetProductStonesFilters 'Рубин'
-- xp_GetProductStonesFilters 'Топаз'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetProductStonesFilters]
	@p_Stone nvarchar(50) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
	SET STATISTICS TIME ON;

	declare
	@p_Shape nvarchar(MAX)='',
	@p_Color nvarchar(MAX)='',
	@p_Clarity nvarchar(MAX)='',
	@p_Size nvarchar(MAX)='',
	@p_Setting nvarchar(MAX)='',
	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,
	@p_Quantity_Min int = 0,
	@p_Quantity_Max int = 0

	--Shape
-------------------------------------------------------------------
	SELECT
		@p_Shape = CONCAT(@p_Shape,LTRIM(RTRIM([Value]))+':'+LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					s.[Shape] as [Value]
				FROM [dbo].[Stones] s
				WHERE
					s.[Shape] IS NOT NULL
					AND s.[Stone]=@p_Stone
		) as Temp
		ORDER BY Temp.[Value] ASC
	IF LEN(@p_Shape) > 2 SET @p_Shape = SUBSTRING(@p_Shape,1, LEN(@p_Shape)-1) ELSE SET @p_Shape = NULL

	--Color
-------------------------------------------------------------------
	SELECT
		@p_Color = CONCAT(@p_Color,LTRIM(RTRIM([Value]))+':'+LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					s.[Color] as [Value]
				FROM [dbo].[Stones] s
				WHERE
					s.[Color] IS NOT NULL
					AND s.[Stone]=@p_Stone
		) as Temp
		ORDER BY Temp.[Value] ASC
	IF LEN(@p_Color) > 2 SET @p_Color = SUBSTRING(@p_Color,1, LEN(@p_Color)-1) ELSE SET @p_Color = NULL

	--Clarity
-------------------------------------------------------------------
	SELECT
		@p_Clarity = CONCAT(@p_Clarity,LTRIM(RTRIM([Value]))+':'+LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					s.[Clarity] as [Value]
				FROM [dbo].[Stones] s
				WHERE
					s.[Clarity] IS NOT NULL
					AND s.[Stone]=@p_Stone
		) as Temp
		ORDER BY Temp.[Value] ASC
	IF LEN(@p_Clarity) > 2 SET @p_Clarity = SUBSTRING(@p_Clarity,1, LEN(@p_Clarity)-1) ELSE SET @p_Clarity = NULL

	--Setting
-------------------------------------------------------------------
	SELECT
		@p_Setting = CONCAT(@p_Setting,LTRIM(RTRIM([Value]))+':'+LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					s.[Setting] as [Value]
				FROM [dbo].[Stones] s
				WHERE
					s.[Setting] IS NOT NULL
					AND s.[Stone]=@p_Stone
		) as Temp
		ORDER BY Temp.[Value] ASC
	IF LEN(@p_Setting) > 2 SET @p_Setting = SUBSTRING(@p_Setting,1, LEN(@p_Setting)-1) ELSE SET @p_Setting = NULL

	--Size
-------------------------------------------------------------------
	SELECT
		@p_Size = CONCAT(@p_Size,LTRIM(RTRIM([Value]))+':'+LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					s.[Size] as [Value]
				FROM [dbo].[Stones] s
				WHERE
					s.[Size] IS NOT NULL
					AND s.[Stone]=@p_Stone
		) as Temp
		ORDER BY Temp.[Value] ASC
	IF LEN(@p_Size) > 2 SET @p_Size = SUBSTRING(@p_Size,1, LEN(@p_Size)-1) ELSE SET @p_Size = NULL

	--Weight_Min Weight_Max
-------------------------------------------------------------------
	SELECT @p_Weight_Min=MIN(SumWeight),
		   @p_Weight_Max=MAX(SumWeight)
	FROM (
				SELECT Sum([Weight]) as SumWeight FROM
				(
					SELECT [Weight], ProductID FROM [dbo].[Stones] WHERE [Stone]=@p_Stone
				) as sq
				GROUP BY sq.ProductID
		) as sqs


	--Quantity_Min Quantity_Max
-------------------------------------------------------------------
	SELECT @p_Quantity_Min=MIN(SumQuantity),
		   @p_Quantity_Max=MAX(SumQuantity)
	FROM (
				SELECT Sum(Quantity) as SumQuantity FROM
				(
					SELECT Quantity, ProductID FROM [dbo].[Stones] WHERE [Stone]=@p_Stone
				) as sq
				GROUP BY sq.ProductID
		) as sqs

	--Out Final Result
-------------------------------------------------------------------
	SELECT
		@p_Shape AS Shape,
		@p_Color AS Color,
		@p_Size AS Size,
		@p_Clarity AS Clarity,
		@p_Setting AS Setting,
		@p_Weight_Min AS WeightMin,
		@p_Weight_Max AS WeightMax,
		@p_Quantity_Min AS QuantityMin,
		@p_Quantity_Max AS QuantityMax
END


	--declare @p_Color nvarchar(MAX)

 --   CREATE TABLE #Stones(
	--		[LineDocument] int,
	--		[Stone] nvarchar(MAX),
	--		[Shape] nvarchar(MAX),
	--		[Size] nvarchar(MAX),
	--		[Color] nvarchar(MAX),
	--		[Clarity] nvarchar(MAX),
	--		[Quantity] nvarchar(MAX),
	--		[Weight] nvarchar(MAX),
	--		[Setting] nvarchar(MAX)
 --   )

	--INSERT INTO #Stones([LineDocument],[Stone])
	--SELECT
	--	ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal,
	--	s.[Stone]
	--FROM [dbo].[Stones] s GROUP BY s.[Stone]
	--ORDER BY CounterVal

	--DECLARE CUR CURSOR FAST_FORWARD READ_ONLY FOR SELECT [Stone] FROM #Stones
	--DECLARE @varId nvarchar(MAX)
	--OPEN CUR
	--FETCH NEXT FROM CUR INTO @varId
	--WHILE @@FETCH_STATUS = 0
	--BEGIN

	--	SET @p_Color=''
	--	SELECT
	--		@p_Color = CONCAT(@p_Color,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
	--		FROM (
	--				SELECT DISTINCT
	--					s.[Color] as [Value]
	--				FROM [dbo].[Stones] s
	--				WHERE
	--					s.[Color] IS NOT NULL
	--					AND s.[Stone]=@varId
	--		) as Temp
	--	IF LEN(@p_Color) > 2 SET @p_Color = SUBSTRING(@p_Color,1, LEN(@p_Color)-1) ELSE SET @p_Color = NULL

	--	UPDATE #Stones
	--		SET [Color] = @p_Color
	--	WHERE #Stones.[Stone]=@varId

	--	FETCH NEXT FROM CUR INTO @varId
	--END
	--CLOSE CUR
	--DEALLOCATE CUR

	--SELECT * FROM #Stones







--		--Shape
---------------------------------------------------------------------
--	SELECT
--		@p_Shape = CONCAT(@p_Shape,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
--		FROM (
--				SELECT DISTINCT
--					s.[Shape] as [Value]
--				FROM [dbo].[Stones] s
--				WHERE
--					s.[Shape] IS NOT NULL
--					AND s.[Stone]=@p_Stone
--		) as Temp
--	IF LEN(@p_Shape) > 2 SET @p_Shape = SUBSTRING(@p_Shape,1, LEN(@p_Shape)-1) ELSE SET @p_Shape = NULL

--	--Color
---------------------------------------------------------------------
--	SELECT
--		@p_Color = CONCAT(@p_Color,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
--		FROM (
--				SELECT DISTINCT
--					s.[Color] as [Value]
--				FROM [dbo].[Stones] s
--				WHERE
--					s.[Color] IS NOT NULL
--					AND s.[Stone]=@p_Stone
--		) as Temp
--	IF LEN(@p_Color) > 2 SET @p_Color = SUBSTRING(@p_Color,1, LEN(@p_Color)-1) ELSE SET @p_Color = NULL

--	--Clarity
---------------------------------------------------------------------
--	SELECT
--		@p_Clarity = CONCAT(@p_Clarity,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
--		FROM (
--				SELECT DISTINCT
--					s.[Clarity] as [Value]
--				FROM [dbo].[Stones] s
--				WHERE
--					s.[Clarity] IS NOT NULL
--					AND s.[Stone]=@p_Stone
--		) as Temp
--	IF LEN(@p_Clarity) > 2 SET @p_Clarity = SUBSTRING(@p_Clarity,1, LEN(@p_Clarity)-1) ELSE SET @p_Clarity = NULL

--	--Setting
---------------------------------------------------------------------
--	SELECT
--		@p_Setting = CONCAT(@p_Setting,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
--		FROM (
--				SELECT DISTINCT
--					s.[Setting] as [Value]
--				FROM [dbo].[Stones] s
--				WHERE
--					s.[Setting] IS NOT NULL
--					AND s.[Stone]=@p_Stone
--		) as Temp
--	IF LEN(@p_Setting) > 2 SET @p_Setting = SUBSTRING(@p_Setting,1, LEN(@p_Setting)-1) ELSE SET @p_Setting = NULL

--	--Size
---------------------------------------------------------------------
--	SELECT
--		@p_Size = CONCAT(@p_Size,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
--		FROM (
--				SELECT DISTINCT
--					s.[Size] as [Value]
--				FROM [dbo].[Stones] s
--				WHERE
--					s.[Size] IS NOT NULL
--					AND s.[Stone]=@p_Stone
--		) as Temp
--	IF LEN(@p_Size) > 2 SET @p_Size = SUBSTRING(@p_Size,1, LEN(@p_Size)-1) ELSE SET @p_Size = NULL 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Продукция, подсчет сумм
-- =============================================
-- xp_GetProductSummary '','''Браслет''','All','''145''|''160''','All','All','All','All','0','All','All', '01.01.2021 16:00:00', '01.14.2021 16:00:00', '','','','','','','','','',  false,0.01,5,0.01,17990000,0.01,14991666.67
-- xp_GetProductSummary '','All','12','All','All','All','All','All','All','All','All', '01.01.2021 16:00:00', '01.14.2021 16:00:00',  '','','','','','','','','',  true,0,100000000,0,100000000,0,100000000
-- xp_GetProductSummary '','All','All','All','All','All','All','All','All','All','All', '01.01.1753 00:00:10', '01.14.2022 16:00:00',  '','','','','','','','','',  true,0,1000000000000,0,100000000000,0,1000000000000
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetProductSummary]
	@p_search nvarchar(40)='',
	@p_Type nvarchar(MAX)='',
	@p_KtID nvarchar(MAX)='',
	@p_Size nvarchar(MAX)='',
	@p_Color nvarchar(MAX)='',
	@p_Gender nvarchar(MAX)='',
	@p_ThemedCollection nvarchar(MAX)='',
	@p_ShowcaseID nvarchar(MAX)='',	
	@p_Status nvarchar(MAX)='',
	@p_Currency nvarchar(MAX)='',
	@p_Stones nvarchar(MAX)='',
	@p_FromFromDatePrice datetime,
	@p_ToFromDatePrice datetime,	

	@p_StoneShape nvarchar(MAX)='',
	@p_StoneColor nvarchar(MAX)='',
	@p_StoneClarity nvarchar(MAX)='',
	@p_StoneSize nvarchar(MAX)='',
	@p_StoneSetting nvarchar(MAX)='',
	@p_StoneWeightMin nvarchar(MAX)='',
	@p_StoneWeightMax nvarchar(MAX)='',
	@p_StoneQuantityMin nvarchar(MAX)='',
	@p_StoneQuantityMax nvarchar(MAX)='',

	@p_AllStones bit = false,
	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,
	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,
	@p_TagPriceWithOutVAT_Min money = 0,
	@p_TagPriceWithOutVAT_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	if (@p_Type = '' or @p_KtID = '' or @p_Color = ''or @p_Size = ''or @p_Gender = ''or @p_ThemedCollection = ''or @p_Status = ''or @p_ShowcaseID = '' or @p_Currency ='' or @p_Stones ='')
	begin
		SELECT TOP 1
		0 as CountID
		,0 as WeightSumm
		,0 as PriceSumm
		--print '1'
	end
	
	else
	begin
		declare @p_search_money nvarchar(40)
		declare @p_search_string nvarchar(40)

		declare @delimeter nvarchar(10)= '''|''';
		declare @delimeter1 varchar(40)= '|';
		declare @delimeter2 varchar(40)= '$';
		declare @delimeter3 varchar(40)= '''$''';
		declare @filter_all nvarchar(10)= '''All''';
		declare @FromFromDatePrice_string nvarchar(40) = CONVERT(nvarchar, @p_FromFromDatePrice, 120)
		declare @ToFromDatePrice_string nvarchar(40) = CONVERT(nvarchar, @p_ToFromDatePrice, 102)
	
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_Type = REPLACE(@p_Type,'|', ',')	
		set @p_KtID = REPLACE(@p_KtID,'|', ',')			
		set @p_Size = REPLACE(@p_Size,'|', ',')	
		set @p_Color = REPLACE(@p_Color,'|', ',')	
		set @p_Gender = REPLACE(@p_Gender,'|', ',')	
		set @p_ThemedCollection = REPLACE(@p_ThemedCollection,'|', ',')	
		set @p_ShowcaseID = REPLACE(@p_ShowcaseID,'|', ',')	
		set @p_Status = REPLACE(@p_Status,'|', ',')	
		set @p_Currency = REPLACE(@p_Currency,'|', ',')	
		set @p_Stones = REPLACE(@p_Stones,'''', '')	
		declare @p_search_FromDatePrice nvarchar(MAX) = ''

		set @p_search_string='%' + @p_search + '%'	

		declare @p_search_type nvarchar(MAX) = ''
		declare @p_search_ktid nvarchar(MAX) = ''
		declare @p_search_color nvarchar(MAX) = ''
		declare @p_search_size nvarchar(MAX) = ''
		declare @p_search_gender nvarchar(MAX) = ''
		declare @p_search_themed nvarchar(MAX) = ''
		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_currency nvarchar(MAX) = ''
		declare @p_search_stones nvarchar(MAX) = ''
		declare @p_search_showcase nvarchar(MAX) = ''
		declare @p_filter_request nvarchar(MAX) = ''	
		declare @p_filter_request_Weight nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''
		declare @p_filter_request_TagPriceWithOutVAT nvarchar(MAX) = ''


		if (@FromFromDatePrice_string!='1753-01-01 00:00:10')	
		begin	
			set	@FromFromDatePrice_string = CONVERT(nvarchar, @p_FromFromDatePrice, 102)
			set @p_search_FromDatePrice =  		
					' and (
						CONVERT(date, p.[FromDatePrice]) between ''' + @FromFromDatePrice_string  + ''' and ''' + @ToFromDatePrice_string + '''
					)'		
					end		

		set @p_filter_request_Weight = '		
					(
						(
							( p.[Weight] >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
							( p.[Weight] <= ' +  convert(nvarchar(40),@p_Weight_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_TagPriceWithVAT = ' and  		
					(
						(
							( p.[TagPriceWithVAT]  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
							( p.[TagPriceWithVAT] <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
						) 					
					)'

		set @p_filter_request_TagPriceWithOutVAT = ' and  		
					(
						(
							( p.[TagPriceWithOutVAT]  >= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Min,126 ) + ') and
							( p.[TagPriceWithOutVAT]  <= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Max,126 ) + ')
						) 					
					)'

		set @p_filter_request = @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_filter_request_TagPriceWithOutVAT + @p_search_FromDatePrice
		--print '1'
		declare @p_search_request nvarchar(MAX) = ''
		declare @p_search_request_onlythis nvarchar(MAX) = ''

		if (@p_Type != 'All')
			set @p_search_type = ' and p.[Type] in (' + @p_Type + ')' ;	
		if (@p_KtID != 'All')
			set @p_search_ktid = ' and p.[KtID] in (' + @p_KtID + ')' ;
		if (@p_Color != 'All')
			set @p_search_color = ' and p.[Color] in (' + @p_Color + ')' ;
		if (@p_Size != 'All')
			set @p_search_size = ' and p.[Size] in (' + @p_Size + ')' ;
		if (@p_Gender != 'All')
			set @p_search_gender = ' and p.[Gender] in (' + @p_Gender + ')' ;
		if (@p_ThemedCollection != 'All')
			set @p_search_themed = ' and p.[ThemedCollection] in (' + @p_ThemedCollection + ')' ;
		if (@p_Status != 'All')
			set @p_search_status = ' and p.[Status] in (' + @p_Status + ')' ;
		if (@p_ShowcaseID != 'All')
			set @p_search_showcase = ' and p.[ShowcaseID] in (' + @p_ShowcaseID + ')' ;
		if (@p_Currency != 'All')
			set @p_search_currency = ' and p.[Code] in (' + @p_Currency + ')' ;			

		if (@p_search != '')
			set @p_search_request = ' and
			(
				(
					(
						convert(nvarchar(10), p.ID) like ''' + @p_search_string + ''' 
						or
						p.[Model] like ''' + @p_search_string + '''	
						or
						([Weight] like ''' + @p_search_money + ''')		
						or
						([TagPriceWithVAT] like ''' + @p_search_money + ''')		
					)				
				)
			)'

		set @p_search_request = @p_search_request + @p_search_type + @p_search_ktid + @p_search_color + @p_search_size + @p_search_gender + @p_search_themed + @p_search_status + @p_search_currency 
		set @p_filter_request = @p_filter_request + @p_search_request	
		
		if (@p_Stones != 'All') 
		begin
			SET @p_search_request = ''
			SET @p_StoneWeightMin = REPLACE(@p_StoneWeightMin, ',', '.')
			SET @p_StoneWeightMax = REPLACE(@p_StoneWeightMax, ',', '.')

			CREATE TABLE #StoneTable(
				[LineDocument] int,
				[Stones] nvarchar(MAX),
				[StoneShape] nvarchar(MAX),
				[StoneColor] nvarchar(MAX),
				[StoneClarity] nvarchar(MAX),
				[StoneSize] nvarchar(MAX),
				[StoneSetting] nvarchar(MAX),
				[StoneWeightMin] nvarchar(MAX),
				[StoneWeightMax] nvarchar(MAX),
				[StoneQuantityMin] nvarchar(MAX),
				[StoneQuantityMax] nvarchar(MAX)
			)
			INSERT INTO #StoneTable([LineDocument],[Stones])
			SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_Stones,@delimeter1)
			ORDER BY CounterVal
			UPDATE #StoneTable SET [StoneShape] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneShape,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneColor] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneColor,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneClarity] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneClarity,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneSize] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneSize,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneSetting] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneSetting,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneWeightMin] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneWeightMin,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneWeightMax] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneWeightMax,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneQuantityMin] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneQuantityMin,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneQuantityMax] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneQuantityMax,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]

			SET @p_search_request = Concat(@p_search_request, ' AND 
						( ')
	
			DECLARE CUR CURSOR FAST_FORWARD READ_ONLY FOR SELECT
				[LineDocument],[Stones],[StoneShape],[StoneColor],[StoneClarity],[StoneSize],[StoneSetting],[StoneWeightMin],[StoneWeightMax],[StoneQuantityMin],[StoneQuantityMax]
			FROM #StoneTable
			DECLARE
				@LineDocument1 int,
				@Stones1 nvarchar(MAX),
				@StoneShape1 nvarchar(MAX),
				@StoneColor1 nvarchar(MAX),
				@StoneClarity1 nvarchar(MAX),
				@StoneSize1 nvarchar(MAX),
				@StoneSetting1 nvarchar(MAX),
				@StoneWeightMin1 nvarchar(MAX),
				@StoneWeightMax1 nvarchar(MAX),
				@StoneQuantityMin1 nvarchar(MAX),
				@StoneQuantityMax1 nvarchar(MAX)
			OPEN CUR
			FETCH NEXT FROM CUR INTO
				@LineDocument1,@Stones1,@StoneShape1,@StoneColor1,@StoneClarity1,@StoneSize1,@StoneSetting1,@StoneWeightMin1,@StoneWeightMax1,@StoneQuantityMin1,@StoneQuantityMax1
			WHILE @@FETCH_STATUS = 0
			BEGIN
				Declare @IsChanged integer = 0

				if(LEN(@StoneShape1)>1) begin
					SET @StoneShape1 = REPLACE(@StoneShape1, '|', ''',''')
					SET @StoneShape1=SUBSTRING(@StoneShape1,0,LEN(@StoneShape1)-1)
					SET @StoneShape1 = Concat('''',@StoneShape1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneColor1)>1) begin
					SET @StoneColor1 = REPLACE(@StoneColor1, '|', ''',''')
					SET @StoneColor1=SUBSTRING(@StoneColor1,0,LEN(@StoneColor1)-1)
					SET @StoneColor1 = Concat('''',@StoneColor1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneClarity1)>1) begin
					SET @StoneClarity1 = REPLACE(@StoneClarity1, '|', ''',''')
					SET @StoneClarity1=SUBSTRING(@StoneClarity1,0,LEN(@StoneClarity1)-1)
					SET @StoneClarity1 = Concat('''',@StoneClarity1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneSize1)>1) begin
					SET @StoneSize1 = REPLACE(@StoneSize1, '|', ''',''')
					SET @StoneSize1=SUBSTRING(@StoneSize1,0,LEN(@StoneSize1)-1)
					SET @StoneSize1 = Concat('''',@StoneSize1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneSetting1)>1) begin
					SET @StoneSetting1 = REPLACE(@StoneSetting1, '|', ''',''')
					SET @StoneSetting1=SUBSTRING(@StoneSetting1,0,LEN(@StoneSetting1)-1)
					SET @StoneSetting1 = Concat('''',@StoneSetting1)
					SET @IsChanged = 1
				end

				if(LEN(@StoneQuantityMin1)>0) begin
					SET @StoneQuantityMin1 = REPLACE(@StoneQuantityMin1, '|', '')
					SET @IsChanged = 1
				end
				if(LEN(@StoneQuantityMax1)>0) begin
					SET @StoneQuantityMax1 = REPLACE(@StoneQuantityMax1, '|', '')
					SET @IsChanged = 1
				end
				if(LEN(@StoneWeightMin1)>0) begin
					SET @StoneWeightMin1 = REPLACE(@StoneWeightMin1, '|', '')
					SET @IsChanged = 1
				end
				if(LEN(@StoneWeightMax1)>0) begin
					SET @StoneWeightMax1 = REPLACE(@StoneWeightMax1, '|', '')
					SET @IsChanged = 1
				end

				if (@LineDocument1>1) begin
					if (@p_AllStones='true') begin
						SET @p_search_request = Concat(@p_search_request, '
						 AND ( ')
					end
					else begin
						SET @p_search_request = Concat(@p_search_request, '
						 OR ( ')
					end
				end

				if (@IsChanged=0) begin
					SET @p_search_request = CONCAT(@p_search_request, '(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID])>0')
				end

				if (@p_AllStones='true') begin
					if (@LineDocument1>1) begin
						SET @p_search_request_onlythis = CONCAT(@p_search_request_onlythis, ' AND st.[Stone]!='''+@Stones1+''' ')
					end
					else begin
						SET @p_search_request_onlythis = CONCAT(@p_search_request_onlythis, ' st.[Stone]!='''+@Stones1+''' ')
					end
				end

				declare @IsFirstIsset integer = 0

				if(LEN(@StoneShape1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Shape] IN ('+@StoneShape1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneClarity1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Clarity] IN ('+@StoneClarity1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneColor1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Color] IN ('+@StoneColor1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneSize1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, '
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Size] IN ('+@StoneSize1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneSetting1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Setting] IN ('+@StoneSetting1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneWeightMin1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Weight) as SumQuantity FROM
								(SELECT Weight FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmin
							) >= '+@StoneWeightMin1
					)
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneWeightMax1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Weight) as SumQuantity FROM
								(SELECT Weight FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmax
							) <= '+@StoneWeightMax1
					)
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneQuantityMin1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Quantity) as SumQuantity FROM
								(SELECT Quantity FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmin
							) >= '+@StoneQuantityMin1
					)
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneQuantityMax1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Quantity) as SumQuantity FROM
								(SELECT Quantity FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmax
							) <= '+@StoneQuantityMax1
					)
					SET @IsFirstIsset=1
				end
				if (@LineDocument1>1) begin
					SET @p_search_request = Concat(@p_search_request, ' ) ')
				end

				FETCH NEXT FROM CUR INTO
				@LineDocument1,@Stones1,@StoneShape1,@StoneColor1,@StoneClarity1,@StoneSize1,@StoneSetting1,@StoneWeightMin1,@StoneWeightMax1,@StoneQuantityMin1,@StoneQuantityMax1
			END
			CLOSE CUR DEALLOCATE CUR

			if (@p_AllStones='true') begin
				SET @p_search_request = @p_search_request + '
						 AND (SELECT Count(ID) FROM [dbo].[Stones] st WHERE '+@p_search_request_onlythis+' AND st.[ProductID]=p.[ID])=0'
			end

			SET @p_search_request = Concat(@p_search_request, '
						) ')
		end
		
		set @p_filter_request = @p_filter_request + @p_search_request

		declare @end_request nvarchar(max) = ''
		set @end_request =  '
							SELECT 
									Count(CountIDInner) as CountID
									,SUM(WeightSummInner) as WeightSumm
									,SUM(PriceSummInner) as PriceSumm
							FROM
								(
									SELECT
											p.[ID]
											,p.[ID] AS CountIDInner
											,p.[Weight] AS WeightSummInner
											,p.[TagPriceWithVAT] AS PriceSummInner
									FROM [dbo].[Product] AS p
										LEFT JOIN [dbo].[Currency] cur ON cur.Code = p.TagPriceCurrency where'										
										+ @p_filter_request										
										+ @p_search_stones
								+') as sm'
		--print @end_request
		--SELECT @end_request
		EXECUTE (@end_request);	
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Продукция, результирующая грида
-- =============================================
-- xp_GetProductTable 'Item','', 13000203,0,'','','','','','','',''
-- xp_GetProductTable 'ItemByStatus','',13000203,0,'All','All','All','All','All','All','All','All','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00', 0,20,0,100000000,0,100000000,0,100000000,'KtIDDescription',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0
-- xp_GetProductTable 'ItemByStatus','',13000203,0,'All','All','All','All','All','All','All','8','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0

-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','0','All','All',  '','','','','','','','', true,0,182,0,100000000,0,100000000,0,13000,'ID',0

-- xp_GetProductTable 'Grid','',0,0, 'All','All','All','All','All','All','All','0','643','All',  '','','','','','','','','', true,0,182,0,100000000,0,100000000,0,13000,'ID',0

-- xp_GetProductTable 'ItemByStatus','',13000203,0,'All','All','All','All','All','All','All','0','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0
-- xp_GetProductTable 'ItemByStatus','',13000342,0,'All','All','All','All','All','All','All','0','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0
-- xp_GetProductTable 'ItemByStatus','',13000342,0,'All','All','All','All','All','All','All','9','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0
-- xp_GetProductTable 'ItemByStatus','',1300034299,0,'All','All','All','All','All','All','All','9','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0
-- xp_GetProductTable 'ItemByStatus','',13000388,0,'All','All','All','All','All','All','All','0','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0
-- xp_GetProductTable 'ItemByStatus','',13007232,0,'All','All','All','All','All','All','All','0','All','All', '01.01.2021 00:00:10', '01.14.2021 00:00:00',  '','','','','','','','','',  true, 0.01,182,0.01,20437352,0.01,17031126.67,0,1000000,'ID',0

-- =============================================
CREATE PROCEDURE [dbo].[xp_GetProductTable]
	@p_TypeScreen varchar(40), --Item, Grid, InGrid, Filter
	@p_search nvarchar(40)='',
	@p_ID int,	
	@p_UserID int,

	@p_Type nvarchar(MAX)='',
	@p_KtID nvarchar(MAX)='',
	@p_Size nvarchar(MAX)='',
	@p_Color nvarchar(MAX)='',
	@p_Gender nvarchar(MAX)='',
	@p_ThemedCollection nvarchar(MAX)='',
	@p_ShowcaseID nvarchar(MAX)='',	
	@p_Status nvarchar(MAX)='',
	@p_Currency nvarchar(MAX)='',
	@p_Stones nvarchar(MAX)='',
	@p_FromFromDatePrice datetime,
	@p_ToFromDatePrice datetime,	

	@p_StoneShape nvarchar(MAX)='',
	@p_StoneColor nvarchar(MAX)='',
	@p_StoneClarity nvarchar(MAX)='',
	@p_StoneSize nvarchar(MAX)='',
	@p_StoneSetting nvarchar(MAX)='',
	@p_StoneWeightMin nvarchar(MAX)='',
	@p_StoneWeightMax nvarchar(MAX)='',
	@p_StoneQuantityMin nvarchar(MAX)='',
	@p_StoneQuantityMax nvarchar(MAX)='',

	@p_AllStones bit = false,
	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,
	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,
	@p_TagPriceWithOutVAT_Min money = 0,
	@p_TagPriceWithOutVAT_Max money = 0,
	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',	
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	
	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter varchar(40)= '''|''';
	declare @delimeter1 varchar(40)= '|';
	declare @delimeter2 varchar(40)= '$';
	declare @delimeter3 varchar(40)= '''$''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;
	declare @FromFromDatePrice_string nvarchar(40) = CONVERT(nvarchar, @p_FromFromDatePrice, 120)
	declare @ToFromDatePrice_string nvarchar(40) = CONVERT(nvarchar, @p_ToFromDatePrice, 102)
	
	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT TOP 1
							   p.[ID]
							  ,p.[Model]
							  ,p.[ModelID]
							  ,p.[Type]
							  ,p.[KtID]
							  ,Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) as KtIDDescription
							  ,p.[Size]
							  ,p.[Color]
							  ,p.[Gender]
							  ,p.[SupplierID]
							  ,p.[SupplierName]
							  ,p.[Country]
							  ,p.[ThemedCollection]
							  ,p.[Weight]				  
							  ,p.[CostWithoutVAT]
							  ,p.[CostCurrency]
							  ,p.[TagPriceWithVAT]				  
							  ,p.[TagPriceCurrency]
							  ,cur.[ShortDescription]
							  ,cur.[LongDescription]
							  ,p.[TagPriceExtra]
							  ,p.[Status]
							  ,p.[ShowcaseID]
							  ,shid.[Description] as ShowcaseIDDescription
							  ,p.[CreatedDate]
							  ,p.[LastModifiedDate]
							  ,p.[CreatedByUserID]
							  ,p.[LastModifiedByUserID]
							  ,p.TagPriceWithOutVAT as TagPriceWithOutVAT 
							  ,p.DeclarationNumber
							  ,p.TnvedCode
							  ,p.FromDatePrice
						  FROM [dbo].[Product] as p
								left join dbo.[KT] ktid on ktid.ID=p.[KtID]
								left join dbo.[Metal] meid on meid.ID=ktid.MetalID
								left join dbo.[Showcase] shid on shid.ID=p.[ShowcaseID]
								left join dbo.[Currency] cur on cur.Code=p.TagPriceCurrency								
			where p.ID=@p_ID			
	end
	
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

		if (@p_Type = '' or @p_KtID = '' or @p_Color = ''or @p_Size = ''or @p_Gender = ''or @p_ThemedCollection = ''or @p_Status = ''or @p_ShowcaseID = '' or @p_Currency = '' or @p_Stones = '')
			return		
		--print '1'
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_Type = REPLACE(@p_Type,'|', ',')	
		set @p_KtID = REPLACE(@p_KtID,'|', ',')	
		set @p_Size = REPLACE(@p_Size,'|', ',')	
		set @p_Color = REPLACE(@p_Color,'|', ',')	
		set @p_Gender = REPLACE(@p_Gender,'|', ',')	
		set @p_ThemedCollection = REPLACE(@p_ThemedCollection,'|', ',')	
		set @p_ShowcaseID = REPLACE(@p_ShowcaseID,'|', ',')	
		set @p_Status = REPLACE(@p_Status,'|', ',')	
		set @p_Currency = REPLACE(@p_Currency,'|', ',')
		set @p_Stones = REPLACE(@p_Stones,'''', '')	

		set @p_search_string='%' + @p_search + '%'	
		--print '2'
		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

		declare @p_search_type nvarchar(MAX) = ''
		declare @p_search_ktid nvarchar(MAX) = ''
		declare @p_search_color nvarchar(MAX) = ''
		declare @p_search_size nvarchar(MAX) = ''
		declare @p_search_gender nvarchar(MAX) = ''
		declare @p_search_themed nvarchar(MAX) = ''
		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_currency nvarchar(MAX) = ''
		declare @p_search_stones nvarchar(MAX) = ''
		declare @p_search_FromDatePrice nvarchar(MAX) = ''	

		declare @p_search_quantity_min nvarchar(MAX) = ''
		declare @p_search_quantity_max nvarchar(MAX) = ''

		declare @p_search_showcase nvarchar(MAX) = ''
		declare @p_filter_request nvarchar(MAX) = ''
		declare @p_filter_request_Weight nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''
		declare @p_filter_request_TagPriceWithOutVAT nvarchar(MAX) = ''

		if (@FromFromDatePrice_string!='1753-01-01 00:00:10')	
		begin	
			set	@FromFromDatePrice_string = CONVERT(nvarchar, @p_FromFromDatePrice, 102)
			set @p_search_FromDatePrice =  		
					' and (
						CONVERT(date,p.[FromDatePrice]) between ''' + @FromFromDatePrice_string  + ''' and ''' + @ToFromDatePrice_string + '''
					)'	
					end		
		
		set @p_filter_request_Weight = ' 		
					(
						(
							( p.[Weight]  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
							( p.[Weight] <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
						) 					
					)'

		set @p_filter_request_TagPriceWithVAT = ' and		
					(
						(
							( p.[TagPriceWithVAT] >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
							( p.[TagPriceWithVAT] <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
						) 					
					)'
					
		set @p_filter_request_TagPriceWithOutVAT = ' and		
					(
						(
							( p.[TagPriceWithOutVAT] >= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Min,126 ) + ') and
							( p.[TagPriceWithOutVAT]   <= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Max,126 ) + ')
						) 					
					)'							

		set @p_filter_request = @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_filter_request_TagPriceWithOutVAT + @p_search_FromDatePrice
		--print '3'
		declare @p_search_request nvarchar(MAX) = ''
		declare @p_search_request_onlythis nvarchar(MAX) = ''

		if (@p_Type != 'All')
			set @p_search_type = ' and p.[Type] in (' + @p_Type + ')' ;	
		if (@p_KtID != 'All')
			set @p_search_ktid = ' and p.[KtID] in (' + @p_KtID + ')' ;
		if (@p_Color != 'All')
			set @p_search_color = ' and p.[Color] in (' + @p_Color + ')' ;
		if (@p_Size != 'All')
			set @p_search_size = ' and p.[Size] in (' + @p_Size + ')' ;
		if (@p_Gender != 'All')
			set @p_search_gender = ' and p.[Gender] in (' + @p_Gender + ')' ;
		if (@p_ThemedCollection != 'All')
			set @p_search_themed = ' and p.[ThemedCollection] in (' + @p_ThemedCollection + ')' ;
		if (@p_Status != 'All')
			set @p_search_status = ' and p.[Status] in (' + @p_Status + ')' ;
		if (@p_ShowcaseID != 'All')
			set @p_search_showcase = ' and p.[ShowcaseID] in (' + @p_ShowcaseID + ')' ;
		if (@p_Currency != 'All')
			set @p_search_currency = ' and p.[TagPriceCurrency] in (' + @p_Currency + ')' ;			
--print '4'
		if (@p_search != '')
			set @p_search_request = ' and
			(
				(
					(
						convert(nvarchar(10), p.ID) like ''' + @p_search_string + ''' 
						or
						p.[Model] like ''' + @p_search_string + '''	
						or
						([Weight] like ''' + @p_search_money + ''')		
						or
						([TagPriceWithVAT] like ''' + @p_search_money + ''')		
					)				
				)
			)'

		set @p_search_request = @p_search_request + @p_search_type + @p_search_ktid + @p_search_color + @p_search_size + @p_search_gender + @p_search_themed + @p_search_status + @p_search_currency 
		set @p_filter_request = @p_filter_request + @p_search_request
		--print @p_search_request
		if (@p_Stones != 'All') 
		begin
			SET @p_search_request = ''
			SET @p_StoneWeightMin = REPLACE(@p_StoneWeightMin, ',', '.')
			SET @p_StoneWeightMax = REPLACE(@p_StoneWeightMax, ',', '.')

			CREATE TABLE #StoneTable(
				[LineDocument] int,
				[Stones] nvarchar(MAX),
				[StoneShape] nvarchar(MAX),
				[StoneColor] nvarchar(MAX),
				[StoneClarity] nvarchar(MAX),
				[StoneSize] nvarchar(MAX),
				[StoneSetting] nvarchar(MAX),
				[StoneWeightMin] nvarchar(MAX),
				[StoneWeightMax] nvarchar(MAX),
				[StoneQuantityMin] nvarchar(MAX),
				[StoneQuantityMax] nvarchar(MAX)
			)
			INSERT INTO #StoneTable([LineDocument],[Stones])
			SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_Stones,@delimeter1)
			ORDER BY CounterVal
			UPDATE #StoneTable SET [StoneShape] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneShape,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneColor] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneColor,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneClarity] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneClarity,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneSize] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneSize,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneSetting] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneSetting,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneWeightMin] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneWeightMin,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneWeightMax] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneWeightMax,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneQuantityMin] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneQuantityMin,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]
			UPDATE #StoneTable SET [StoneQuantityMax] = it.Val1
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_StoneQuantityMax,@delimeter2)) AS it
			WHERE it.[CounterVal] = #StoneTable.[LineDocument]

			SET @p_search_request = Concat(@p_search_request, ' AND 
						( ')
	
			DECLARE CUR CURSOR FAST_FORWARD READ_ONLY FOR SELECT
				[LineDocument],[Stones],[StoneShape],[StoneColor],[StoneClarity],[StoneSize],[StoneSetting],[StoneWeightMin],[StoneWeightMax],[StoneQuantityMin],[StoneQuantityMax]
			FROM #StoneTable
			DECLARE
				@LineDocument1 int,
				@Stones1 nvarchar(MAX),
				@StoneShape1 nvarchar(MAX),
				@StoneColor1 nvarchar(MAX),
				@StoneClarity1 nvarchar(MAX),
				@StoneSize1 nvarchar(MAX),
				@StoneSetting1 nvarchar(MAX),
				@StoneWeightMin1 nvarchar(MAX),
				@StoneWeightMax1 nvarchar(MAX),
				@StoneQuantityMin1 nvarchar(MAX),
				@StoneQuantityMax1 nvarchar(MAX)
			OPEN CUR
			FETCH NEXT FROM CUR INTO
				@LineDocument1,@Stones1,@StoneShape1,@StoneColor1,@StoneClarity1,@StoneSize1,@StoneSetting1,@StoneWeightMin1,@StoneWeightMax1,@StoneQuantityMin1,@StoneQuantityMax1
			WHILE @@FETCH_STATUS = 0
			BEGIN
				Declare @IsChanged integer = 0

				if(LEN(@StoneShape1)>1) begin
					SET @StoneShape1 = REPLACE(@StoneShape1, '|', ''',''')
					SET @StoneShape1=SUBSTRING(@StoneShape1,0,LEN(@StoneShape1)-1)
					SET @StoneShape1 = Concat('''',@StoneShape1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneColor1)>1) begin
					SET @StoneColor1 = REPLACE(@StoneColor1, '|', ''',''')
					SET @StoneColor1=SUBSTRING(@StoneColor1,0,LEN(@StoneColor1)-1)
					SET @StoneColor1 = Concat('''',@StoneColor1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneClarity1)>1) begin
					SET @StoneClarity1 = REPLACE(@StoneClarity1, '|', ''',''')
					SET @StoneClarity1=SUBSTRING(@StoneClarity1,0,LEN(@StoneClarity1)-1)
					SET @StoneClarity1 = Concat('''',@StoneClarity1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneSize1)>1) begin
					SET @StoneSize1 = REPLACE(@StoneSize1, '|', ''',''')
					SET @StoneSize1=SUBSTRING(@StoneSize1,0,LEN(@StoneSize1)-1)
					SET @StoneSize1 = Concat('''',@StoneSize1)
					SET @IsChanged = 1
				end
				if(LEN(@StoneSetting1)>1) begin
					SET @StoneSetting1 = REPLACE(@StoneSetting1, '|', ''',''')
					SET @StoneSetting1=SUBSTRING(@StoneSetting1,0,LEN(@StoneSetting1)-1)
					SET @StoneSetting1 = Concat('''',@StoneSetting1)
					SET @IsChanged = 1
				end

				if(LEN(@StoneQuantityMin1)>0) begin
					SET @StoneQuantityMin1 = REPLACE(@StoneQuantityMin1, '|', '')
					SET @IsChanged = 1
				end
				if(LEN(@StoneQuantityMax1)>0) begin
					SET @StoneQuantityMax1 = REPLACE(@StoneQuantityMax1, '|', '')
					SET @IsChanged = 1
				end
				if(LEN(@StoneWeightMin1)>0) begin
					SET @StoneWeightMin1 = REPLACE(@StoneWeightMin1, '|', '')
					SET @IsChanged = 1
				end
				if(LEN(@StoneWeightMax1)>0) begin
					SET @StoneWeightMax1 = REPLACE(@StoneWeightMax1, '|', '')
					SET @IsChanged = 1
				end

				if (@LineDocument1>1) begin
					if (@p_AllStones='true') begin
						SET @p_search_request = Concat(@p_search_request, '
						 AND ( ')
					end
					else begin
						SET @p_search_request = Concat(@p_search_request, '
						 OR ( ')
					end
				end

				if (@IsChanged=0) begin
					SET @p_search_request = CONCAT(@p_search_request, '(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID])>0')
				end

				if (@p_AllStones='true') begin
					if (@LineDocument1>1) begin
						SET @p_search_request_onlythis = CONCAT(@p_search_request_onlythis, ' AND st.[Stone]!='''+@Stones1+''' ')
					end
					else begin
						SET @p_search_request_onlythis = CONCAT(@p_search_request_onlythis, ' st.[Stone]!='''+@Stones1+''' ')
					end
				end

				declare @IsFirstIsset integer = 0

				if(LEN(@StoneShape1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Shape] IN ('+@StoneShape1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneClarity1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Clarity] IN ('+@StoneClarity1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneColor1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Color] IN ('+@StoneColor1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneSize1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, '
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Size] IN ('+@StoneSize1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneSetting1)>1) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT Count(ID) FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[Setting] IN ('+@StoneSetting1+') AND st.[ProductID]=p.[ID])>0')
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneWeightMin1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Weight) as SumQuantity FROM
								(SELECT Weight FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmin
							) >= '+@StoneWeightMin1
					)
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneWeightMax1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Weight) as SumQuantity FROM
								(SELECT Weight FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmax
							) <= '+@StoneWeightMax1
					)
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneQuantityMin1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Quantity) as SumQuantity FROM
								(SELECT Quantity FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmin
							) >= '+@StoneQuantityMin1
					)
					SET @IsFirstIsset=1
				end
				if(LEN(@StoneQuantityMax1)>0) begin
					if (@IsFirstIsset=1) SET @p_search_request = CONCAT(@p_search_request, ' AND ')
					SET @p_search_request = CONCAT(@p_search_request, ' 
						(SELECT SUM(Quantity) as SumQuantity FROM
								(SELECT Quantity FROM [dbo].[Stones] st WHERE st.[Stone]='''+@Stones1+''' AND st.[ProductID]=p.[ID]) as sqmax
							) <= '+@StoneQuantityMax1
					)
					SET @IsFirstIsset=1
				end
				if (@LineDocument1>1) begin
					SET @p_search_request = Concat(@p_search_request, ' ) ')
				end

				FETCH NEXT FROM CUR INTO
				@LineDocument1,@Stones1,@StoneShape1,@StoneColor1,@StoneClarity1,@StoneSize1,@StoneSetting1,@StoneWeightMin1,@StoneWeightMax1,@StoneQuantityMin1,@StoneQuantityMax1
			END
			CLOSE CUR DEALLOCATE CUR

			if (@p_AllStones='true') begin
				SET @p_search_request = @p_search_request + '
						 AND (SELECT Count(ID) FROM [dbo].[Stones] st WHERE '+@p_search_request_onlythis+' AND st.[ProductID]=p.[ID])=0'
			end

			SET @p_search_request = Concat(@p_search_request, '
						) ')
			set @p_filter_request = @p_filter_request + @p_search_request
		end
		
		
		--print @p_filter_request
		declare @end_request nvarchar(max) = ''

		if(@p_SortColumn='KtIDDescription')
			set  @p_SortColumn='meid.[Description] ' + @p_order + ', ktid.[Description] '
		else if(@p_SortColumn='ShowcaseIDDescription')
			set @p_SortColumn='shid.[Name]'
		else if(@p_SortColumn='Currency')
			set @p_SortColumn='p.[TagPriceCurrency]'
		else
			set @p_SortColumn='p.'+@p_SortColumn

		set @end_request = '
			SET TRANSACTION ISOLATION LEVEL  READ UNCOMMITTED					
					SELECT [ID],[Model],[ModelID],[Type],[KtID],[KtIDDescription],[Size],[Color],[Gender],
					[SupplierID],[SupplierName],[Country],[ThemedCollection],[Weight],[CostWithoutVAT],
					[CostCurrency],[TagPriceWithVAT],[TagPriceCurrency],[ShortDescription],[LongDescription],[TagPriceExtra],
					[Status],[ShowcaseID],[ShowcaseIDDescription],[CreatedDate],[LastModifiedDate],[CreatedByUserID],
					[LastModifiedByUserID],[TagPriceWithOutVAT],[DeclarationNumber],[TnvedCode],[FromDatePrice]
					FROM (
						   SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,p.[ID]
							  ,p.[Model]
							  ,p.[ModelID]
							  ,p.[Type]
							  ,p.[KtID]
							  ,Concat(meid.[Description],case when ktid.[Description] is null then '''' else '' - '' end,ktid.[Description]) as [KtIDDescription]
							  ,p.[Size]
							  ,p.[Color]
							  ,p.[Gender]
							  ,p.[SupplierID]
							  ,p.[SupplierName]
							  ,p.[Country]
							  ,p.[ThemedCollection]
							  ,p.[Weight]				  
							  ,p.[CostWithoutVAT]
							  ,p.[CostCurrency]
							  ,p.[TagPriceWithVAT]				  
							  ,p.[TagPriceCurrency]
							  ,cur.[ShortDescription]
							  ,cur.[LongDescription]
							  ,p.[TagPriceExtra]
							  ,p.[Status]
							  ,p.[ShowcaseID]
							  ,shid.[Description] as [ShowcaseIDDescription]
							  ,p.[CreatedDate]
							  ,p.[LastModifiedDate]
							  ,p.[CreatedByUserID]
							  ,p.[LastModifiedByUserID]
							  ,p.[TagPriceWithOutVAT] as TagPriceWithOutVAT
							  ,p.[DeclarationNumber]
							  ,p.[TnvedCode]	
							  ,p.FromDatePrice					 
						  FROM [dbo].[Product] as p
								left join dbo.[KT] ktid on ktid.ID=p.[KtID]
								left join dbo.[Metal] meid on meid.ID=ktid.MetalID
								left join dbo.[Showcase] shid on shid.ID=p.[ShowcaseID]
								left join [dbo].[Currency] cur on cur.[Code]=p.[TagPriceCurrency] where '
								+ @p_filter_request								
								+ @p_search_stones								
					+'
					GROUP BY
						p.[ID],p.[Model],p.[ModelID],p.[Type],p.[KtID],meid.[Description],ktid.[Description],shid.[Name],
						Concat(meid.[Description],'' - '',ktid.[Description]),p.[Size],p.[Color],p.[Gender],
						p.[SupplierID],p.[SupplierName],p.[Country],p.[ThemedCollection],p.[Weight],p.[CostWithoutVAT],
						p.[CostCurrency],p.[TagPriceWithVAT],p.[TagPriceCurrency],cur.[ShortDescription],cur.[LongDescription],p.[TagPriceExtra],
						p.[Status],p.[ShowcaseID],shid.[Description],p.[CreatedDate],p.[LastModifiedDate],p.[CreatedByUserID],
						p.[LastModifiedByUserID],p.[TagPriceWithOutVAT],p.[DeclarationNumber],p.[TnvedCode],p.FromDatePrice
					'
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)  
					+ ' GROUP BY
						[ID],[Model],[ModelID],[Type],[KtID],[KtIDDescription],[Size],[Color],[Gender],
						[SupplierID],[SupplierName],[Country],[ThemedCollection],[Weight],[CostWithoutVAT],
						[CostCurrency],[TagPriceWithVAT],[TagPriceCurrency],[ShortDescription],[LongDescription],[TagPriceExtra],
						[Status],[ShowcaseID],[ShowcaseIDDescription],[CreatedDate],[LastModifiedDate],[CreatedByUserID],
						[LastModifiedByUserID],[TagPriceWithOutVAT],[DeclarationNumber],[TnvedCode],FromDatePrice,st.RowNumber
					order by st.RowNumber asc '
		--print @end_request
		--SELECT @end_request
		execute	sp_EXECUTEsql @end_request		
	end

	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
		SELECT
			p.[ID]
			,p.[Model]
			,p.[ModelID]
			,p.[Type]
			,p.[KtID]
			,Concat(meid.[Description],' - ',ktid.[Description]) as KtIDDescription
			,p.[Size]
			,p.[Color]
			,p.[Gender]
			,p.[SupplierID]
			,p.[SupplierName]
			,p.[Country]
			,p.[ThemedCollection]
			,p.[Weight]				  
			,p.[CostWithoutVAT]
			,p.[CostCurrency]
			,p.[TagPriceWithVAT]				  
			,p.[TagPriceCurrency]
			,cur.[ShortDescription]
			,cur.[LongDescription]
			,p.[TagPriceExtra]
			,p.[Status]
			,p.[ShowcaseID]
			,shid.[Description] as ShowcaseIDDescription
			,p.[CreatedDate]
			,p.[LastModifiedDate]
			,p.[CreatedByUserID]
			,p.[LastModifiedByUserID]
			,p.TagPriceWithOutVAT 
			,p.DeclarationNumber
			,p.TnvedCode
		FROM [dbo].[Product] as p(nolock)
			left join dbo.[KT] ktid(nolock) on ktid.ID=p.[KtID]
			left join dbo.[Metal] meid(nolock) on meid.ID=ktid.MetalID
			left join dbo.[Showcase] shid(nolock) on shid.ID=p.[ShowcaseID]
			left join [dbo].[Currency] cur on cur.Code=p.TagPriceCurrency
		WHERE
			convert(nvarchar(10), p.ID) = @p_Search
	end

	else if @p_TypeScreen in ('ItemByStatus') begin ---------------------------------------------------------------------
		set @p_Status = REPLACE(@p_Status,'|', ',')	
		set @p_search_status = '' 
		if (@p_Status != 'All')
			set @p_search_status = ' p.[Status] in (' + @p_Status + ')' 

		set @end_request = '
		create table #ProductTable (isValidProduct bit,
									ProductID int)
		
		insert into #ProductTable
		select top 1 case when ((wf.ID is not null) and (wf.ClosingDate is null)) or (p.Status != 9) then 1
					else 0 end as isSessionOpen
					,sdp.ProductID		
		 from SaleDocumentProduct sdp 
			left join Product p on p.ID=sdp.ProductID
			left join SaleDocument sd on sd.ID=sdp.DocumentID
			left join SaleDocumentPayment sdpa on sdpa.DocumentID=sdp.DocumentID
			left join WorkShift wf on wf.ID=sdpa.WorkShiftID and wf.PosID=sdpa.PosID
			where sdp.ProductID='+CAST(@p_ID AS nvarchar)+' and sd.Type=9 and sd.DocumentNumber>0
			order by sdp.ID desc
		
		
		SELECT DISTINCT 
			case when'+ @p_search_status + ' and pt.isValidProduct=1 then p.[ID] -- все просто супер
				 when '+ @p_search_status +' and pt.isValidProduct=0 then -1*p.[ID] -- что - то не подошло
				 when not '+ @p_search_status +' then 0 -- не подходит
			else p.[ID] 
			end as ID 		
			,p.[Model]
			,p.[ModelID]
			,p.[Type]
			,p.[KtID]
			,Concat(meid.[Description],'' - '',ktid.[Description]) as KtIDDescription
			,p.[Size]
			,p.[Color]
			,p.[Gender]
			,p.[SupplierID]
			,p.[SupplierName]
			,p.[Country]
			,p.[ThemedCollection]
			,p.[Weight]				  
			,p.[CostWithoutVAT]
			,p.[CostCurrency]
			,p.[TagPriceWithVAT]				  
			,p.[TagPriceCurrency]
			,cur.[ShortDescription]
			,cur.[LongDescription]
			,p.[TagPriceExtra]
			,p.[Status]
			,p.[ShowcaseID]
			,shid.[Description] as ShowcaseIDDescription
			,p.[CreatedDate]
			,p.[LastModifiedDate]
			,p.[CreatedByUserID]
			,p.[LastModifiedByUserID]
			,p.TagPriceWithOutVAT 			
			,p.DeclarationNumber
			,p.TnvedCode
			,p.FromDatePrice 
			,CAST((p.[TagPriceWithVat]-p.[TagPriceWithOutVat])*100/p.[TagPriceWithOutVat] as money) as Vat			
		FROM [dbo].[Product] as p(nolock)
			left join dbo.[KT] ktid(nolock) on ktid.ID=p.[KtID]
			left join dbo.[Metal] meid(nolock) on meid.ID=ktid.MetalID
			left join dbo.[Showcase] shid(nolock) on shid.ID=p.[ShowcaseID]
			left join dbo.[Currency] cur on cur.Code=p.TagPriceCurrency	
			left join #ProductTable pt on pt.ProductID=p.ID					  
		where p.[ID] ='  
		+ CAST(@p_ID AS nvarchar)
		
		--select  @end_request	
		--print @end_request
		execute	sp_EXECUTEsql @end_request	
	end
END

-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Бр.|Сапфир|',   '','','','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,20,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Бр.|Сапфир|',   'Кр-57|$|','4|$2|','4А|$2|','|$|','|$|','0$0','4$4','0$0','50$50',  true,0,100000000,0,100000000,0,100000000,0,20,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Бр.|Сапфир|',   'Кр-57|$|','','','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,200000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Бр.|Сапфир|',   'Кр-57|$|','4|$2|','3А|$2|','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,200000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Бр.|Сапфир|',   'Кр-57|$|','4|$2|','3А|$2|','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,200000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Бр.|',   'Кр-57|','4|','3А|','','','','','1|','1|',  true,0,100000000,0,100000000,0,100000000,0,200000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Бр.|',   'Кр-57|','4|','3А|','','','','','1|','1|',  false,0,100000000,0,100000000,0,100000000,0,200000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,20,'ID',1
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','','',  false,0,100000000,0,100000000,0,100000000,0,20,'ID',1
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','0|$0|','150|$150|',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','|$1|','|$2|',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','2|$2|','2|$2|',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','1|$1|','2|$2|',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','','','2|$2|','2|$2|',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Берил|Фианит|',   '','','','','','0.9|$0|','0.93|$0.2|','','',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Агат|',   '','','','','','','','1|','7|',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Агат|',   '','','','','','','','6|','6|',  false,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Агат|',   '','','','','','','','7|','7|',  false,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Агат|Алмадин|',   '','','','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Аквамарин|Бр.|',   '','','$6А|','','','','','','',  true,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','All','All','Агат|',   'Ов|','','','','','','','','',  false,0,100000000,0,100000000,0,100000000,0,2000000,'ID',0
-- xp_GetProductTable 'Grid','',0,0,'All','All','All','All','All','All','All','0','All','All',    '','','','','','','','','',  true, 1.13,11.46,5864,896739,4885.6667,747282.5,0,20,'ID',0 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetProductTransfer 'Name', 13014431
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetProductTransfer]
	@p_TypeScreen nvarchar(10), --Item, Grid, InGrid
	@p_ProductID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	set @p_TypeScreen = LOWER(@p_TypeScreen)	

	if @p_TypeScreen in ('name') begin ---------------------------------------------------------------------
		
		--- Приемка		
		SELECT pt.[ID]
				  ,pt.[ProductID]
				  ,pt.[Status]
				  ,pt.[ExReffOperationType]

				  ,(SELECT CASE 
					WHEN pt.[ExReffOperationType] = 1 THEN d.[ReffID]
					WHEN pt.[ExReffOperationType] = 2 THEN null
					WHEN pt.[ExReffOperationType] = 3 THEN rd.[ReffID]
					END) as ReffID
				  
				  ,
				  (SELECT CASE 
					WHEN pt.[ExReffOperationType] = 1 THEN d.[DocumentID]
					WHEN pt.[ExReffOperationType] = 2 THEN td.[TransferDocumentNumber]
					WHEN pt.[ExReffOperationType] = 3 THEN null
					WHEN pt.[ExReffOperationType] = 4 THEN sd.[DocumentNumber]
					--pt.[ExtReffID]
					WHEN pt.[ExReffOperationType] = 6 THEN sd.[DocumentNumber]
					END) as DocumentID				  
				 
				  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
				  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser

				  ,(SELECT CASE 
					WHEN pt.[ExReffOperationType] = 1 THEN d.[SenderID]
					WHEN pt.[ExReffOperationType] = 2 THEN td.[SenderID]
					WHEN pt.[ExReffOperationType] = 3 THEN null
					END) as SenderNumber
					,(SELECT CASE 
					WHEN pt.[ExReffOperationType] = 1 THEN d.[ReceiverID]
					WHEN pt.[ExReffOperationType] = 2 THEN td.[ReceiverID]
					WHEN pt.[ExReffOperationType] = 3 THEN null
					END) as ReceiverNumber
				  
				  ,(SELECT CASE 
					WHEN pt.[ExReffOperationType] = 1 THEN Concat(d.[SenderID],' ',lsd.[Description])
					WHEN pt.[ExReffOperationType] = 2 THEN Concat(td.[SenderID],' ',lstd.[Description])
					WHEN pt.[ExReffOperationType] = 3 THEN null
					END) as SenderDescription
					,(SELECT CASE 
					WHEN pt.[ExReffOperationType] = 1 THEN Concat(d.[ReceiverID],' ',lrd.[Description])
					WHEN pt.[ExReffOperationType] = 2 THEN Concat(td.[ReceiverID],' ',lrtd.[Description])
					WHEN pt.[ExReffOperationType] = 3 THEN null
					END) as ReceiverDescription	

				  ,pt.[CreatedDate]
				  ,pt.[CreatedByUserID]
			FROM [dbo].[ProductTransfer] as pt
				left join dbo.Users u on u.[ID]=pt.[CreatedByUserID]
				left join dbo.Document d on d.[ID]=pt.[ExtReffID]
				left join dbo.TransferDocument td on td.[ID]=pt.[ExtReffID]
				left join dbo.RevaluationDocument rd on rd.[ID]=pt.[ExtReffID]

				left join dbo.Location lsd on lsd.[ID]=d.[SenderID]
				left join dbo.Location lrd on lrd.[ID]=d.[ReceiverID]

				left join dbo.Location lstd on lstd.[ID]=td.[SenderID]
				left join dbo.Location lrtd on lrtd.[ID]=td.[ReceiverID]
				left join SaleDocument sd on sd.[id] = pt.[extreffid]
				--left join dbo.Location lsrd on lsrd.[ID]=rd.[SenderID]
				--left join dbo.Location lrrd on lrrd.[ID]=rd.[ReceiverID]
			WHERE pt.[ProductID] = @p_ProductID
			ORDER BY pt.[CreatedDate] DESC
		end	
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- xp_GetRefreshInfoMass 64, 4, 0,'', 0, 1000000000, 0, 1000000000, 0, 20, 'ID', 1
-- xp_GetRefreshInfoMass 66, 0, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRefreshInfoMass]	
	@p_AddUserID int = null,
	@p_Command int,
	@p_DocumentID int = 0, 
	@p_search nvarchar(40)='',	

	@p_Quantity_Min int = 0,
	@p_Quantity_Max int = 0,
	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @p_Weight_Min float = 0
	--Declare @temp float=Cast('1.79E+308' as float)
	--Declare @p_Weight_Max money=Cast(@temp as money)
	--print @p_Weight_Max
	Create Table #Document(
					DocumentNumber bigint,
					SyncDate datetime
		)
	Create Table #Document1(					
					DocumentNumber bigint,
					SyncDate datetime
		)
	
	if (@p_Command=0) begin --SaleDocument
		Create table #SaleDocument(
							  RowNumber int
							  ,ID int
							  ,DocumentNumber bigint
							  ,TypeDocument	int				
							  ,UserID int
							  ,ClientCardNumber nvarchar(MAX)
							  ,Currency int
							  ,SyncDate datetime
							  ,CreatedDate datetime
							  ,LastModifiedDate datetime
							  ,CreatedByUserID int
							  ,LastModifiedByUserID	int				
							  ,NumberPhone nvarchar(MAX)
							  ,Email nvarchar(MAX)		 			
							  ,SendCheck bit
							  ,CUserID int
							  ,LUserID int
							  ,Vat decimal
							  ,isplayNameUser nvarchar(MAX)
							  ,ShortDisplayNameUser nvarchar(MAX)
							  ,LDisplayNameUser nvarchar(MAX)
							  ,ShortLDisplayNameUser nvarchar(MAX)
							  ,NumberUserWRK nvarchar(MAX)
							  ,ProductQuantitySumm int
							  ,RelatedProductQuantitySumm int
							  ,ServicesQuantity int
							  ,PrepaymentQuantity int
							  ,ProductTagPriceWithVAT decimal
							  ,RelatedProductTagPriceWithVAT decimal
							  ,ServicesAmount decimal
							  ,PrepaymentAmount decimal
							  ,ProductSalePriceWithVAT decimal
							  ,RelatedProductSalePriceWithVAT decimal
							  ,ProductTagPriceWithOutVAT decimal
							  ,RelatedProductTagPriceWithOutVAT	 decimal
							  ,SummaAmount decimal
							  ,ScrapDocumentAmount decimal
							  ,CurrencyShortDescription  nvarchar(MAX)
							  ,CurrencyLongDescription nvarchar(MAX)
							  ,CodeCurrency int		
				)
				insert into #SaleDocument exec xp_GetSaleDocumentTable @p_TypeScreen='Grid',  @p_search=@p_search, @p_ID=@p_DocumentID, @p_FromDateSyncDate ='01.01.1753 0:00:10', @p_ToDateSyncDate='11.02.2022 11:53:41', @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '11.02.2022 11:53:41', @p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_Type='9|6',@p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max , @p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max, @p_PageNumber=@p_PageNumber, @p_PagerowCount=@p_PagerowCount, @p_SortColumn=@p_SortColumn, @p_Sort=@p_Sort
				--Select * from #SaleDocument

				insert into #Document
				select DocumentNumber, SyncDate from #SaleDocument	
				select * from #Document			
	end

	if (@p_Command=1) begin --ScrapDodument
			Create Table #ScrapDocument(
							   RowNumber int
							  ,ID int
							  ,Type int
							  ,Status int
							  ,SyncDate datetime
							  ,ScrapDocumentNumber bigint		  
							  ,RegisterID int
							  ,VendorID int
							  ,CreatedDate datetime
							  ,LastModifiedDate datetime
							  ,CreatedByUserID int
							  ,LastModifiedByUserID int
							  ,UserID nvarchar (MAX)
							  ,DisplayNameUser nvarchar (MAX)
							  ,ShortDisplayNameUser nvarchar (MAX)
							  ,QuantitySumm decimal
							  ,WeightSumm decimal
							  ,SummaSumm decimal)

				insert into #ScrapDocument 
				exec xp_GetScrapDocumentTable @p_TypeScreen='Grid',  @p_search=@p_search, @p_ID = 0, @p_DocumentNumber=@p_DocumentID,  @p_RegisterID=0, @p_CreatedByUserID='All', @p_Status='2|3|4|5|6|7|8|9', @p_Type='All', @p_DateFrom='01.01.1753 0:00:10', @p_DateTo= '01.01.1753 0:00:10', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max, @p_Weight_Min =0, @p_Weight_Max=100000000000, @p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max, @p_PageNumber=@p_PageNumber, @p_PagerowCount=@p_PagerowCount, @p_SortColumn=@p_SortColumn, @p_Sort=@p_Sort
				--Select * from #ScrapDocument

				insert into #Document
				select ScrapDocumentNumber, SyncDate from #ScrapDocument	
				select * from #Document			
	end

	if (@p_Command=2) begin --RegisterDocument
		Create Table #RegisterDocument(
							   RowNumber int							 
							  ,ID int
							  ,Status int
							  ,SyncDate datetime
							  ,ScrapDocumentNumber bigint	
							  ,CreatedDate datetime
							  ,LastModifiedDate datetime
							  ,CreatedByUserID int
							  ,LastModifiedByUserID int
							  ,UserID int
							  ,DisplayNameUser nvarchar (MAX)
							  ,ShortDisplayNameUser nvarchar (MAX)
							  ,QuantitySumm decimal
							  ,WeightSumm decimal
							  ,SummaSumm decimal
							  ,QuantityDocumentSumm decimal)
							  
					-- @p_FromDateSyncDate =@p_FromDateSyncDate, @p_ToDateSyncDate=@p_ToDateSyncDate,
				insert into #RegisterDocument exec xp_GetRegisterTable @p_TypeScreen='Grid',  @p_search=@p_search, @p_ID=@p_DocumentID, @p_UserName='All', @p_Status='All', @p_DateFrom='01.01.1753 0:00:10', @p_DateTo= '01.01.1753 0:00:10', @p_QuantityInvoiceSumm_Min=@p_Quantity_Min ,@p_QuantityInvoiceSumm_Max=@p_Quantity_Max, @p_QuantityItemsSumm_Min =0, @p_QuantityItemsSumm_Max=10000000, @p_WeightSumm_Min =0, @p_WeightSumm_Max=10000000, @p_SummaSumm_Min=@p_TagPriceWithVAT_Min, @p_SummaSumm_Max=@p_TagPriceWithVAT_Max, @p_PageNumber=@p_PageNumber, @p_PagerowCount=@p_PagerowCount, @p_SortColumn=@p_SortColumn, @p_Sort=@p_Sort
				--Select * from #RegisterDocument

				insert into #Document1
				select  ScrapDocumentNumber, SyncDate from #RegisterDocument	
				select * from #Document1	
	end 
	
	if (@p_Command=3) begin --RevaluationDocument
		Create Table #RevaluationDocument(
							   RowNumber int							 
							  ,ID int
							  ,ReffID int
							  ,ReffDate datetime
							  ,SyncDate datetime
							  ,Description nvarchar (MAX)
							  ,Reason nvarchar (MAX)
							  ,Status int
							  ,CreatedDate datetime
							  ,LastModifiedDate datetime
							  ,CreatedByUserID int
							  ,LastModifiedByUserID int
							  ,UserID int
							  ,LUserID int
							  ,DisplayNameUser nvarchar (MAX)
							  ,ShortDisplayNameUser nvarchar (MAX)
							  ,LDisplayNameUser nvarchar (MAX)
							  ,ShortLDisplayNameUser nvarchar (MAX)
							  ,QuantitySumm decimal)
				
				insert into #RevaluationDocument 
				exec xp_GetRevaluationDocumentTable @p_TypeScreen='Grid',  @p_search=@p_search, @p_ID=@p_DocumentID, @p_FromDateRefDate ='01.01.1753 0:00:10', @p_ToDateRefDate='01.01.1753 0:00:10' , @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '01.01.1753 0:00:10' , @p_FromDateCreatedDate='01.01.1753 0:00:10', @p_ToDateCreatedDate= '01.01.1753 0:00:10', @p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_Status='All', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max, @p_PagerowCount=@p_PagerowCount, @p_SortColumn=@p_SortColumn, @p_Sort=@p_Sort
				--Select * from #RevaluationDocument

				insert into #Document1
				select  ReffID, SyncDate  from #RevaluationDocument	
				select * from #Document1	
	end 

	if (@p_Command=4) begin --#TransferDocument
		Create Table #TransferDocument(
							   RowNumber int							 
							  ,ID int
							  ,SyncDate datetime
							  ,SenderID int
							  ,ReceiverID int
							  ,Type int
							  ,Contract nvarchar (MAX)
							  ,Status int
							  ,TransferDocumentNumber bigint
							  ,CreatedDate datetime
							  ,LastModifiedDate datetime
							  ,CreatedByUserID int
							  ,LastModifiedByUserID int
							  ,UserID int
							  ,LUserID int
							  ,SenderDescription nvarchar (MAX)
							  ,ReceiverDescription nvarchar (MAX)
							  ,DisplayNameUser nvarchar (MAX)
							  ,ShortDisplayNameUser nvarchar (MAX)
							  ,LDisplayNameUser nvarchar (MAX)
							  ,ShortLDisplayNameUser nvarchar (MAX)
							  ,QuantitySumm decimal
							  ,WeightSumm decimal
							  ,SummaSumm decimal)
							 
	
				insert into #TransferDocument 
				exec xp_GetTransferDocumentTable @p_TypeScreen='Grid',  @p_search=@p_search, @p_ID=0, @p_FromDateRefDate ='01.01.1753 0:00:10', @p_ToDateRefDate='01.01.1753 0:00:10', @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '01.01.1753 0:00:10', @p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_SenderID='All', @p_ReceiverID='All', @p_Type='All', @p_Status='1|2|3|4|5|6|7|8|9', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max, @p_Weight_Min =0, @p_Weight_Max=10000000000,@p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max, @p_TagPriceWithOutVAT_Min=0,@p_TagPriceWithOutVAT_Max=10000000000, @p_PageNumber=@p_PageNumber,@p_PagerowCount=@p_PagerowCount,@p_SortColumn=@p_SortColumn, @p_Sort=@p_Sort
				--Select * from #TransferDocument

				insert into #Document
				select  TransferDocumentNumber, SyncDate  from #TransferDocument
				select * from #Document	
	end 

	if (@p_Command=5) begin --TransferRelatedDocument
		Create Table #TransferRelatedDocument(
							   RowNumber int							 
							  ,ID int
							  ,SyncDate datetime
							  ,SenderID int
							  ,ReceiverID int							 
							  ,Contract nvarchar (MAX)
							  ,Status int
							  ,DocumentNumber bigint
							  ,CreatedDate datetime
							  ,LastModifiedDate datetime
							  ,CreatedByUserID int
							  ,LastModifiedByUserID int
							  ,UserID int
							  ,LUserID int

							  ,SenderDescription nvarchar (MAX)
							  ,ReceiverDescription nvarchar (MAX)
							  ,DisplayNameUser nvarchar (MAX)
							  ,ShortDisplayNameUser nvarchar (MAX)
							  ,LDisplayNameUser nvarchar (MAX)
							  ,ShortLDisplayNameUser nvarchar (MAX)
							  ,QuantitySumm decimal
							  ,SummaTagPriceWithVat decimal
							  ,SummaUnitPrice decimal
							  ,SummaUnitPriceQuantity decimal)
				
				insert into #TransferRelatedDocument 
				exec xp_GetTransferRelatedDocumentTable @p_TypeScreen='Grid',  @p_search=@p_search, @p_ID=0, @p_FromDateSyncDate ='01.01.1753 0:00:10', @p_ToDateSyncDate='01.01.1753 0:00:10', @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '01.01.1753 0:00:10', @p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_SenderID='All', @p_ReceiverID='All', @p_Status='1|2|3|4|5|6|7|8|9', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max, @p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max, @p_PageNumber=@p_PageNumber,@p_PagerowCount=@p_PagerowCount,@p_SortColumn=@p_SortColumn, @p_Sort=@p_Sort
				--Select * from #TransferRelatedDocument

				insert into #Document
				select  DocumentNumber, SyncDate   from #TransferRelatedDocument	
				select * from #Document	
	end 
	--select * from @p 
	-- select * from [RefreshInfo]
END


   --             case "":
   --                 Document.Command = 5;
   --                 break; 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- xp_GetRefreshInfoMassSummary 1,'', 0, 100000000, 0, 100000000, 0, 20, 'SyncDate', 1
-- xp_GetRefreshInfoMassSummary 66, 0, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRefreshInfoMassSummary]	
	@p_Command int,
	@p_search nvarchar(40)='',

	@p_Quantity_Min int = 0,
	@p_Quantity_Max int = 0,
	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	Create Table #Document(					
					SummaryQuantityLine int,
					SummaryQuantity int,
					SummaryTagPrice decimal,
					SummaSumm decimal
		)

	if (@p_Command=0) begin --SaleDocument
		Create table #SaleDocument(
					SummaryQuantityLine int,
					ProductSummaryQuantity decimal,
					RelatedProductSummaryQuantity decimal,
					PrepaymentQuantity decimal,
					ServicesQuantity decimal,

					ProductSummaryTagPriceWithVAT decimal,
					RelatedProductSummaryTagPriceWithVAT decimal,
					ServicesSummaryAmount decimal,
					PrepaymentSummaryAmount decimal,

					ProductSummarySalePriceWithVAT decimal,
					RelatedProductSummarySalePriceWithVAT decimal,					
					
					SummaSummaryAmount decimal,

					ScrapDocumentQuantity decimal,
					SummaScrapDocument decimal
				)
				
				insert into #SaleDocument exec xp_GetSaleDocumentSummary @p_search=@p_search, @p_FromDateSyncDate ='01.01.1753 0:00:10', @p_ToDateSyncDate='01.01.1753 0:00:10', @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '01.01.1753 0:00:10', @p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_Type='9|6',@p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max , @p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max
				--Select * from #SaleDocument	
				insert into #Document
				select SummaryQuantityLine, (ProductSummaryQuantity+RelatedProductSummaryQuantity+PrepaymentQuantity+ServicesQuantity) as SummaryQuantity, (ProductSummarySalePriceWithVAT+RelatedProductSummarySalePriceWithVAT+ServicesSummaryAmount+PrepaymentSummaryAmount) as SummaryTagPrice, SummaSummaryAmount from #SaleDocument	
				select * from #Document	
	end

	if (@p_Command=1) begin --ScrapDodument
			Create Table #ScrapDocument(
							   CountID int
							  ,QuantitySumm int							 
							  ,WeightSumm decimal							 
							  ,SummaSumm decimal)
							
				insert into #ScrapDocument 
				exec xp_GetScrapDocumentSummary @p_search=@p_search, @p_CreatedByUserID='All', @p_Status='2|3|4|5|6|7|8|9', @p_Type='All', @p_DateFrom='01.01.1753 0:00:10', @p_DateTo= '01.01.1753 0:00:10', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max, @p_Weight_Min =0, @p_Weight_Max=100000000000, @p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max
				--Select * from #ScrapDocument

				insert into #Document
				select CountID, QuantitySumm,WeightSumm, SummaSumm  from #ScrapDocument	
				select * from #Document			
	end

	if (@p_Command=2) begin --RegisterDocument
		Create Table #RegisterDocument(
							  SummaryQuantityLine int,
							  SummaryDocumentQuantity int,
							  SummaryQuantity int,
							  SummaryWeigth decimal,
							  SummarySumma decimal)					
					
				insert into #RegisterDocument 
				exec xp_GetRegisterSummary @p_search=@p_search, @p_UserName='All', @p_Status='All',	@p_QuantityInvoiceSumm_Min=@p_Quantity_Min ,@p_QuantityInvoiceSumm_Max=@p_Quantity_Max, @p_QuantityItemsSumm_Min =0, @p_QuantityItemsSumm_Max=10000000, @p_WeightSumm_Min =0, @p_WeightSumm_Max=100000000000000, @p_SummaSumm_Min=@p_TagPriceWithVAT_Min, @p_SummaSumm_Max=@p_TagPriceWithVAT_Max, @p_DateFrom='01.01.1753 0:00:10', @p_DateTo= '01.01.1753 0:00:10'
				--Select * from #RegisterDocument

				insert into #Document
				select  SummaryQuantityLine, SummaryQuantity,SummaryWeigth, SummarySumma  from #RegisterDocument	
				select * from #Document	
	end 
	
	if (@p_Command=3) begin --RevaluationDocument
		Create Table #RevaluationDocument(
							   DocumentCount int							 
							  ,DocumentSummaryQuantity decimal)
				
				insert into #RevaluationDocument 
				exec xp_GetRevaluationDocumentSummary   @p_search=@p_search,  @p_FromDateRefDate ='01.01.1753 0:00:10', @p_ToDateRefDate='01.01.1753 0:00:10', @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '01.01.1753 0:00:10', @p_FromDateCreatedDate='01.01.1753 0:00:10', @p_ToDateCreatedDate= '01.01.1753 0:00:10', @p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_Status='All', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max
				--Select * from #RevaluationDocument

				insert into #Document
				select  DocumentCount,0,0, DocumentSummaryQuantity  from #RevaluationDocument	
				select * from #Document	
	end 

	if (@p_Command=4) begin --#TransferDocument 
		Create Table #TransferDocument(
							   CountID int							 
							  ,SummaryQuantity int
							  ,SummaryWeigth decimal
							  ,SummarySumma decimal)
				insert into #TransferDocument 
				exec xp_GetTransferDocumentSummary @p_search=@p_search, @p_FromDateRefDate ='01.01.1753 0:00:10', @p_ToDateRefDate='01.01.1753 0:00:10', @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '01.01.1753 0:00:10', @p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_SenderID='All', @p_ReceiverID='All', @p_Type='All', @p_Status='1|2|3|4|5|6|7|8|9', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max, @p_Weight_Min =0, @p_Weight_Max=10000000000,@p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max, @p_TagPriceWithOutVAT_Min=0,@p_TagPriceWithOutVAT_Max=10000000000
				--Select * from #TransferDocument

				insert into #Document
				select  CountID, SummaryQuantity,SummaryWeigth, SummarySumma  from #TransferDocument
				select * from #Document	
	end 

	if (@p_Command=5) begin --TransferRelatedDocument
		Create Table #TransferRelatedDocument(
							   SummaryTransferDocumentCount int							 
							  ,SummaryQuantity int
							  ,SummaryTagPriceWithVat decimal
							  ,SummaryUnitPrice decimal)
				insert into #TransferRelatedDocument 
				exec xp_GetTransferRelatedDocumentSummary @p_search=@p_search, @p_FromDateSyncDate ='01.01.1753 0:00:10', @p_ToDateSyncDate='01.01.1753 0:00:10', @p_FromDateLastModifiedDate='01.01.1753 0:00:10', @p_ToDateLastModifiedDate= '01.01.1753 0:00:10',@p_CreatedByUserID='All', @p_LastModifiedByUserID='All', @p_SenderID='All', @p_ReceiverID='All', @p_Status='1|2|3|4|5|6|7|8|9', @p_Quantity_Min=@p_Quantity_Min ,@p_Quantity_Max=@p_Quantity_Max, @p_TagPriceWithVAT_Min=@p_TagPriceWithVAT_Min, @p_TagPriceWithVAT_Max=@p_TagPriceWithVAT_Max
				--Select * from #TransferRelatedDocument

				insert into #Document
				select  SummaryTransferDocumentCount, SummaryQuantity,SummaryTagPriceWithVat, SummaryUnitPrice from #TransferRelatedDocument	
				select * from #Document	
	end 
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Регистр документов, сборка фильтров
-- =============================================
-- xp_GetRegisterFilters_20210216172933
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRegisterFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_Users nvarchar(MAX)='',
		@p_DocumentQuantityMin int = 0,
		@p_DocumentQuantityMax int = 0,
		@p_QuantityItemsSummMin int = 0,
		@p_QuantityItemsSummMax int = 0,
		@p_WeightSummMin money = 0,
		@p_WeightSummMax money = 0,
		@p_SummaSummMin money = 0,
		@p_SummaSummMax money = 0

	--Users
-------------------------------------------------------------------
	SELECT
		@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[CreatedByUserID] as [ID]
					,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
				FROM [dbo].[Register] p
					inner join Users u on u.ID = p.[CreatedByUserID]
		) as Temp
	IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

	--DocumentQuantityMin DocumentQuantityMax
-------------------------------------------------------------------
	SELECT @p_DocumentQuantityMin=MIN(qds.QuantityDocumentID), @p_DocumentQuantityMax=MAX(qds.QuantityDocumentID)
	FROM (
		SELECT (
					CASE WHEN sdoc.RegisterID=0
						THEN 0
						ELSE COUNT(IsNull(IsNull(sdoc.RegisterID,0),0))
					END
				) as QuantityDocumentID from ScrapDocument sdoc
			left join [dbo].[Register] as reg ON reg.ID=sdoc.RegisterID
		GROUP BY sdoc.[RegisterID]
	) as qds


	--QuantityItemsSummMin QuantityItemsSummMax
-------------------------------------------------------------------
	SELECT @p_QuantityItemsSummMin=MIN(qis.QuantitySumm), @p_QuantityItemsSummMax=MAX(qis.QuantitySumm)  FROM
	(SELECT
		(SELECT IsNull(Sum(IsNull([Quantity],0)),0) from  [dbo].[ScrapDocumentDetails] sdet
			left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
			left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID]
		) as QuantitySumm
	FROM [dbo].[Register] as p) as qis

	--WeightSummMin WeightSummMax
-------------------------------------------------------------------
	SELECT @p_WeightSummMin = MIN(ws.WeightSumm), @p_WeightSummMax = MAX(ws.WeightSumm)  FROM (SELECT
		(SELECT IsNull(Sum(IsNull([Weight],0)),0) from [dbo].[ScrapDocumentDetails] sdet
		left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
		left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID]) as WeightSumm
	FROM [dbo].[Register] as p) as ws

	--SummaSummMin SummaSummMax
-------------------------------------------------------------------
	SELECT @p_SummaSummMin=MIN(ss.SummaSumm), @p_SummaSummMax=MAX(ss.SummaSumm) FROM (SELECT
		(SELECT IsNull(Sum(IsNull([Summa],0)),0) from [dbo].[ScrapDocumentDetails] sdet
		left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
		left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID]) as SummaSumm
	FROM [dbo].[Register] as p) as ss

	--Out Final Result
-------------------------------------------------------------------
	SELECT 	@p_Users as Users,
			@p_DocumentQuantityMin as DocumentQuantityMin,
			@p_DocumentQuantityMax as DocumentQuantityMax,
			@p_QuantityItemsSummMin as QuantityItemsSummMin,
			@p_QuantityItemsSummMax as QuantityItemsSummMax,
			@p_WeightSummMin as WeightSummMin,
			@p_WeightSummMax as WeightSummMax,
			@p_SummaSummMin as SummaSummMin,
			@p_SummaSummMax as SummaSummMax
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Регистр документов, подсчет сумм
-- =============================================
-- xp_GetRegisterSummary_20210216172933 '','All','All',0,1000000,0,10000000,0,10000000,0,10000000,'1753-01-01 00:00:10','2021-06-01 13:58:00'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRegisterSummary]
	@p_search nvarchar(40)='',
	@p_UserName nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',
	@p_QuantityInvoiceSumm_Min int = 0,
	@p_QuantityInvoiceSumm_Max int = 0,
	@p_QuantityItemsSumm_Min int = 0,
	@p_QuantityItemsSumm_Max int = 0,
	@p_WeightSumm_Min money = 0,
	@p_WeightSumm_Max money = 0,
	@p_SummaSumm_Min money = 0,
	@p_SummaSumm_Max money = 0,
	@p_DateFrom datetime,
	@p_DateTo datetime

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;

		declare @p_search_string nvarchar(40)
		declare @delimeter nvarchar(10)= '''|'''
		declare @filter_all nvarchar(10)= '''All'''
		declare @p_search_user nvarchar(MAX) = ''
		declare @p_search_request nvarchar(MAX) = ''
		declare @p_search_status nvarchar(MAX) = ''
		declare @end_request nvarchar(max) = ''

		declare @p_QuantityInvoiceSumm_Min_string nvarchar(255) = CAST(@p_QuantityInvoiceSumm_Min AS nvarchar)
		declare @p_QuantityInvoiceSumm_Max_string nvarchar(255) = CAST(@p_QuantityInvoiceSumm_Max AS nvarchar) 
		declare @p_QuantityItemsSumm_Min_string nvarchar(255) = CAST(@p_QuantityItemsSumm_Min AS nvarchar) 
		declare @p_QuantityItemsSumm_Max_string nvarchar(255) = CAST(@p_QuantityItemsSumm_Max AS nvarchar) 
		declare @p_SummaSumm_Min_string nvarchar(255) = convert(nvarchar(40),@p_SummaSumm_Min,126 ) 
		declare @p_SummaSumm_Max_string nvarchar(255) = convert(nvarchar(40),@p_SummaSumm_Max,126 ) 
		declare @p_WeightSumm_Min_string nvarchar(255) = convert(nvarchar(40),@p_WeightSumm_Min,126 ) 
		declare @p_WeightSumm_Max_string nvarchar(255) = convert(nvarchar(40),@p_WeightSumm_Max,126 ) 

		declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
		declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

		declare @p_QuantitySumm nvarchar(MAX) = ''
		declare @p_QuantityDocumentSumm nvarchar(MAX) = ''
		declare @p_SummaSumm nvarchar(MAX) = ''
		declare @p_WeightSumm nvarchar(MAX) = ''

		declare @p_request_QuantityDocumentSumm nvarchar(MAX) = ''
		declare @p_request_QuantitySumm nvarchar(MAX) = ''
		declare @p_request_SummaSumm nvarchar(MAX) = ''
		declare @p_request_WeightSumm nvarchar(MAX) = ''
		declare @p_request_CreatedDate nvarchar(MAX) = ''
		declare @p_filter_request nvarchar(MAX) = ''

		if (@p_Status = '' or @p_UserName = '')
			return

		set @p_Status = REPLACE(@p_Status, '|', ',');
		set @p_UserName = REPLACE(@p_UserName, '|', ',')

		set @p_search_string='%' + @p_search + '%'
		
		set @p_QuantitySumm ='(SELECT IsNull(SUM(IsNull([Quantity],0)),0) from 
											[dbo].[ScrapDocumentDetails] sdet
											left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
											left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID])'

		set @p_SummaSumm ='(SELECT CAST(IsNull(SUM(IsNull([Summa],0)),0) AS money) from [dbo].[ScrapDocumentDetails] sdet
											left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
											left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID])'

		set @p_WeightSumm ='(SELECT CAST(IsNull(SUM(IsNull([Weight],0)),0) AS money) from [dbo].[ScrapDocumentDetails] sdet
											left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
											left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID])'

		set @p_QuantityDocumentSumm ='(SELECT IsNull(COUNT(IsNull(ID,0)),0) from ScrapDocument as sdoc WHERE sdoc.RegisterID=p.[ID])'

		set @p_request_QuantityDocumentSumm = '( ( ' + @p_QuantityDocumentSumm + ' >= ' +  @p_QuantityInvoiceSumm_Min_string + ' AND '
											+ @p_QuantityDocumentSumm + ' <= '+  @p_QuantityInvoiceSumm_Max_string + ') )'

		set @p_request_QuantitySumm = ' and ( ( ' + @p_QuantitySumm + ' >= ' +  @p_QuantityItemsSumm_Min_string + ' AND '
											+ @p_QuantitySumm + ' <= '+  @p_QuantityItemsSumm_Max_string + ') )'

		set @p_request_SummaSumm = ' and ( ( ' + @p_SummaSumm + ' >= ' +  @p_SummaSumm_Min_string + ' AND '
											+ @p_SummaSumm + ' <= '+  @p_SummaSumm_Max_string + ') )'

		set @p_request_WeightSumm = ' and ( ( ' + @p_WeightSumm + ' >= ' +  @p_WeightSumm_Min_string + ' AND '
											+ @p_WeightSumm + ' <= '+  @p_WeightSumm_Max_string + ') )'

		if (@DateFrom_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_request_CreatedDate =  		
				' and (
					CONVERT(date,p.CreatedDate) BETWEEN ''' + @DateFrom_string + ''' AND ''' + @DateTo_string + '''				
				)'	
			end
		
		set @p_filter_request = @p_request_QuantityDocumentSumm + @p_request_QuantitySumm + @p_request_SummaSumm + @p_request_WeightSumm 
		set @p_filter_request = @p_filter_request + @p_request_CreatedDate

		if (@p_search != '')
		set @p_search_request = ' and 
			(
				(
					(
						cast(p.[ScrapRegisterNumber] as nvarchar(40)) like ''' + @p_search_string + '''
					)				
				)
			)'

		if (@p_UserName != 'All')
			set @p_search_user = ' and p.[CreatedByUserID] in (' + @p_UserName + ') ' ;
		if (@p_Status != 'All')
			set @p_search_status=' and p.[Status] in (' + @p_Status + ') ' ;

		set @p_filter_request = @p_filter_request + @p_search_request + @p_search_status + @p_search_user 
		
		set @end_request = 
		'SELECT
			COUNT(st.[ID]) as SummaryQuantityLine,
			SUM(QuantityDocumentSumm) as SummaryDocumentQuantity,
			SUM(QuantitySumm) as SummaryQuantity,
			SUM(WeightSumm) as SummaryWeigth,
			SUM(SummaSumm) as SummarySumma
					FROM (
						   SELECT
							  p.[ID]
							  ,p.[Status]
							  ,p.[SyncDate]
							  ,p.[ScrapRegisterNumber]
							  ,p.[CreatedDate]
							  ,' + @p_QuantitySumm + ' as QuantitySumm
							  ,' + @p_WeightSumm + ' as WeightSumm
							  ,' + @p_SummaSumm + ' as SummaSumm
							  ,' + @p_QuantityDocumentSumm + ' as QuantityDocumentSumm
						  FROM [dbo].[Register] as p
								left join dbo.Users u on u.[ID]=p.[CreatedByUserID] where '
							+ @p_filter_request
							+ ' ) AS st'
		--print @end_request
		EXECUTE (@end_request);
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Регистр документов, результирующая грида
-- =============================================
-- xp_GetRegisterTable_20210216172933 'Item','', 0,0,'','','','','','','',''
-- xp_GetRegisterTable_20210216172933 'Grid','',0,'All','All','ID',0,10000000,0,10000000,0,10000000,0,10000000,'1900-01-01 00:00:10','2020-11-01 13:58:00',0,13000000,0
-- xp_GetRegisterTable_20210216172933 'Grid','',0,'All','All','ID',1,3,0,10000000,0,10000000,0,10000000,'1900-01-01 00:00:10','2020-11-01 13:58:00',0,13000000,0
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRegisterTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter
	@p_search nvarchar(40)='',
	@p_ID int,	
	@p_UserName nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',
	@p_SortColumn nvarchar(MAX)='',
	@p_QuantityInvoiceSumm_Min int = 0,
	@p_QuantityInvoiceSumm_Max int = 0,
	@p_QuantityItemsSumm_Min int = 0,
	@p_QuantityItemsSumm_Max int = 0,
	@p_WeightSumm_Min money = 0,
	@p_WeightSumm_Max money = 0,
	@p_SummaSumm_Min money = 0,
	@p_SummaSumm_Max money = 0,
	@p_DateFrom datetime,
	@p_DateTo datetime,
	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''
	declare @p_MaxValue int = 0
	declare @p_MinValue int = 0

	declare @p_QuantityInvoiceSumm_Min_string nvarchar(255) = CAST(@p_QuantityInvoiceSumm_Min AS nvarchar)
	declare @p_QuantityInvoiceSumm_Max_string nvarchar(255) = CAST(@p_QuantityInvoiceSumm_Max AS nvarchar) 
	declare @p_QuantityItemsSumm_Min_string nvarchar(255) = CAST(@p_QuantityItemsSumm_Min AS nvarchar) 
	declare @p_QuantityItemsSumm_Max_string nvarchar(255) = CAST(@p_QuantityItemsSumm_Max AS nvarchar) 
	declare @p_SummaSumm_Min_string nvarchar(255) = convert(nvarchar(40),@p_SummaSumm_Min,126 ) 
	declare @p_SummaSumm_Max_string nvarchar(255) = convert(nvarchar(40),@p_SummaSumm_Max,126 ) 
	declare @p_WeightSumm_Min_string nvarchar(255) = convert(nvarchar(40),@p_WeightSumm_Min,126 ) 
	declare @p_WeightSumm_Max_string nvarchar(255) = convert(nvarchar(40),@p_WeightSumm_Max,126 ) 

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

	declare @p_search_user nvarchar(MAX) = ''
	declare @p_search_request nvarchar(MAX) = ''
	declare @p_search_status nvarchar(MAX) = ''

	declare @p_QuantitySumm nvarchar(MAX)=''
	declare @p_QuantityDocumentSumm nvarchar(MAX)=''
	declare @p_SummaSumm nvarchar(MAX)=''
	declare @p_WeightSumm nvarchar(MAX)=''

	declare @p_request_QuantityDocumentSumm nvarchar(MAX)=''
	declare @p_request_QuantitySumm nvarchar(MAX)=''
	declare @p_request_SummaSumm nvarchar(MAX)=''
	declare @p_request_WeightSumm nvarchar(MAX)=''
	declare @p_request_CreatedDate nvarchar(MAX)=''
	declare @p_filter_request nvarchar(MAX) = ''

	declare @end_request nvarchar(max) = ''

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT s.[ID]
			  ,s.[Status]
			  ,s.[SyncDate]
			  ,s.[ScrapRegisterNumber]
			  ,s.[CreatedDate]
			  ,s.[LastModifiedDate]
			  ,s.[CreatedByUserID]
			  ,s.[LastModifiedByUserID]
		  FROM [dbo].[Register] s
		where s.ID=@p_ID
	end
	
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

		if (@p_Status = '' or @p_UserName = '')
			return

		set @p_Status = REPLACE(@p_Status, '|', ',');
		set @p_UserName = REPLACE(@p_UserName, '|', ',')

		set @p_search_string='%' + @p_search + '%'
		
		set @p_QuantitySumm ='(SELECT IsNull(SUM(IsNull([Quantity],0)),0) from 
											[dbo].[ScrapDocumentDetails] sdet
											left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
											left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID])'

		set @p_SummaSumm ='(SELECT CAST(IsNull(SUM(IsNull([Summa],0)),0) AS money) from [dbo].[ScrapDocumentDetails] sdet
											left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
											left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID])'

		set @p_WeightSumm ='(SELECT CAST(IsNull(SUM(IsNull([Weight],0)),0) AS money) from [dbo].[ScrapDocumentDetails] sdet
											left join ScrapDocument sdoc on sdoc.ID = sdet.DocumentID
											left join Register reg on reg.ID = sdoc.RegisterID WHERE reg.ID=p.[ID])'

		set @p_QuantityDocumentSumm ='(SELECT IsNull(COUNT(IsNull(ID,0)),0) from ScrapDocument as sdoc WHERE sdoc.RegisterID=p.[ID])'

		set @p_request_QuantityDocumentSumm = '( ( ' + @p_QuantityDocumentSumm + ' >= ' +  @p_QuantityInvoiceSumm_Min_string + ' AND '
											+ @p_QuantityDocumentSumm + ' <= '+  @p_QuantityInvoiceSumm_Max_string + ') )'

		set @p_request_QuantitySumm = ' and ( ( ' + @p_QuantitySumm + ' >= ' +  @p_QuantityItemsSumm_Min_string + ' AND '
											+ @p_QuantitySumm + ' <= '+  @p_QuantityItemsSumm_Max_string + ') )'

		set @p_request_SummaSumm = ' and ( ( ' + @p_SummaSumm + ' >= ' +  @p_SummaSumm_Min_string + ' AND '
											+ @p_SummaSumm + ' <= '+  @p_SummaSumm_Max_string + ') )'

		set @p_request_WeightSumm = ' and ( ( ' + @p_WeightSumm + ' >= ' +  @p_WeightSumm_Min_string + ' AND '
											+ @p_WeightSumm + ' <= '+  @p_WeightSumm_Max_string + ') )'

		if (@DateFrom_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_request_CreatedDate =  		
				' and (
					CONVERT(date,p.CreatedDate) BETWEEN ''' + @DateFrom_string + ''' AND ''' + @DateTo_string + '''				
				)'	
			end
		
		set @p_filter_request = @p_request_QuantityDocumentSumm + @p_request_QuantitySumm + @p_request_SummaSumm + @p_request_WeightSumm 
		set @p_filter_request = @p_filter_request + @p_request_CreatedDate

		if (@p_search != '')
		set @p_search_request = ' and 
			(
				(
					(
						cast(p.[ScrapRegisterNumber] as nvarchar(40)) like ''' + @p_search_string + '''
					)				
				)
			)'

		if (@p_UserName != 'All')
			set @p_search_user = ' and p.[CreatedByUserID] in (' + @p_UserName + ') ' ;
		if (@p_Status != 'All')
			set @p_search_status=' and p.[Status] in (' + @p_Status + ') ' ;

		set @p_filter_request = @p_filter_request + @p_search_request + @p_search_status + @p_search_user 

		SET @p_SortColumn = CASE @p_SortColumn
			WHEN 'QuantitySumm' THEN @p_QuantitySumm
			WHEN 'WeightSumm' THEN @p_WeightSumm
			WHEN 'SummaSumm' THEN @p_SummaSumm
			WHEN 'QuantityDocumentSumm' THEN @p_QuantityDocumentSumm
			WHEN 'DisplayUserName' THEN 'Concat(u.[LastName],'' '',u.[FirstName],'' '',u.[SecondName])'
			ELSE 'p.'+ @p_SortColumn
		END

		set @end_request = 
		'SELECT *
					FROM (
						   SELECT
							  ROW_NUMBER() OVER (order by ' + @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,p.[ID]
							  ,p.[Status]
							  ,p.[SyncDate]
							  ,p.[ScrapRegisterNumber]
							  ,p.[CreatedDate]
							  ,p.[LastModifiedDate]
							  ,p.[CreatedByUserID]
							  ,p.[LastModifiedByUserID]
							  ,u.ID as UserID
							  ,Concat(u.[LastName],'' '',u.[FirstName],'' '',u.[SecondName]) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,' + @p_QuantitySumm +' as QuantitySumm
							  ,' + @p_WeightSumm + ' as WeightSumm
							  ,' + @p_SummaSumm + ' as SummaSumm
							  ,' + @p_QuantityDocumentSumm + ' as QuantityDocumentSumm
						  FROM [dbo].[Register] as p
								left join dbo.Users u on u.[ID]=p.[CreatedByUserID] where '
								+ @p_filter_request
					+ ' ) AS st
		where ( st.RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar) + ') '+'order by st.RowNumber asc'

	--	select @end_request
		EXECUTE (@end_request);
	end

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки сопутствующих товаров, детали
-- =============================================
-- xp_GetRelatedProductDocumentDetails 'name', 862, '2021-02-10 16:12:26.410'

-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductDocumentDetails]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter	
	@p_DocumentID int,
	@p_ReffDate datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)
			
	if @p_TypeScreen in ('name') begin ---------------------------------------------------------------------
		SELECT dd.[ID]
				,dd.[DocumentID]
				,dd.[ReffDate]
				,dd.[LineDocument]
				,dd.[PartNumber]
				,dd.[Model]
				,dd.[Supplier]
				,mode.[Description] as ModelDescription
				,dd.[Quantity]
				,dd.[TagPriceWithVat]
				,dd.[TagPriceWithOutVat]
				,dd.[Currency]
				,dd.[CreatedData]
				,dd.[LastModifiedDate]
				,dd.[CreatedByUserID]
				,dd.[LastModifiedByUserID]
				,dd.[IsChecked]
				,cur.[ShortDescription] as CurrencyShortDescription
				,cur.[LongDescription] as CurrencyLongDescription
			FROM [dbo].[RelatedProductDocumentDetails] dd	
				left join dbo.[RelatedProductGuide] mode on mode.Model=dd.Model and mode.Supplier=dd.Supplier 
				left join [dbo].[Currency] cur on cur.Code=dd.Currency		  		
			where dd.[DocumentID] = @p_DocumentID
			order by dd.[LineDocument]
	end

	if @p_TypeScreen in ('grid') begin ---------------------------------------------------------------------
		SELECT dd.[ID]
				,dd.[DocumentID]
				,dd.[ReffDate]
				,dd.[LineDocument]
				,dd.[PartNumber]
				,dd.[Model]
				,dd.[Supplier]				
				,mode.[Description] as ModelDescription
				,dd.[Quantity]
				,dd.[TagPriceWithVat]
				,dd.[TagPriceWithOutVat]
				,dd.[Currency]
				,dd.[CreatedData]
				,dd.[LastModifiedDate]
				,dd.[CreatedByUserID]
				,dd.[LastModifiedByUserID]
				,dd.[IsChecked]
				,cur.[ShortDescription] as CurrencyShortDescription
				,cur.[LongDescription] as CurrencyLongDescription
			FROM [dbo].[RelatedProductDocumentDetails] dd	
				left join dbo.[RelatedProductGuide] mode on mode.Model=dd.Model and mode.Supplier=dd.Supplier 
				left join [dbo].[Currency] cur on cur.Code=dd.Currency		  		
			order by dd.[LineDocument]
	end
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки сопутствующих товаров, сборка фильтров
-- =============================================
-- xp_GetRelatedProductDocumentFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductDocumentFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_Users nvarchar(MAX)='',
		@p_SenderID nvarchar(MAX)='',
		@p_Status nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_Quantity_Min money = 0,
		@p_Quantity_Max money = 0,
		@p_TagPriceWithVAT_Min money = 0,
		@p_TagPriceWithVAT_Max money = 0

	--Users
-------------------------------------------------------------------
	SELECT
		@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[CreatedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[RelatedProductDocument] ua
					left join dbo.Users u on u.[ID]=ua.[CreatedByUserID]
		) as Temp
	IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

	--LastUsers
-------------------------------------------------------------------
	SELECT
		@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[LastModifiedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[RelatedProductDocument] ua
					left join dbo.Users u on u.[ID]=ua.[LastModifiedByUserID]
		) as Temp
	IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL

	--SenderID
-------------------------------------------------------------------
	SELECT
		@p_SenderID = CONCAT(@p_SenderID,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[SenderID] as [Id]
					,Concat(p.[SenderID],' ',ls.Description) as [Value]
				FROM [dbo].[RelatedProductDocument] p
					left join dbo.Location ls on ls.[ID]=p.[SenderID]
		) as Temp
	IF LEN(@p_SenderID) > 2 SET @p_SenderID = SUBSTRING(@p_SenderID,1, LEN(@p_SenderID)-1) ELSE SET @p_SenderID = NULL

	--Status
-------------------------------------------------------------------
	SELECT
		@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					[Status] as [Value]
				FROM [dbo].[RelatedProductDocument] rpd
		) as Temp

	--Quantity_Min Quantity_Max
-------------------------------------------------------------------
	SELECT @p_Quantity_Min=MIN(qs.QuantitySumm), @p_Quantity_Max=MAX(qs.QuantitySumm) FROM (
		SELECT (SELECT COUNT(*) from RelatedProductDocumentDetails doc WHERE doc.[DocumentID] = rpd.[ID] ) as QuantitySumm
	FROM [dbo].[RelatedProductDocument] as rpd) as qs

	--TagPriceWithVAT_Min TagPriceWithVAT_Max
-------------------------------------------------------------------
	SELECT @p_TagPriceWithVAT_Min=MIN(ss.SummaSumm), @p_TagPriceWithVAT_Max=MAX(ss.SummaSumm) FROM (
		SELECT (SELECT SUM(TagPriceWithVat) from RelatedProductDocumentDetails doc WHERE doc.[DocumentID] = rpd.[ID] ) as SummaSumm
	FROM [dbo].[RelatedProductDocument] as rpd) as ss

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Users as CreatedByUserID,
			@p_LastUsers as LastModifiedByUserID,
			@p_SenderID as SenderID,
			@p_Status as [Status],
		 	@p_Quantity_Min as QuantityMin,
			@p_Quantity_Max as QuantityMax,
			@p_TagPriceWithVAT_Min as TagPriceWithVATMin,
			@p_TagPriceWithVAT_Max as TagPriceWithVATMax
END

	
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки сопутствующих товаров, подсчет сумм
-- =============================================
-- xp_GetRelatedProductDocumentSummary '', '01.01.1753 0:00:10', '11.12.2022 11:53:41', '01.01.1753 0:00:10', '11.12.2020 11:53:41', 'All', 'All', 'All', 'All',  0, 5, 12000, 12000
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductDocumentSummary]
	@p_search nvarchar(40)='',

	@p_FromDateRefDate datetime, --от дата вход. документа
	@p_ToDateRefDate datetime, -- до дата входюдок
	@p_FromDateLastModifiedDate datetime, -- дата потвержд.
	@p_ToDateLastModifiedDate datetime,	-- до дата потвержд.

	@p_CreatedByUserID nvarchar(MAX)='',-- кто синхр.
	@p_LastModifiedByUserID nvarchar(MAX)='',-- кто потвердил
	@p_SenderID nvarchar(MAX)='',	-- кто послал.
	@p_Status nvarchar(MAX)='',	 -- статус 0 - черновикб 1- потверд.

	@p_Quantity_Min money = 0, -- до количеств.
	@p_Quantity_Max money = 0, -- от количеств

	@p_TagPriceWithVAT_Min money = 0, --от  общ. стоим.
	@p_TagPriceWithVAT_Max money = 0 -- до общ. стоим.
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';	
	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)
		
	if ( @p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = '')
			return
		
	set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
	set @p_search_string='%' + @p_search + '%'
		
	declare @p_search_status nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''		
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
	declare @p_search_senderID nvarchar(MAX) = ''

	declare @p_search_timeReffDate nvarchar(MAX) = ''	
	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

	declare @p_filter_request nvarchar(MAX) = ''	-- общий
				
	declare @p_filter_request_Quantity nvarchar(MAX) = ''	
	declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''

/*	@p_CreatedByUserID nvarchar(MAX)='',-- кто синхр.
	@p_LastModifiedByUserID nvarchar(MAX)='',-- кто потвердил
	@p_SenderID nvarchar(MAX)='',	-- кто послал.
	@p_Status nvarchar(MAX)='',	 -- статус 0 - черновикб 1- потверд.*/
	
	set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
	set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
	set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
	set @p_Status = REPLACE(@p_Status, '|', ',')
	
	set @p_filter_request_Quantity = ' 		
			(
				(
							
					(( (SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] )  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
					( (SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + '))
					or ((SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) is null)							
				) 					
			)'	
		
	if (@p_TagPriceWithVAT_Min != '' and  @p_TagPriceWithVAT_Max != '')
		set @p_filter_request_TagPriceWithVAT = 		 		
			' and (
				(
					(((SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] )  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
					((SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] )  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')) 
					or ((SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) is null) 
				) 					
			)'

	if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
		set @p_search_timeReffDate =  		
			' and (
				CONVERT(date, rpd.ReffDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''				
			)'		
	end

	if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
		set @p_search_timeLastModifiedDate =  		
			' and (
				CONVERT(date, rpd.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + ''' 				
			)'		
	end

	if( @p_TagPriceWithVAT_Min != '' and  @p_TagPriceWithVAT_Max != '' )
		set @p_filter_request =@p_filter_request_Quantity + @p_filter_request_TagPriceWithVAT 
	else
		set @p_filter_request =@p_filter_request_Quantity 
		
	if (@p_search_timeReffDate!='')
		set @p_filter_request = @p_filter_request + @p_search_timeReffDate
	if (@p_search_timeLastModifiedDate!='')
		set @p_filter_request = @p_filter_request  + @p_search_timeLastModifiedDate

	declare @p_search_request nvarchar(MAX) = ''
	if (@p_search != '')
		set @p_search_request = ' and 
		(
			(
				(
					cast(rpd.DocumentID as nvarchar(40)) like ''' + @p_search_money + ''' or
					(cast(rpd.ReffID as nvarchar(40)) like ''' + @p_search_money + ''' and rpd.Status > 0) or
					rpd.[Contract] like ''' + @p_search_string + '''
				)				
			)
		)'

	set @p_search_request = @p_filter_request + @p_search_request

	if (@p_Status != 'All')
		set @p_search_status = ' and rpd.[Status] in (' + @p_Status + ') ' ;
	if (@p_CreatedByUserID != 'All') 
		set @p_search_createdByUserID = ' and rpd.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
	if (@p_LastModifiedByUserID != 'All') 
		set @p_search_LastModifiedByUserID = ' and rpd.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;
	if (@p_SenderID != 'All') 
		set @p_search_SenderID = ' and rpd.[SenderID] in (' + @p_SenderID + ') ' ;

	set @p_search_request = @p_search_request + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID

	declare @end_request nvarchar(max) = ''
		
	set @end_request = 
	'SELECT
			COUNT(st.[ID]) as DocumentCount,
			SUM(SummarySumma) as DocumentSummarySumma
			FROM (
					SELECT
						rpd.ID							
		         		,(SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) as SummarySumma
					FROM [dbo].[RelatedProductDocument] rpd where '
			+ @p_search_request
			+')  AS st'
											
	--select @end_request
	EXECUTE (@end_request);
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки сопутствующих товаров, результирующая грида
-- =============================================
-- xp_GetRelatedProductDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:10', '2022-04-06 12:50:46.933', '01.01.1753 0:00:10', '2022-04-06 12:50:46.933', 'All', 'All', 'All', 'All', 0,5, 0, 12000, 0, 15, 'ID', 1
-- xp_GetRelatedProductDocumentTable 'Item', '', 125 , '01.01.1753 0:00:00', '2022-04-08 12:50:46.933', '01.01.1753 0:00:00', '2022-04-08 12:50:46.933', 'All', 'All', 'All', 'All', 0,20, 700, 30800, 0, 12, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductDocumentTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,

	@p_FromDateRefDate datetime, --от дата вход. документа
	@p_ToDateRefDate datetime, -- до дата вход.док
	@p_FromDateLastModifiedDate datetime, -- дата потвержд.
	@p_ToDateLastModifiedDate datetime,	-- до дата потвержд.

	@p_CreatedByUserID nvarchar(MAX)='',-- кто синхр.
	@p_LastModifiedByUserID nvarchar(MAX)='',-- кто потвердил
	@p_SenderID nvarchar(MAX)='',	-- кто послал.
	--@p_ReceiverID nvarchar(MAX)='',	
	--@p_Type nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',	 -- статус 0 - черновикб 1- потверд.

	@p_Quantity_Min money = 0, -- до количеств.
	@p_Quantity_Max money = 0, -- от количеств

	@p_TagPriceWithVAT_Min money = 0, --от  общ. стоим.
	@p_TagPriceWithVAT_Max money = 0, -- до общ. стоим.

	@p_PageNumber int = 0, -- номер страницы
	@p_PagerowCount int = 0, -- количество записи

	@p_SortColumn nvarchar(MAX)='', -- колонка. сортир.
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)

	set @p_TypeScreen = LOWER(@p_TypeScreen)
	-- одна строка
	if @p_TypeScreen='item' begin
		SELECT TOP 1		   rpd.[ID]
							  ,rpd.[ReffID]
							  ,rpd.[ReffDate]
							  ,rpd.[SenderID]
							  ,rpd.[Contract]
							  ,rpd.[DocumentID]
							  ,rpd.[CreatedDate]
							  ,rpd.[Status]
							  ,rpd.[LastModifiedDate]
							  ,rpd.[CreatedByUserID]
							  ,rpd.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(rpd.SenderID,case when ls.Description is null then '' else ' - ' end,ls.Description) as SenderDescription
							  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) as QuantitySumm
							  ,(SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) as SummaSumm
						FROM [dbo].[RelatedProductDocument] rpd
								left join dbo.Location ls on ls.[ID]=rpd.[SenderID]
								left join dbo.Users u on u.[ID]=rpd.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=rpd.[LastModifiedByUserID]
		where rpd.ID=@p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if ( @p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = '')
				return

		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_createdByUserID nvarchar(MAX) = ''		
		declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
		declare @p_search_senderID nvarchar(MAX) = ''
		declare @p_search_timeReffDate nvarchar(MAX) = ''	--от REFFDate
		declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	
		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''

		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
		set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')
		
		set @p_filter_request_Quantity = ' 		
				(
					(
							
						(( (SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] )  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
						( (SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + '))
						or ((SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) is null)							
					) 					
				)'	
		
		if (@p_TagPriceWithVAT_Min != '' and  @p_TagPriceWithVAT_Max != '')
			set @p_filter_request_TagPriceWithVAT = 		 		
				' and (
					(
						(((SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] )  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						((SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] )  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')) 
						or ((SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) is null) 
					) 					
				)'

		if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
			set @p_search_timeReffDate =  		
				' and (
					CONVERT(date, rpd.ReffDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''				
				)'		
		end

		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, rpd.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + ''' 				
				)'		
		end

		if( @p_TagPriceWithVAT_Min != '' and  @p_TagPriceWithVAT_Max != '' )
			set @p_filter_request =@p_filter_request_Quantity + @p_filter_request_TagPriceWithVAT 
		else
			set @p_filter_request =@p_filter_request_Quantity 
		
		if (@p_search_timeReffDate!='')
			set @p_filter_request = @p_filter_request + @p_search_timeReffDate
		if (@p_search_timeLastModifiedDate!='')
		    set @p_filter_request = @p_filter_request  + @p_search_timeLastModifiedDate

		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and
			(
				(
					(
						cast(rpd.DocumentID as nvarchar(40)) like ''' + @p_search_money + ''' or
						(cast(rpd.ReffID as nvarchar(40)) like ''' + @p_search_money + ''' and rpd.Status > 0) or
						rpd.[Contract] like ''' + @p_search_string + '''
					)				
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request
		
		if (@p_Status != 'All')
			set @p_search_status = ' and rpd.[Status] in (' + @p_Status + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and rpd.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_LastModifiedByUserID = ' and rpd.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;
		if (@p_SenderID != 'All') 
			set @p_search_SenderID = ' and rpd.[SenderID] in (' + @p_SenderID + ') ' ;

		set @p_search_request = @p_search_request + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID
		
		declare @end_request nvarchar(max) = ''	

		if(@p_SortColumn='QuantitySumm')
			set  @p_SortColumn='(SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) '
		
		else if(@p_SortColumn='SummaSumm')
			set @p_SortColumn='(SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) '
		
		else if(@p_SortColumn='CreatedByUserID')
			set  @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '

		else if(@p_SortColumn='LdisplayUserName')
			set  @p_SortColumn='(Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName)) '
		else
			set @p_SortColumn='rpd.'+@p_SortColumn

		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,rpd.[ID]
							  ,rpd.[ReffID]
							  ,rpd.[ReffDate]
							  ,rpd.[SenderID]
							  ,rpd.[Contract]
							  ,rpd.[DocumentID]
							  ,rpd.[CreatedDate]
							  ,rpd.[Status]
							  ,rpd.[LastModifiedDate]
							  ,rpd.[CreatedByUserID]
							  ,rpd.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(rpd.SenderID,case when ls.Description is null then '''' else '' - '' end,ls.Description) as SenderDescription
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) as QuantitySumm
							  ,(SELECT SUM([TagPriceWithVat]) from [dbo].[RelatedProductDocumentDetails] as rpdd WHERE rpdd.[DocumentID] = rpd.[ID] ) as SummaSumm
						FROM [dbo].[RelatedProductDocument] rpd
								left join dbo.Location ls on ls.[ID]=rpd.[SenderID]
								left join dbo.Users u on u.[ID]=rpd.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=rpd.[LastModifiedByUserID] where '
								+ @p_search_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'					
		--print @end_request
		EXECUTE (@end_request);	
	
	end
	
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующие товары, сборка фильтров
-- =============================================
-- xp_GetRelatedProductFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_Supplier nvarchar(MAX)='',
		@p_Status nvarchar(MAX)='',
		@p_Quantity_Min money = 0,
		@p_Quantity_Max money = 0,
		@p_TagPriceWithVat_Min money = 0,
		@p_TagPriceWithVat_Max money = 0,
		@p_UnitPrice_Min money = 0,
		@p_UnitPrice_Max money = 0	

	--Supplier
-------------------------------------------------------------------
	SELECT
		@p_Supplier = CONCAT(@p_Supplier,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[Supplier] as [Id]
				   ,Concat(LTRIM(RTRIM(ua.[Supplier])),case when lo.[Description] is null then '' else ' - ' end,lo.[Description]) as [Value]
				FROM [dbo].[RelatedProduct] ua
					left join dbo.Location lo on lo.[ID]=ua.[Supplier]
		) as Temp
	IF LEN(@p_Supplier) > 2 SET @p_Supplier = SUBSTRING(@p_Supplier,1, LEN(@p_Supplier)-1) ELSE SET @p_Supplier = NULL

	--Status
-------------------------------------------------------------------
	SELECT
		@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					[Status] as [Value]
				FROM [dbo].[RelatedProduct] p
		) as Temp
	IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

	--Min Max
-------------------------------------------------------------------
	SELECT @p_Quantity_Min=MIN([Quantity]),
		   @p_Quantity_Max=MAX([Quantity]),
		   @p_TagPriceWithVat_Min=MIN([TagPriceWithVat]),
		   @p_TagPriceWithVat_Max=MAX([TagPriceWithVat]),
		   @p_UnitPrice_Min=MIN([UnitPrice]),
		   @p_UnitPrice_Max=MAX([UnitPrice])
	FROM [dbo].[RelatedProduct]

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Supplier as Supplier,
			@p_Status as [Status],
		 	@p_Quantity_Min as QuantityMin,
			@p_Quantity_Max as QuantityMax,
			@p_TagPriceWithVat_Min as TagPriceWithVat_Min,
			@p_TagPriceWithVat_Max as TagPriceWithVat_Max,
			@p_UnitPrice_Min as UnitPrice_Min,
			@p_UnitPrice_Max as UnitPrice_Max
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Справочники, сопутствующие товары
-- xp_GetRelatedProductGuide 'grid', ''
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductGuide]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Name
	@p_search nvarchar(40)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)
	
	if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
			set @p_search='%' + @p_search + '%'
			SELECT rpg.[ID]
				  ,rpg.[Model]
				  ,rpg.[Supplier]
				  ,rpg.[Description]
				  ,rpg.[Price]
				  ,rpg.[CreatedDate]
				  ,rpg.[LastModifiedDate]
				  ,rpg.[CreatedByUserID]
				  ,rpg.[LastModifiedByUserID]
			  FROM [dbo].[RelatedProductGuide] rpg
			  WHERE 
			  Model like @p_search or
			  Description like @p_search
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующие товары, подсчет сумм
-- =============================================
-- xp_GetRelatedProductSummary 'All','bx01',0,10000,0,100000,0,10000
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductSummary]
	@p_Supplier nvarchar(MAX)='',
	@p_search nvarchar(40)='',
	@p_Quantity_Min int = 0,
	@p_Quantity_Max int = 0,
	@p_TagPriceWithVat_Min money = 0,
	@p_TagPriceWithVat_Max money = 0,
	@p_UnitPrice_Min money = 0,
	@p_UnitPrice_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

		declare @p_search_string nvarchar(40);	
		declare @delimeter nvarchar(10)= '''|''';
		declare @filter_all nvarchar(10)= '''All''';

		declare @p_search_supplier nvarchar(MAX) = ''

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''
		declare @p_filter_request_TagPriceWithVat nvarchar(MAX) = ''
		declare @p_filter_request_UnitPrice nvarchar(MAX) = ''

		set @p_Supplier = REPLACE(@p_Supplier, '|', ',')

		set @p_filter_request_Quantity = ' 		
					(
						rpd.[Quantity]  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ' and
						rpd.[Quantity] <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + '
					)'	
		set @p_filter_request_TagPriceWithVat = ' and  		
					(
						rpd.[TagPriceWithVat]  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ' and
						rpd.[TagPriceWithVat] <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + '
					)'
		set @p_filter_request_UnitPrice = ' and 		
					(
						rpd.[UnitPrice]  >= ' + convert(nvarchar(40),@p_UnitPrice_Min,126 ) + ' and
						rpd.[UnitPrice] <= ' + convert(nvarchar(40),@p_UnitPrice_Max,126 ) + '
					)'

		set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_TagPriceWithVat + @p_filter_request_UnitPrice

		if (@p_Supplier != 'All')
			set @p_search_supplier = ' and rpd.[Supplier] in (' + @p_Supplier + ') '

		set @p_search_string='%' + @p_search + '%'

		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and
			(
				(
					(
						ls.[Description] like ''' + @p_search_string + ''' or
						rpd.[PartNumber] like ''' + @p_search_string + ''' or
						rpd.[Model] like ''' + @p_search_string + '''
					)
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request + @p_search_supplier
		
		declare @end_request nvarchar(max) = ''	
		set @end_request = '
			declare @p_CountID int = 0
			declare @p_QuantitySumm int = 0
			declare @p_PartNumberCount int = 0
			declare @p_TagPriceWithVatSumm money = 0
			declare @p_UnitPriceSumm money = 0

			SELECT
				@p_CountID = COUNT([ID])
				,@p_QuantitySumm = SUM([Quantity])
				,@p_TagPriceWithVatSumm = SUM([Quantity]*[UnitPrice])
				,@p_UnitPriceSumm = SUM([UnitPrice])
					FROM (
							SELECT
							    rpd.[ID]
								,rpd.[PartNumber]
								,rpd.[Model]
								,rpd.[Supplier]
								,rpd.[Quantity]
								,rpd.[TagPriceWithVat]
								,rpd.[UnitPrice]
								,rpd.[Status]
						FROM [dbo].[RelatedProduct] rpd
								left join dbo.[RelatedProductGuide] ls on ls.[Model]=rpd.[Model] and ls.[Supplier]=rpd.[Supplier]
								where '
								+ @p_search_request
					+') AS st1

			SELECT
				 @p_PartNumberCount = Count(*)
					FROM (
							SELECT DISTINCT
								rpd.[PartNumber]
						FROM [dbo].[RelatedProduct] rpd
								left join dbo.[RelatedProductGuide] ls on ls.[Model]=rpd.[Model] where '
								+ @p_search_request
								+ 'GROUP BY [PartNumber]'
					+') as st2

			SELECT
				@p_CountID as CountID,
				@p_QuantitySumm as QuantitySumm,
				@p_PartNumberCount as PartNumberCount,
				@p_TagPriceWithVatSumm as TagPriceWithVatSumm,
				@p_UnitPriceSumm as UnitPriceSumm'			

		EXECUTE (@end_request);
END
	
	
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующие товары, результирующая грида
-- =============================================
-- xp_GetRelatedProductTable 'item', '', '', 'EG02', '116', 0, 5022,0,10000,0,10000,0,10000, 0,200,'ID',0
-- xp_GetRelatedProductTable 'itembystatus', '', 461, '', 0
-- xp_GetRelatedProductTable 'Grid', 'bx', 0, '', 0, '0','All', 0,10000,0,100000,0,10000,0,20,'ID',0
-- xp_GetRelatedProductTable 'Grid', '', 0, '', 0, 'All','All', 0,23,0,2300,100,100,0,21,'ID',0
-- xp_GetRelatedProductTable 'Grid', 0,'All','All','All','All',0,10000000,0,10000000,0,10000000,0,20,'ID'
-- xp_GetRelatedProductTable 'Grid', 0,'20190326|20191031|','BX05|PF01|','All','All',0,10000,0,100000,0,10000,0,20,'ModelDescription',0
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductTable]
	@p_TypeScreen nvarchar(40), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,
	@p_ModelID nvarchar(MAX)='',
	@p_PartNumberID int = 0,

	@p_Status nvarchar(MAX)='',
	@p_Supplier nvarchar(MAX)='',
	
	@p_Quantity_Min int = 0,
	@p_Quantity_Max int = 0,
	@p_TagPriceWithVat_Min money = 0,
	@p_TagPriceWithVat_Max money = 0,
	@p_UnitPrice_Min money = 0,
	@p_UnitPrice_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;

	declare @p_search_string nvarchar(40);	
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';

	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
	
	SELECT
			rpd.[ID]
			,rpd.[PartNumber]
			,rpd.[Model]
			,rpd.[Supplier]
			,Concat(rpd.[Supplier],case when lo.[Description] is null then '' else ' - ' end,lo.[Description]) as [SupplierDescription]
			,rpd.[Quantity]
			,rpd.[TagPriceWithVat]
			,rpd.[TagPriceWithoutVat]
			,rpd.[UnitPrice]
			,20 as Vat
			,rpd.[Status]
			,rpd.[Currency]
			,ls.[Description] as [ModelDescription]	
			,cur.[ShortDescription] as CurrencyShortDescription
			,cur.[LongDescription] as CurrencyLongDescription
		FROM [dbo].[RelatedProduct] rpd
			left join dbo.[RelatedProductGuide] ls on ls.[Model]=rpd.[Model] and ls.[Supplier]=rpd.[Supplier] 
			left join dbo.Location lo on lo.[ID]=rpd.[Supplier]
			left join [dbo].[Currency] cur on cur.Code=rpd.Currency
		where rpd.[Model]=@p_ModelID and rpd.[PartNumber]=@p_PartNumberID and ls.[Supplier]=@p_Supplier
	end

	if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if ( @p_Status = '')
				return

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_supplier nvarchar(max) = ''

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''
		declare @p_filter_request_TagPriceWithVat nvarchar(MAX) = ''
		declare @p_filter_request_UnitPrice nvarchar(MAX) = ''

		set @p_Supplier = REPLACE(@p_Supplier, '|', ',')

		set @p_filter_request_Quantity = ' 		
					(
						rpd.[Quantity]  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ' and
						rpd.[Quantity] <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + '
					)'	
		set @p_filter_request_TagPriceWithVat = ' and 		
					(
						rpd.[TagPriceWithVat]  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ' and
						rpd.[TagPriceWithVat] <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + '
					)'
		set @p_filter_request_UnitPrice = ' and 
					(
						rpd.[UnitPrice]  >= ' + convert(nvarchar(40),@p_UnitPrice_Min,126 ) + ' and
						rpd.[UnitPrice] <= ' + convert(nvarchar(40),@p_UnitPrice_Max,126 ) + '
					)'

		set @p_filter_request =@p_filter_request_Quantity + @p_filter_request_TagPriceWithVat + @p_filter_request_UnitPrice

		if (@p_Supplier != 'All')
			set @p_search_supplier = ' and rpd.[Supplier] in (' + @p_Supplier + ') ';
		
		if (@p_Status != 'All')
			set @p_search_status = ' and rpd.Quantity != 0';

		set @p_search_string='%' + @p_search + '%'

		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and
			(
				(
					(
						ls.[Description] like ''' + @p_search_string + ''' or
						rpd.[PartNumber] like ''' + @p_search_string + ''' or
						rpd.[Model] like ''' + @p_search_string + '''
					)				
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request + @p_search_supplier + @p_search_status

		SET @p_SortColumn = CASE @p_SortColumn
			WHEN 'ModelDescription' THEN 'ls.[Description]'
			WHEN 'SupplierDescription' THEN 'Concat(rpd.[Supplier],case when lo.[Description] is null then '''' else '' - '' end,lo.[Description])'
			ELSE 'rpd.'+@p_SortColumn
		END

		declare @end_request nvarchar(max) = ''
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,rpd.[ID]
							  ,rpd.[PartNumber]
							  ,rpd.[Model]
							  ,rpd.[Supplier]
							  ,Concat(rpd.[Supplier],case when lo.[Description] is null then '''' else '' - '' end,lo.[Description]) as [SupplierDescription]
							  ,rpd.[Quantity]
							  ,rpd.[TagPriceWithVat]
							  ,rpd.[TagPriceWithOutVat]
							  ,rpd.[UnitPrice]
							  ,20 as Vat
							  ,rpd.[Status]
							  ,rpd.[Currency]
							  ,ls.[Description] as [ModelDescription]
							  ,cur.[ShortDescription] as CurrencyShortDescription
							  ,cur.[LongDescription] as CurrencyLongDescription
						FROM [dbo].[RelatedProduct] rpd
								left join dbo.[RelatedProductGuide] ls on ls.[Model]=rpd.[Model] and ls.[Supplier]=rpd.[Supplier]
								left join dbo.Location lo on lo.[ID]=rpd.[Supplier]
								left join [dbo].[Currency] cur on cur.Code=rpd.Currency where '
								+ @p_search_request
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+'order by st.RowNumber asc'				
						
		--print @end_request
		EXECUTE (@end_request);	
	end

	if @p_TypeScreen in ('itembystatus') begin ---------------------------------------------------------------------
			SELECT
				@@rowcount as RowNumber
				,rpd.[ID]
				,rpd.[PartNumber]
				,rpd.[Model]
				,rpd.[Supplier]
				,Concat(rpd.[Supplier],case when lo.[Description] is null then '' else ' - ' end,lo.[Description]) as [SupplierDescription]
				,rpd.[Quantity]
				,rpd.[UnitPrice]*rpd.[Quantity] as [TagPriceWithVat]
				,(rpd.[UnitPrice]*[TagPriceWithOutVat]/[TagPriceWithVat])*rpd.[Quantity] as [TagPriceWithOutVat]
				,rpd.[UnitPrice]
				,rpd.[Status]
				,rpd.[Currency]
				,ls.[Description] as [ModelDescription]
				,cur.[ShortDescription] as CurrencyShortDescription
				,cur.[LongDescription] as CurrencyLongDescription
		FROM [dbo].[RelatedProduct] rpd
				left join dbo.[RelatedProductGuide] ls on ls.[Model]=rpd.[Model] and ls.[Supplier]=rpd.[Supplier]
				left join dbo.Location lo on lo.[ID]=rpd.[Supplier]
				left join [dbo].[Currency] cur on cur.Code=rpd.Currency
		where rpd.[ID]= @p_ID
		and rpd.Status = (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(@p_Status,@delimeter))
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующие товары, подсчет сумм
-- =============================================
-- xp_GetRelatedProductTransferSummary 'EG02', 116, 5022
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRelatedProductTransferSummary]
	@p_Model nvarchar(40)='',
	@p_Partnumber int=0,
	@p_Supplier int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT COUNT(ID) as CountID
	FROM (SELECT pt.[ID] FROM [dbo].[RelatedProductTransfer] as pt
	WHERE pt.[Model] = @p_Model
    and pt.[Partnumber] = @p_Partnumber
	and pt.[Supplier] = @p_Supplier)  AS st
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetRelatedProductTransferTable 'Name', 'EG02', 116, 5025, 0, 14, 'ID', 1

CREATE PROCEDURE [dbo].[xp_GetRelatedProductTransferTable]
	@p_TypeScreen nvarchar(10), --Item, Grid, InGrid
	@p_Model nvarchar(40)='',
	@p_Partnumber int=0,
	@p_Supplier int,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @end_request nvarchar(max) = ''
	declare @p_order nvarchar(40)='ASC';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
	set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

	if @p_Sort=1 begin
		set @p_order='DESC';
	end
	
	SET @p_SortColumn = CASE @p_SortColumn
		WHEN 'ReffID' THEN '(SELECT CASE
								WHEN pt.[ExReffOperationType] = 1 THEN d.[ReffID]
									WHEN pt.[ExReffOperationType] = 2 td.[DocumentNumber]
									WHEN pt.[ExReffOperationType] = 3 THEN rd.[ReffID]
									WHEN pt.[ExReffOperationType] = 4 THEN sd.[DocumentNumber]
								END)'
		WHEN 'SenderDescription' THEN '(SELECT CASE 
											WHEN pt.[ExReffOperationType] = 1 THEN Concat(d.[SenderID],'' '',lsd.[Description])
											WHEN pt.[ExReffOperationType] = 2 THEN Concat(td.[SenderID],'' '',lstd.[Description])
											WHEN pt.[ExReffOperationType] = 3 THEN null
											WHEN pt.[ExReffOperationType] = 4 THEN null
										END)'
		WHEN 'ReceiverDescription' THEN '(SELECT CASE 
											WHEN pt.[ExReffOperationType] = 1 THEN ''''
											WHEN pt.[ExReffOperationType] = 2 THEN Concat(td.[ReceiverID],'' '',lrtd.[Description])
											WHEN pt.[ExReffOperationType] = 3 THEN null
											WHEN pt.[ExReffOperationType] = 4 THEN null
										END)'
		WHEN 'DisplayNameUser' THEN 'Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)'
		ELSE 'pt.'+@p_SortColumn
	END
	
	set @end_request = 
	'SELECT *
			FROM (
					SELECT
					ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
					,pt.[ID]
					,pt.[Model]
					,pt.[PartNumber]
					,pt.[Quantity]
					,pt.[QuantityOnStorage]
					,pt.[ExReffOperationType]
					,(SELECT CASE 
						WHEN pt.[ExReffOperationType] = 1 THEN d.[ReffID]
							WHEN pt.[ExReffOperationType] = 2 THEN null
							WHEN pt.[ExReffOperationType] = 3 THEN null
							WHEN pt.[ExReffOperationType] = 4 THEN null
						END) as ReffID
					,(SELECT CASE 
							WHEN pt.[ExReffOperationType] = 1 THEN d.[DocumentID]
							WHEN pt.[ExReffOperationType] = 2 THEN td.[DocumentNumber]
							WHEN pt.[ExReffOperationType] = 3 THEN null
							WHEN pt.[ExReffOperationType] = 4 THEN sd.[DocumentNumber]
						END) as DocumentID				  
					,(SELECT CASE
							WHEN COALESCE(u.LastName,'''') = '''' THEN ''''
							ELSE u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.''
						END) as ShortDisplayNameUser
					,(SELECT CASE 
					
							WHEN pt.[ExReffOperationType] = 1 THEN Concat(d.[SenderID],'' '',lsd.[Description])
							WHEN pt.[ExReffOperationType] = 2 THEN Concat(td.[SenderID],'' '',lstd.[Description])
							WHEN pt.[ExReffOperationType] = 3 THEN null
							WHEN pt.[ExReffOperationType] = 4 THEN null
						END) as SenderDescription
					,(SELECT CASE 
							WHEN pt.[ExReffOperationType] = 1 THEN ''''
							WHEN pt.[ExReffOperationType] = 2 THEN Concat(td.[ReceiverID],'' '',lrtd.[Description])
							WHEN pt.[ExReffOperationType] = 3 THEN null
							WHEN pt.[ExReffOperationType] = 4 THEN null
						END) as ReceiverDescription	
					,pt.[CreatedDate]
					,pt.[CreatedByUserID]
					,(SELECT CASE 
							WHEN pt.[ExReffOperationType] = 1 THEN d.[SenderID]
							WHEN pt.[ExReffOperationType] = 2 THEN td.[SenderID]
							WHEN pt.[ExReffOperationType] = 3 THEN null
							WHEN pt.[ExReffOperationType] = 4 THEN null
						END) as SenderID
					,(SELECT CASE 
							WHEN pt.[ExReffOperationType] = 1 THEN ''''
							WHEN pt.[ExReffOperationType] = 2 THEN td.[ReceiverID]
							WHEN pt.[ExReffOperationType] = 3 THEN null
							WHEN pt.[ExReffOperationType] = 4 THEN null
						END) as ReceiverID
					,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
				FROM [dbo].[RelatedProductTransfer] as pt
					left join dbo.Users u on u.[ID]=pt.[CreatedByUserID]
					left join dbo.RelatedProductDocument d on d.[ID]=pt.[ExtReffID]
					left join dbo.TransferRelatedProductDocument td on td.[ID]=pt.[ExtReffID]
					left join dbo.RevaluationDocument rd on rd.[ID]=pt.[ExtReffID]
					left join dbo.SaleDocument sd on sd.[ID]=pt.[ExtReffID]
					left join dbo.Location lsd on lsd.[ID]=d.[SenderID]
					left join dbo.Location lstd on lstd.[ID]=td.[SenderID]
					left join dbo.Location lrtd on lrtd.[ID]=td.[ReceiverID]
				WHERE pt.[Model]='''+@p_Model+''' and pt.[Partnumber]='+CAST(@p_Partnumber AS nvarchar)+' and pt.[Supplier]='+CAST(@p_Supplier AS nvarchar)+ '
			) AS st
			where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'				
		
	--print @end_request
	EXECUTE (@end_request);

END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Переоценка продукции, сборка фильтров
-- =============================================
-- xp_GetReportProductGroupFilters 5
-- xp_GetReportProductGroupFilters 7
-- select * from Product where Status = 1 and Color = 'Белый'
-- select * from Product where Status = 1 and Color = 'Красный'
-- select * from Product where Status = 1 and Color = 'Желтый'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetReportProductGroupFilters]
	@p_ProductGroupName int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	--declare
	 CREATE TABLE #ProductGroup (
		SubjectDesc nvarchar(100),
		Weight_ money,
		QtyDI int,
		QtyNotDI int
	)

	create table #DI (
		ID int
	)

    create table #NotDI (
		ID int
	)

	insert into #DI
	SELECT
		p.ID
	FROM [dbo].Product p 
		left join [Stones] st on p.ID = st.ProductID
	where st.Stone in ('Бр.','Рубин', 'Изумруд', 'Сапфир') and p.Status in (2,0) --
	group by p.ID 
	
	insert into #NotDI
	select
		p.ID
	from [dbo].Product p 
		left join [Stones] st on p.ID = st.ProductID				
		left join #DI f on f.ID=ProductID 
	where f.ID is null  and p.Status in (2,0)
	group by p.ID

	if (@p_ProductGroupName=0) begin			
		insert into #ProductGroup
		select
			p.Color, 
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
		where p.Status in (2,0)
	end
	else if (@p_ProductGroupName=1) begin			
		insert into #ProductGroup
		select
			p.Color, 
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
		where p.Status in (2,0)
	end
	else if (@p_ProductGroupName=2) begin			
		insert into #ProductGroup
		select
			p.Gender,
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
		where p.Status in (2,0)
	end
	else if (@p_ProductGroupName=3) begin				
		insert into #ProductGroup
		select
			p.ThemedCollection,
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
		where p.Status in (2,0)
	end
	else if (@p_ProductGroupName=4) begin				
		insert into #ProductGroup
		select
			sh.Name,
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
			left join [dbo].[Showcase] sh on p.[ShowcaseID]=sh.[ID]
		where p.Status in (2,0)
	end
	else if (@p_ProductGroupName=5) begin				
		insert into #ProductGroup
		select			
			Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description],' (',CAST(p.KtID as nvarchar(255)),')'),
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
			left join dbo.[KT] ktid on ktid.ID=p.[KtID]
			left join dbo.[Metal] meid on meid.ID=ktid.MetalID
		where p.Status in (2,0)
	end
	else if (@p_ProductGroupName=6) begin			
		insert into #ProductGroup
		select
			p.Size,
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
		where p.Status in (2,0)
	end
	else if (@p_ProductGroupName=7) begin
		insert into #ProductGroup
		select
			Concat(p.Type,' (',LEFT(p.Model, 1),')'),
			p.[Weight],
			case when f.ID is not null then 1 else 0 end,
			case when s.ID is not null then 1 else 0 end
		from [Product] p 
			left join #DI f on p.ID = f.ID
			left join #NotDI s on p.ID = s.ID
		where p.Status in (2,0)

	end

	select  SubjectDesc,
			sum(Weight_) as Weight,
			sum(QtyDI) as QtyBR,
			sum(QtyNotDI) as QtyNotBR
	from #ProductGroup
	group by SubjectDesc
	order by SubjectDesc ASC

END
-- select Count(Stone), Stone from Stones group by Stone





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, подсчет сумм
-- =============================================
-- xp_GetReturnAdditionalDiscount 13012398
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetReturnAdditionalDiscount]
	@p_ProductID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_DocumentID int	
	declare @p_AdditionalDiscount float	
	declare @p_ServiceDiscount float	
	declare @end_request nvarchar(Max)

	set @p_DocumentID = (select top 1 DocumentID from SaleDocumentProduct sdp									
										inner join SaleDocument sd on sdp.DocumentID = sd.ID
										where sdp.ProductID=@p_ProductID 
										and sd.Type = 9
							    order by sd.ID DESC)

	set @p_AdditionalDiscount = (select sum(Amount) from SaleDocumentAdditionalDiscount
								where DocumentID = @p_DocumentID)

	set @p_ServiceDiscount =  (select sum(-Amount) from SaleDocumentServices
								where DocumentID = @p_DocumentID and Amount < 0)	
								
	if (@p_AdditionalDiscount > 0 or @p_ServiceDiscount > 0)
	begin			
		declare @p_TotalPrice float
		declare @p_TotalPercent float
		
		set @p_TotalPrice = (select SUM(SalePriceWithVAT) as SalePriceWithVAT from [dbo].[SaleDocumentProduct] 
							 where DocumentID=@p_DocumentID)

		set @p_TotalPercent=(IsNull(@p_AdditionalDiscount,0) + IsNull(@p_ServiceDiscount,0))/@p_TotalPrice	

		select 
				sd.[ID]
				  ,sd.[ProductID]
				  ,sd.[DocumentID]
				  ,sd.[LineDocument]
				  ,sd.[Quantity]
				  ,sd.[TagPriceWithVat]
				  ,sd.[TagPriceWithOutVat]
				  ,sd.[PriceFromCRM]
				  ,sd.[SalePriceWithoutVAT]
				  ,sd.[DiscountType]
				  ,sd.[DiscountDescription]
				  ,sd.[InternetNumber]
				  ,sd.[ReasonReturnType]
				  ,sd.[ReasonReturnDescription]
				  ,dc.DocumentNumber as DocumentNumber
				  ,cur.[Code] as CodeCurrency
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,Concat(pr.[Type],' ',pr.[Model]) as [Description]
				  ,sd.[CreatedDate]
				  ,sd.[LastModifiedDate]
				  ,sd.[CreatedByUserID]
				  ,sd.[LastModifiedByUserID]
				  ,SalePriceWithVAT - ROUND((SalePriceWithVAT*@p_TotalPercent), 4) as SalePriceWithVAT 				 
			  FROM [dbo].[SaleDocumentProduct] sd
					left join [dbo].[Product] pr on pr.ID=sd.ProductID
					left join dbo.[SaleDocument] dc on dc.ID=sd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dc.Currency
			where ProductID=@p_ProductID and DocumentID =  @p_DocumentID		
	end 
	
	else begin
		select 
				sd.[ID]
				  ,sd.[ProductID]
				  ,sd.[DocumentID]
				  ,sd.[LineDocument]
				  ,sd.[Quantity]
				  ,sd.[TagPriceWithVat]
				  ,sd.[TagPriceWithOutVat]
				  ,sd.[PriceFromCRM]
				  ,sd.[SalePriceWithoutVAT]
				  ,sd.[DiscountType]
				  ,sd.[DiscountDescription]
				  ,sd.[InternetNumber]
				  ,sd.[ReasonReturnType]
				  ,sd.[ReasonReturnDescription]
				  ,dc.DocumentNumber as DocumentNumber
				  ,cur.[Code] as CodeCurrency
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,Concat(pr.[Type],' ',pr.[Model]) as [Description]
				  ,sd.[CreatedDate]
				  ,sd.[LastModifiedDate]
				  ,sd.[CreatedByUserID]
				  ,sd.[LastModifiedByUserID]
				  ,SalePriceWithVAT			 
			  FROM [dbo].[SaleDocumentProduct] sd
					left join [dbo].[Product] pr on pr.ID=sd.ProductID
					left join dbo.[SaleDocument] dc on dc.ID=sd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dc.Currency
			where ProductID=@p_ProductID and DocumentID =  @p_DocumentID
	end		
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Переоценка продукции, детали
-- =============================================
-- xp_GetRevaluationDocumentDetails 'Grid',0
-- xp_GetRevaluationDocumentDetails 'itembystatus',338, 0
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRevaluationDocumentDetails]
	@p_TypeScreen varchar(20), --Item, Grid, InGrid, Filter	
	@p_DocumentID int,
	@p_Status int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	set @p_TypeScreen = LOWER(@p_TypeScreen)
			
	if @p_TypeScreen in ('name') begin ---------------------------------------------------------------------
			SELECT
				  rd.[ProductID]
				  ,rd.[DocumentID]
				  ,rd.[TagPriceWithVAT]
				  ,rd.[TagPriceWithOutVAT]
				  ,cur1.[Code] as CodeCurrency
				  ,cur1.[ShortDescription] as CurrencyShortDescription
				  ,cur1.[LongDescription] as CurrencyLongDescription
				  ,dd.[ID]
				  ,dd.[Model]
				  ,dd.[ModelID]
				  ,dd.[Type]
				  ,dd.[KtID]
				  ,meid.[Description] as MetalDescription
				  ,ktid.[Description] as KtIDShortDescription
				  ,CASE WHEN dd.[ID] > 0 THEN Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) ELSE NULL END as KtIDDescription
				  ,dd.[Size]
				  ,dd.[Color]
				  ,dd.[Gender]
				  ,dd.[SupplierID]
				  ,dd.[SupplierName]
				  ,dd.[Country]
				  ,dd.[ThemedCollection]
				  ,dd.[Weight]
				  ,dd.[CostWithoutVAT]
				  ,dd.[CostCurrency]
				  ,cu.[ShortDescription] as [CostCurrencyDescription]
				  ,dd.[TagPriceWithVAT]
				  ,dd.[TagPriceCurrency]
				  ,dd.[TagPriceExtra]
				  ,dd.[ShowcaseID]
				  ,shid.[Name] as ShowcaseIDDescription
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
				  ,dd.[Status] as StatusProduct
				  ,rd.[Status] as [Status]
			  FROM [dbo].[RevaluationDocumentDetails] rd
					left join dbo.[Product] dd on rd.[ProductID]=dd.[ID]
			  		left join dbo.[KT] ktid on ktid.ID=dd.[KtID]
					left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					left join dbo.[Showcase] shid on shid.ID=dd.[ShowcaseID]
					left join dbo.[Currency] cu on cu.[Code]=dd.[CostCurrency]
					left join [dbo].[Currency] cur1 on cur1.Code=rd.Currency					
			  where rd.DocumentID = @p_DocumentID
	end

	if @p_TypeScreen in ('grid') begin ---------------------------------------------------------------------
			SELECT
				  rd.[ProductID]
				  ,rd.[DocumentID]
				  ,rd.[TagPriceWithVAT]
				  ,rd.[TagPriceWithOutVAT]
				  ,cur1.[Code] as CodeCurrency
				  ,cur1.[ShortDescription] as CurrencyShortDescription
				  ,cur1.[LongDescription] as CurrencyLongDescription
				  ,dd.[ID]
				  ,dd.[Model]
				  ,dd.[ModelID]
				  ,dd.[Type]
				  ,dd.[KtID]
				  ,meid.[Description] as MetalDescription
				  ,ktid.[Description] as KtIDShortDescription
				  ,Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) as KtIDDescription
				  ,dd.[Size]
				  ,dd.[Color]
				  ,dd.[Gender]
				  ,dd.[SupplierID]
				  ,dd.[SupplierName]
				  ,dd.[Country]
				  ,dd.[ThemedCollection]
				  ,dd.[Weight]
				  ,dd.[CostWithoutVAT]
				  ,dd.[CostCurrency]
				  ,cu.[ShortDescription] as [CostCurrencyDescription]
				  ,dd.[TagPriceWithVAT]
				  ,dd.[TagPriceCurrency]
				  ,dd.[TagPriceExtra]
				  ,dd.[ShowcaseID]
				  ,shid.[Name] as ShowcaseIDDescription
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
				  ,dd.[Status]
			  FROM [dbo].[RevaluationDocumentDetails] rd
					left join dbo.[Product] dd on rd.[ProductID]=dd.[ID]
			  		left join dbo.[KT] ktid on ktid.ID=dd.[KtID]
					left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					left join dbo.[Showcase] shid on shid.ID=dd.[ShowcaseID]
					left join dbo.[Currency] cu on cu.[Code]=dd.[CostCurrency]
					left join [dbo].[Currency] cur1 on cur1.Code=rd.Currency	
		end
					
		if @p_TypeScreen in ('itembystatus') begin ---------------------------------------------------------------------
			SELECT
				  rd.[ProductID]
				  ,rd.[DocumentID]
				  ,rd.[TagPriceWithVAT]
				  ,rd.[TagPriceWithOutVAT]
				  ,cur1.[Code] as CodeCurrency
				  ,cur1.[ShortDescription] as CurrencyShortDescription
				  ,cur1.[LongDescription] as CurrencyLongDescription
				  ,dd.[ID]
				  ,dd.[Model]
				  ,dd.[ModelID]
				  ,dd.[Type]
				  ,dd.[KtID]
				  ,meid.[Description] as MetalDescription
				  ,ktid.[Description] as KtIDShortDescription
				  ,Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) as KtIDDescription
				  ,dd.[Size]
				  ,dd.[Color]
				  ,dd.[Gender]
				  ,dd.[SupplierID]
				  ,dd.[SupplierName]
				  ,dd.[Country]
				  ,dd.[ThemedCollection]
				  ,dd.[Weight]
				  ,dd.[CostWithoutVAT]
				  ,dd.[CostCurrency]
				  ,cu.[ShortDescription] as [CostCurrencyDescription]
				  ,dd.[TagPriceWithVAT]
				  ,dd.[TagPriceCurrency]
				  ,dd.[TagPriceExtra]
				  ,dd.[ShowcaseID]
				  ,shid.[Name] as ShowcaseIDDescription
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
				  ,dd.[Status]
			  FROM [dbo].[RevaluationDocumentDetails] rd
					left join dbo.[Product] dd on rd.[ProductID]=dd.[ID]
			  		left join dbo.[KT] ktid on ktid.ID=dd.[KtID]
					left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					left join dbo.[Showcase] shid on shid.ID=dd.[ShowcaseID]
					left join dbo.[Currency] cu on cu.[Code]=dd.[CostCurrency]
					left join [dbo].[Currency] cur1 on cur1.Code=rd.Currency
				where rd.Status = @p_Status	and rd.DocumentID = @p_DocumentID 	
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Переоценка продукции, сборка фильтров
-- =============================================
-- xp_GetRevaluationDocumentFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRevaluationDocumentFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_CreatedByUserID nvarchar(MAX) = '',
		@p_Status nvarchar(MAX) = '',
		@p_LastModifiedByUserID nvarchar(MAX) = '',
		@p_Quantity_Min money = 0,
		@p_Quantity_Max money = 0

	--UserID
-------------------------------------------------------------------
	SELECT
		@p_CreatedByUserID = CONCAT(@p_CreatedByUserID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[CreatedByUserID] as [ID]
					,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
				FROM [dbo].[RevaluationDocument] p
					left join Users u on u.ID = p.[CreatedByUserID]
		) as Temp
		ORDER by Temp.[ID],Temp.[Value]
	IF LEN(@p_CreatedByUserID) > 2 SET @p_CreatedByUserID = SUBSTRING(@p_CreatedByUserID,1, LEN(@p_CreatedByUserID)-1) ELSE SET @p_CreatedByUserID = NULL

	--LastModifiedByUserID
-------------------------------------------------------------------
	SELECT
		@p_LastModifiedByUserID = CONCAT(@p_LastModifiedByUserID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[LastModifiedByUserID] as [Id]
					,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as [Value]
				FROM [dbo].[RevaluationDocument] ua
					inner join dbo.Users u on u.[ID]=ua.[LastModifiedByUserID]
		) as Temp
	IF LEN(@p_LastModifiedByUserID) > 2 SET @p_LastModifiedByUserID = SUBSTRING(@p_LastModifiedByUserID,1, LEN(@p_LastModifiedByUserID)-1) ELSE SET @p_LastModifiedByUserID = NULL

	--Quantity_Min Quantity_Max
-------------------------------------------------------------------
	SELECT @p_Quantity_Min=MIN(qs.QuantitySumm), @p_Quantity_Max=MAX(qs.QuantitySumm) FROM (
		SELECT (SELECT COUNT(*) from RevaluationDocumentDetails doc WHERE doc.DocumentID=p.[ID]) as QuantitySumm
	FROM [dbo].[RevaluationDocument] as p GROUP BY p.ID) as qs
	
	--Status
-------------------------------------------------------------------
		SELECT
			@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Status] as [Value]
					FROM [dbo].[RevaluationDocument] p
					WHERE p.[Status] IS NOT NULL
			) as Temp
		IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_CreatedByUserID as [UserID],
			@p_LastModifiedByUserID as [LastModifiedByUserID],
			@p_Status as [Status],
			@p_Quantity_Min as QuantityMin,
			@p_Quantity_Max as QuantityMax
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Переоценка продукции, подсчет сумм
-- =============================================
-- xp_GetRevaluationDocumentSummary '', '01.01.1753 0:00:00', '11.02.2022 11:53:41', '01.01.1753 0:00:10', '11.02.2022 11:53:41','01.01.1753 0:00:00', '11.02.2022 11:53:41', 'All', 'All', 'All', 0, 11387800
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRevaluationDocumentSummary]
	@p_search nvarchar(40)='',

	@p_FromDateRefDate datetime,
	@p_ToDateRefDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,
	@p_FromDateCreatedDate datetime,
	@p_ToDateCreatedDate datetime,

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)
	declare @DateFromCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateCreatedDate, 120)
	declare @DateToCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateCreatedDate, 102)

	if (@p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '')
		return
		
	set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
	set @p_search_string='%' + @p_search + '%'

	declare @p_search_status nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''

	declare @p_search_timeReffDate nvarchar(MAX) = ''	
	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''
	declare @p_search_timeCreatedDate nvarchar(MAX) = ''

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Quantity nvarchar(MAX) = ''

	set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
	set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
	set @p_Status = REPLACE(@p_Status, '|', ',')
	
	set @p_filter_request_Quantity = ' 		
			(
				(
					( (SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
					( (SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
				) 					
			)'	

	if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
		set @p_search_timeReffDate =  		
			' and (
				CONVERT(date, s.ReffDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''				
			)'	
	end

	if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')
	begin
		set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
		set @p_search_timeLastModifiedDate =  		
			' and (
				CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + ''' 				
			)'
	end

	if (@DateFromCreatedDate_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFromCreatedDate_string = CONVERT(nvarchar, @p_FromDateCreatedDate, 102)
		set @p_search_timeCreatedDate =  		
			' and (
				CONVERT(date, s.CreatedDate) between ''' + @DateFromCreatedDate_string  + ''' and ''' + @DateToCreatedDate_string + '''				
			)'
	end

	set @p_filter_request = @p_filter_request_Quantity + @p_search_timeReffDate + @p_search_timeLastModifiedDate + @p_search_timeCreatedDate
	
	declare @p_search_request nvarchar(MAX) = ''
	if (@p_search != '')
		set @p_search_request = ' and 
			(
				(
					(
						cast(s.ReffID as nvarchar(40)) like ''' + @p_search_money + '''
					)				
				)
			)'

	set @p_search_request = @p_filter_request +  @p_search_request

	if (@p_Status != 'All')
		set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
	if (@p_CreatedByUserID != 'All') 
		set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
	if (@p_LastModifiedByUserID != 'All') 
		set @p_search_lastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;

	set @p_search_request = @p_search_request + @p_search_status + @p_search_createdByUserID + @p_search_lastModifiedByUserID
		
	declare @end_request nvarchar(max) = ''	
	set @end_request = 
	'SELECT
			COUNT([ID]) as DocumentCount,
			SUM(QuantitySumm) as DocumentSummaryQuantity
			FROM (
					SELECT
						s.[ID]
						,s.[ReffID]
						,s.[ReffDate]
						,s.[Description]
						,s.[Reason]
						,s.[Status]
						,s.[CreatedDate]
						,s.[LastModifiedDate]
						,s.[CreatedByUserID]
						,s.[LastModifiedByUserID]	  	  
						,u.ID as UserID
						,ul.ID as LUserID
						,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
						,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
						,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
						,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
						,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
				FROM [dbo].[RevaluationDocument] s
						left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
						left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
						+ @p_search_request
			+') AS st'				
	--select @end_request

	EXECUTE (@end_request);	

END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Переоценка продукции, результирующая грида
-- =============================================
-- xp_GetRevaluationDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:00', '11.02.2022 11:53:41', '01.01.1753 0:00:10', '11.02.2022 11:53:41','01.01.1753 0:00:00', '11.02.2022 11:53:41', 'All', 'All', 'All', 0, 99999999, 0, 1000, 'ID', 0
-- xp_GetRevaluationDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:00', '11.02.2022 11:53:41', '01.01.1753 0:00:00', '11.02.2022 11:53:41','01.01.1753 0:00:00', '11.02.2022 11:53:41', 'All', 'All', 'All', 1, 100000, 0, 14, 'ID', 1
-- xp_GetRevaluationDocumentTable 'itembystatus', '', 0 , '01.01.1753 0:00:00', '11.02.2022 11:53:41', '01.01.1753 0:00:00', '11.02.2022 11:53:41','01.01.1753 0:00:20', '11.02.2022 11:53:41', 'All', 'All', '0|1', 1, 100000, 0, 14, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetRevaluationDocumentTable]
	@p_TypeScreen varchar(20), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,

	@p_FromDateRefDate datetime,
	@p_ToDateRefDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,
	@p_FromDateCreatedDate datetime,
	@p_ToDateCreatedDate datetime,

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''
	declare @p_MaxValue int = 0
	declare @p_MinValue int = 0

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)
	declare @DateFromCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateCreatedDate, 120)
	declare @DateToCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateCreatedDate, 102)

	declare @p_search_status nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''

	declare @p_search_timeReffDate nvarchar(MAX) = ''	
	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''
	declare @p_search_timeCreatedDate nvarchar(MAX) = ''

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Quantity nvarchar(MAX) = ''
	declare @p_search_request nvarchar(MAX) = ''		
	declare @end_request nvarchar(max) = ''

	set @p_TypeScreen = LOWER(@p_TypeScreen)	

	if @p_TypeScreen='item' 
	begin
		SELECT TOP 1    s.[ID]
						,s.[ReffID]
						,s.[ReffDate]
						,s.[Description]
						,s.[Reason]
						,s.[Status]							  
						,s.[CreatedDate]
						,s.[LastModifiedDate]
						,s.[CreatedByUserID]
						,s.[LastModifiedByUserID]	  	  
						,u.ID as UserID
						,ul.ID as LUserID
						,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
						,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
						,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
						,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
						,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
				FROM [dbo].[RevaluationDocument] s
						left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
						left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]
		where s.ID=@p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') 
	begin ---------------------------------------------------------------------
		
		if (@p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '')
				return
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;		
		
		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')	

		set @p_filter_request_Quantity = ' 		
				(
					(
						( (SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
						( (SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
					) 					
				)'	

		if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
			set @p_search_timeReffDate =  		
				' and (
					CONVERT(date, s.ReffDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''				
				)'	
		end

		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + ''' 				
				)'
		end

		if (@DateFromCreatedDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromCreatedDate_string = CONVERT(nvarchar, @p_FromDateCreatedDate, 102)
			set @p_search_timeCreatedDate =  		
				' and (
					CONVERT(date, s.CreatedDate) between ''' + @DateFromCreatedDate_string  + ''' and ''' + @DateToCreatedDate_string + '''				
				)'
		end
		
		set @p_filter_request = @p_filter_request_Quantity + @p_search_timeReffDate + @p_search_timeLastModifiedDate + @p_search_timeCreatedDate

		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.ReffID as nvarchar(40)) like ''' + @p_search_money + '''
					)				
				)
			)'

		set @p_search_request = @p_filter_request +  @p_search_request

		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_lastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;

		set @p_search_request = @p_search_request + @p_search_status + @p_search_createdByUserID + @p_search_lastModifiedByUserID
	
		if(@p_SortColumn='QuantitySumm')
			set @p_SortColumn='(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='CreatedByUserID')
			set @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else if(@p_SortColumn='LdisplayUserName')
			set @p_SortColumn='(Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName)) '
		else
			set @p_SortColumn='s.'+@p_SortColumn
					
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[ReffID]
							  ,s.[ReffDate]
							  ,s.[SyncDate]
							  ,s.[Description]
							  ,s.[Reason]
							  ,s.[Status]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
						FROM [dbo].[RevaluationDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
								+ @p_search_request
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'					
		--print @end_request
		EXECUTE (@end_request);	
	end

	else if @p_TypeScreen='itembystatus' 
	begin
		set @p_Status = REPLACE(@p_Status, '|', ',')
		if (@DateFromCreatedDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromCreatedDate_string = CONVERT(nvarchar, @p_FromDateCreatedDate, 102)
			set @p_search_timeCreatedDate =  		
				'(
					CONVERT(date, s.CreatedDate) between ''' + @DateFromCreatedDate_string  + ''' and ''' + @DateToCreatedDate_string + '''				
				)'
		end
				
		set @p_search_request = @p_search_timeCreatedDate	
		if (@p_Status != 'All')
			set @p_search_status = ' s.[Status] in (' + @p_Status + ') ' ;
		
		if(@p_search_request != '')
			set @p_search_request = @p_search_request + ' and ' + @p_search_status
		else
			set @p_search_request = @p_search_request + @p_search_status

		if(@p_search_request != '')
			set @p_search_request = 'where ' + @p_search_request

		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  s.[ID]
							  ,s.[ReffID]
							  ,s.[ReffDate]
							  ,s.[SyncDate]
							  ,s.[Description]
							  ,s.[Reason]
							  ,s.[Status]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
						FROM [dbo].[RevaluationDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] '
								+ @p_search_request
					+') as st'					
		-- print @end_request
		EXECUTE (@end_request);	
	end
	else if @p_TypeScreen='name'
		begin
			set @p_Status = REPLACE(@p_Status, '|', ',')
			SELECT TOP 1
					s.[ID],
					s.[ReffDate]
			FROM [dbo].[RevaluationDocument] s
			where s.[Status] in (@p_Status) and s.[ReffDate] < @p_ToDateRefDate
		end
	END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.Coupon
-- =============================================
-- xp_GetSaleDocumentCoupon 'Name', 151
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentAdditionalDiscount]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_DocumentID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @dt_now datetime=getdate()

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='Name' begin
		SELECT [ID]
      ,[DocumentID]
      ,[ExtRefID]
      ,[Amount]
      ,[CreatedDate]
      ,[LastModifiedDate]
      ,[CreatedByUserID]
      ,[LastModifiedByUserID]
			FROM [dbo].[SaleDocumentAdditionalDiscount]
		  WHERE
			   [DocumentID] = @p_DocumentID
			   
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.Coupon
-- =============================================
-- xp_GetSaleDocumentCoupon 'Name', 151
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentCoupon]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_DocumentID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @dt_now datetime=getdate()

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='Name' begin
		SELECT sd.[ID]
			  ,sd.[CouponID]
			  ,sd.[CreatedDate]
			  ,sd.[LastModifiedDate]
			  ,sd.[CreatedByUserID]
			  ,sd.[LastModifiedByUserID]
		  FROM [dbo].[SaleDocumentCoupon] as sd
		  WHERE
			   sd.[DocumentID] = @p_DocumentID
			   
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, сборка фильтров
-- =============================================
-- xp_GetSaleDocumentFilters 0
-- xp_GetSaleDocumentFilters 1
-- xp_GetSaleDocumentFilters 3
-- xp_GetSaleDocumentFilters 6
-- xp_GetSaleDocumentFilters 9
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentFilters]
	@p_TypeDocument int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_Users nvarchar(MAX)='',
		@p_Type nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_Quantity_Min int = 0,
		@p_Quantity_Max int = 0,
		@p_TagPriceWithVAT_Min money = 0,
		@p_TagPriceWithVAT_Max money = 0

if @p_TypeDocument!=0
	begin 
		--Users
-------------------------------------------------------------------
		SELECT
			@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						sd.[CreatedByUserID] AS [Id]
						,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) AS [Value]
					FROM [dbo].[SaleDocument] sd
						left join dbo.Users u on u.[ID]=sd.[CreatedByUserID]
					WHERE
						sd.[Type]=@p_TypeDocument
			) AS Temp
		IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

		--LastUsers
-------------------------------------------------------------------
		SELECT
			@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						sd.[LastModifiedByUserID] AS [Id]
						,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) AS [Value]
					FROM [dbo].[SaleDocument] sd
						inner join dbo.Users u on u.[ID]=sd.[LastModifiedByUserID]
					WHERE 
						sd.[Type]=@p_TypeDocument
			) AS Temp
		IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL

		--Type
-------------------------------------------------------------------
		SELECT
			@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						sd.[Type] AS [Value]
					FROM [dbo].[SaleDocument] sd
					WHERE
						sd.[Type]=@p_TypeDocument
			) AS Temp

		IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL

		--Quantity_Min Quantity_Max TagPriceWithVAT_Min TagPriceWithVAT_Max TagPriceWithOutVAT_Min TagPriceWithOutVAT_Max
-------------------------------------------------------------------
	
		SELECT
			@p_Quantity_Min=MIN([Count]),
			@p_Quantity_Max=MAX([Count]),
		
			@p_TagPriceWithVAT_Min=MIN(Amount),
			@p_TagPriceWithVAT_Max=MAX(Amount)
		
		FROM (				   
				   SELECT								
						sd.[Count] as [Count],
						sd.[Amount] as Amount
			FROM [dbo].[SaleDocument] sd
			WHERE
				sd.[Type]=@p_TypeDocument
		) summ
	end
else
	begin
		--Users
-------------------------------------------------------------------
		SELECT
			@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						sd.[CreatedByUserID] AS [Id]
						,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) AS [Value]
					FROM [dbo].[SaleDocument] sd
						left join dbo.Users u on u.[ID]=sd.[CreatedByUserID]						 
			) AS Temp
		IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

		--LastUsers
-------------------------------------------------------------------
		SELECT
			@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						sd.[LastModifiedByUserID] AS [Id]
						,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) AS [Value]
					FROM [dbo].[SaleDocument] sd
						inner join dbo.Users u on u.[ID]=sd.[LastModifiedByUserID]						 
			) AS Temp
		IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL

		--Type
-------------------------------------------------------------------
		SELECT
			@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						sd.[Type] AS [Value]
					FROM [dbo].[SaleDocument] sd					
			) AS Temp

		IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL

		--Quantity_Min Quantity_Max TagPriceWithVAT_Min TagPriceWithVAT_Max TagPriceWithOutVAT_Min TagPriceWithOutVAT_Max
-------------------------------------------------------------------
	
		SELECT
			@p_Quantity_Min=MIN([Count]),
			@p_Quantity_Max=MAX([Count]),
		
			@p_TagPriceWithVAT_Min=MIN(Amount),
			@p_TagPriceWithVAT_Max=MAX(Amount)
		
		FROM (
			SELECT 			   
				   sd.[Count],
				   sd.Amount
			FROM [dbo].[SaleDocument] sd			
		) summ
	end

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Users AS CreatedByUserID,
			@p_LastUsers AS LastModifiedByUserID,
			@p_Type AS [Type],
		 	@p_Quantity_Min AS QuantityMin,
			@p_Quantity_Max AS QuantityMax,
			@p_TagPriceWithVAT_Min AS TagPriceWithVATMin,
			@p_TagPriceWithVAT_Max AS TagPriceWithVATMax
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.Metal
-- =============================================
-- xp_GetSaleDocumentPayment 'Item', 109
-- xp_GetSaleDocumentPayment 'Grid', 239
-- xp_GetSaleDocumentPayment 'Name', 25509
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentPayment]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Name
	@p_ID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT sdp.[ID]
			  ,sdp.[DocumentID]
			  ,sdp.[WorkShiftID]
			  ,sdp.[PaymentType]
			  ,sdp.[Amount]
			  ,sdp.[ExtReffID]
			  ,sdp.[CardType]
			  ,sdp.[CardNumber]
			  ,sdp.[CardDate]
			  ,sdp.[CreatedDate]
			  ,sdp.[LastModifiedDate]
			  ,sdp.[CreatedByUserID]
			  ,sdp.[LastModifiedByUserID]
			  ,sdp.[CreditNumber]
			  ,sdp.[ConditionType]
			  ,sd.[Type] as TypeDocument
		  FROM [dbo].[SaleDocumentPayment] sdp
			inner join [dbo].[SaleDocument] sd on sd.ID=sdp.DocumentID
		  WHERE
			   [DocumentID] = @p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		SELECT sdp.[ID]
			  ,sdp.[DocumentID]
			  ,sdp.[WorkShiftID]
			  ,sdp.[PaymentType]
			  ,sdp.[Amount]
			  ,sdp.[ExtReffID]
			  ,sdp.[CardType]
			  ,sdp.[CardNumber]
			  ,sdp.[CardDate]
			  ,sdp.[CreatedDate]
			  ,sdp.[LastModifiedDate]
			  ,sdp.[CreatedByUserID]
			  ,sdp.[LastModifiedByUserID]
			  ,sdp.[CreditNumber]
			  ,sdp.[ConditionType]
			  ,sd.[Type] as TypeDocument
		  FROM [dbo].[SaleDocumentPayment] sdp
		   inner join [dbo].[SaleDocument] sd on sd.ID=sdp.DocumentID
		  WHERE 	  
			  [DocumentID] = @p_ID
	end

	else if @p_TypeScreen = 'name' begin		
	 select sum(amount) as SummCardPayment  from SaleDocumentPayment where PaymentType = 1 and DocumentID = @p_ID
	end
	 
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetPrepaymentAmount 2001020000029
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentPrepaymentAmount]
	@p_DocumentID bigint=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT
		 SUM(sdp.[Amount]) as [Amount]
	FROM [dbo].[SaleDocumentPrepayment] sdp
		inner join [dbo].[SaleDocument] sd on sd.[ID] = sdp.[DocumentID]
	WHERE
		sd.[DocumentNumber] = @p_DocumentID
		AND sdp.UseDocumentID IS NULL

END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, сборка фильтров
-- =============================================
-- [xp_GetSaleDocumentPrepaymentFilters] 'Grid'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentPrepaymentFilters]
	@p_TypeScreen varchar(40) --Item, Grid, InGrid	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables	
		@p_CreatedUsers nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_IsActive nvarchar(MAX)='',
		@p_Source nvarchar(MAX)='',
		@p_Amount_Min money = 0,
		@p_Amount_Max money = 0

if(@p_TypeScreen = 'InGrid')
begin
	--Users
-------------------------------------------------------------------
	SELECT
		@p_CreatedUsers = CONCAT(@p_CreatedUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					sdp.[CreatedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[SaleDocumentPrepayment] sdp
					left join dbo.Users u on u.[ID]=sdp.[CreatedByUserID]
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
		) as Temp
	IF LEN(@p_CreatedUsers) > 2 SET @p_CreatedUsers = SUBSTRING(@p_CreatedUsers,1, LEN(@p_CreatedUsers)-1) ELSE SET @p_CreatedUsers = NULL

	--LastUsers
-------------------------------------------------------------------
	SELECT
		@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					sdp.[LastModifiedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[SaleDocumentPrepayment] sdp
					inner join dbo.Users u on u.[ID]=sdp.[LastModifiedByUserID]
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
		) as Temp
	IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL
	
	--IsActive
-------------------------------------------------------------------
	SELECT
		@p_IsActive = CONCAT(@p_IsActive,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					case when sdp.UseDocumentID = 0 then 1 else 0 end as [Value]
				FROM [dbo].[SaleDocumentPrepayment] sdp
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
		) as Temp
	IF LEN(@p_IsActive) > 2 SET @p_IsActive = SUBSTRING(@p_IsActive,1, LEN(@p_IsActive)-1) ELSE SET @p_IsActive = NULL

	--p_Source
-------------------------------------------------------------------
	SELECT
		@p_Source = CONCAT(@p_Source,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Source])),'|')
		FROM (
				SELECT DISTINCT
					case 
						when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
						when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3	
						when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
						when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2						
					end as [Source]					
				FROM [dbo].[SaleDocumentPrepayment] sdp
					left join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]
		) as Temp
	IF LEN(@p_Source) > 2 SET @p_Source = SUBSTRING(@p_Source,1, LEN(@p_Source)-1) ELSE SET @p_Source = NULL

	--Amount
-------------------------------------------------------------------
	SELECT @p_Amount_Min=(SELECT MIN(sdp.[Amount])
						from [dbo].[SaleDocumentPrepayment] sdp
						inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
						),
		   @p_Amount_Max=(SELECT MAX(sdp.[Amount])
						from [dbo].[SaleDocumentPrepayment] sdp
						inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
						)

	--Out Final Result

-------------------------------------------------------------------
	SELECT
			@p_CreatedUsers as [CreatedByUserID],
			@p_LastUsers as [LastModifiedByUserID],
			@p_IsActive as [IsActive],
			@p_Source as [Source],
		 	@p_Amount_Min as AmountMin,
			@p_Amount_Max as AmountMax
			end

else

	begin
	--Users
-------------------------------------------------------------------
	SELECT
		@p_CreatedUsers = CONCAT(@p_CreatedUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					u.id as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[SaleDocumentPrepayment] sdp					
					left join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]	
					left join dbo.Users u on u.[ID]=sd.UserID				
		) as Temp
	IF LEN(@p_CreatedUsers) > 2 SET @p_CreatedUsers = SUBSTRING(@p_CreatedUsers,1, LEN(@p_CreatedUsers)-1) ELSE SET @p_CreatedUsers = NULL

	--LastUsers
-------------------------------------------------------------------
	SELECT
		@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					u.id as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[SaleDocumentPrepayment] sdp					
					left join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[UseDocumentID]		
					left join dbo.Users u on u.[ID]=sd.UserID			
		) as Temp
	IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL
	
	--IsActive
-------------------------------------------------------------------
	SELECT
		@p_IsActive = CONCAT(@p_IsActive,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					case when sdp.UseDocumentID = 0 then 1 else 0 end as [Value]
				FROM [dbo].[SaleDocumentPrepayment] sdp
					left join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]					
		) as Temp
	IF LEN(@p_IsActive) > 2 SET @p_IsActive = SUBSTRING(@p_IsActive,1, LEN(@p_IsActive)-1) ELSE SET @p_IsActive = NULL

	--p_Source
-------------------------------------------------------------------
	SELECT
		@p_Source = CONCAT(@p_Source,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Source])),'|')
		FROM (
				SELECT DISTINCT
					case 
						when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
						when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3	
						when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
						when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2				
					end as [Source]					
				FROM [dbo].[SaleDocumentPrepayment] sdp
					left join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]	
		) as Temp
	IF LEN(@p_Source) > 2 SET @p_Source = SUBSTRING(@p_Source,1, LEN(@p_Source)-1) ELSE SET @p_Source = NULL

	--Amount
-------------------------------------------------------------------
	SELECT @p_Amount_Min=(SELECT MIN(sdp.[Amount])
						from [dbo].[SaleDocumentPrepayment] sdp
						inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]
						),
		   @p_Amount_Max=(SELECT MAX(sdp.[Amount])
						from [dbo].[SaleDocumentPrepayment] sdp
						left join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]
						)

	--Out Final Result

-------------------------------------------------------------------
	SELECT
			@p_CreatedUsers as [CreatedByUserID],
			@p_LastUsers as [LastModifiedByUserID],
			@p_IsActive as [IsActive],
			@p_Source as [Source],
		 	@p_Amount_Min as AmountMin,
			@p_Amount_Max as AmountMax			
			end
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, подсчет сумм
-- =============================================
-- xp_GetSaleDocumentPrepaymentSummary 'Grid',  '', '01.01.1753 0:00:10', '11.12.2022 11:53:41',   '01.01.1753 0:00:10', '11.12.2022 11:53:41',  'All', 'All', '''1''', 'All', 0, 1000000
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentPrepaymentSummary]
	@p_TypeScreen varchar(40), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_FromCreatedDate datetime,
	@p_ToCreatedDate datetime,

	@p_FromLastModifiedDate datetime,
	@p_ToLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_IsActive nvarchar(MAX)='',	
	@p_Source nvarchar(MAX)='',

	@p_Amount_Min money = 0,
	@p_Amount_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	
	declare @p_search_request nvarchar(MAX) = ''
	declare @end_request nvarchar(max) = ''

	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToLastModifiedDate, 102)
	declare @DateFromCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromCreatedDate, 120)
	declare @DateToCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToCreatedDate, 102)

	if (@p_IsActive = '' or @p_Source = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '')
	begin
	SELECT TOP 1
	0 as DocumentCount,
	0 as DocumentSummaryAmount
	return	
	end
	
	declare @p_search_isactive nvarchar(MAX) = ''
	declare @p_search_source nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''

	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''
	declare @p_search_timeCreatedDate nvarchar(MAX) = ''

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Amount nvarchar(MAX) = ''
		
	set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
	set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
	set @p_IsActive = REPLACE(@p_IsActive, '|', ',')
	set @p_Source = REPLACE(@p_Source, '|', ',')

	set @p_filter_request_Amount = ' 		
					(
						(
							( sdp.[Amount]  >= ' + convert(nvarchar(40),@p_Amount_Min,126 ) + ') and
							( sdp.[Amount] <= ' + convert(nvarchar(40),@p_Amount_Max,126 ) + ')
						) 					
					)'	

		if (@DateFromLastModifiedDate_string !='1753-01-01 00:00:10')	
		begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, sdp.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + ''' or CONVERT(date, sdp.LastModifiedDate) IS NULL						
				)'
		end

		if (@DateFromCreatedDate_string !='1753-01-01 00:00:10')	
		begin
			set	@DateFromCreatedDate_string = CONVERT(nvarchar, @p_FromCreatedDate, 102)
			set @p_search_timeCreatedDate =  		
				' and (
					CONVERT(date, sdp.CreatedDate) between ''' + @DateFromCreatedDate_string  + ''' and ''' + @DateToCreatedDate_string + '''				
				)'
		end
				
		set @p_filter_request = @p_filter_request_Amount + @p_search_timeLastModifiedDate + @p_search_timeCreatedDate

		if (@p_search != '')
			set @p_search_request = ' and
			(
				(
					(
						sdp.[Description] like ''' + @p_search_money + ''' OR cast(sd.[DocumentNumber] as nvarchar(40)) like ''' + @p_search_money + ''' 
					)				
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request	
	
		if (@p_IsActive != 'All')
			set @p_search_isactive = ' and case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 1 else 0 end in (' + @p_IsActive + ') '
		if (@p_Source != 'All')
			set @p_search_source = ' and case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2									
								end in (' + @p_Source + ') '
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and u.[ID] in (' + @p_CreatedByUserID + ') '
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_lastModifiedByUserID = ' and ul.[ID] in (' + @p_LastModifiedByUserID + ') '

		if @p_TypeScreen in ('grid') 
			begin
				set @p_search_request = @p_search_request + @p_search_isactive + @p_search_source + @p_search_createdByUserID + @p_search_lastModifiedByUserID
			end
			if @p_TypeScreen in ('ingrid') 
			begin
				set @p_search_request = @p_search_request + @p_search_isactive + @p_search_source + @p_search_createdByUserID + @p_search_lastModifiedByUserID + ' and sdp.[UseDocumentID] = 0 '
			end

	set @end_request = 
	'SELECT 
				COUNT(st.[ID]) as DocumentCount,
				SUM(Amount) as DocumentSummaryAmount					
				FROM (
						SELECT
							sdp.[ID]
							,sdp.[DocumentID] as DocumentID
							,sdp.[UseDocumentID] as UseDocumentID
							,sd.[DocumentNumber] as DocumentNumber
							,sd1.[DocumentNumber] as UseDocumentNumber
							,sdp.[Description]
							,sdp.[Amount]
							,case 
								when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
								when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3	
								when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
								when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2	
							end as [Source]
							,sdp.[CreatedDate]
							,sdp.[LastModifiedDate]
							,sdp.[CreatedByUserID]
							,sdp.[LastModifiedByUserID]	  	  
							,u.ID as UserID
							,ul.ID as LUserID							 
							,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
					FROM [dbo].[SaleDocumentPrepayment] sdp							
							left join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]
							left join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]
							left join dbo.Users u on u.[ID]=sd.[UserID]
							left join dbo.Users ul on ul.[ID]=sd1.[UserID]
							where '
							+ @p_search_request
				+') AS st'
											
	 --print @end_request
	 EXECUTE (@end_request);		
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Переоценка продукции, результирующая грида
-- =============================================
-- xp_GetSaleDocumentPrepaymentTable 'ingrid', '',   0, 0,   '10.28.2020 0:00:00', '10.28.2021 16:00:00',   '01.01.1753 0:00:10', '10.28.2021 16:00:00',    'All', 'All', 'All', 'All',  0, 99999, 0, 2000, 'ID', 0
-- xp_GetSaleDocumentPrepaymentTable 'Grid', '',   0 ,   '01.01.1753 0:00:00', '05.25.2022 16:00:00',   '01.01.1753 0:00:00', '05.25.2022 16:00:00',    'All', 'All', 'All', 'All',  100, 200, 1, 14, 'Amount', 0
-- xp_GetSaleDocumentPrepaymentTable 'Grid', '',   0 ,   '01.01.1753 0:00:00', '05.25.2022 16:00:00',   '01.01.1753 0:00:00', '05.25.2022 16:00:00',    'All', 'All', 'All', 'All',  100, 10250, 0, 19, 'ID', 0
-- xp_GetSaleDocumentPrepaymentTable 'Item', '', 154, 0, '01.01.1753 0:00:00', '05.25.2022 16:00:00',   '01.01.1753 0:00:00', '05.25.2022 16:00:00',    'All', 'All', 'All', 'All',  100, 10250, 0, 19, 'ID', 0
-- xp_GetSaleDocumentPrepaymentTable 'ItemByStatus', '', 769, 0, 2001020000190, '01.01.1753 0:00:00', '05.25.2022 16:00:00',   '01.01.1753 0:00:00', '05.25.2022 16:00:00',    'All', 'All', 'All', '2|', 0, 1000000, 0, 19, 'ID',  0

-- xp_GetSaleDocumentPrepaymentTable 'Grid', '', 0, 0, 0, '01.01.1753 0:00:10', '05.25.2022 16:00:00',   '01.01.1753 0:00:10', '05.25.2022 16:00:00', 'All', 'All', '1', 'All', 0, 1000000, 0, 190000, 'ID',  1
-- =============================================

CREATE PROCEDURE [dbo].[xp_GetSaleDocumentPrepaymentTable]
	@p_TypeScreen varchar(40), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,
	@p_UseDocumentID int,
	@p_ExtReffID bigint,

	@p_FromCreatedDate datetime,
	@p_ToCreatedDate datetime,

	@p_FromLastModifiedDate datetime,
	@p_ToLastModifiedDate datetime,

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_IsActive nvarchar(MAX)='',	
	@p_Source nvarchar(MAX)='',

	@p_Amount_Min money = 0,
	@p_Amount_Max money = 0,	

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''
	declare @p_MaxValue int = 0
	declare @p_MinValue int = 0

	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToLastModifiedDate, 102)
	declare @DateFromCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromCreatedDate, 120)
	declare @DateToCreatedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToCreatedDate, 102)

	declare @p_search_isactive nvarchar(MAX) = ''
	declare @p_search_source nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''

	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''
	declare @p_search_timeCreatedDate nvarchar(MAX) = ''

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Amount nvarchar(MAX) = ''	
	declare @p_search_request nvarchar(MAX) = ''
	declare @end_request nvarchar(max) = ''

	set @p_TypeScreen = LOWER(@p_TypeScreen)
	print @p_TypeScreen

	if @p_TypeScreen='item' begin
		SELECT TOP 1 sdp.[ID]
					,sdp.[DocumentID]
					,sdp.[UseDocumentID]
					,sd.[DocumentNumber] as DocumentNumber
					,sd1.[DocumentNumber] as UseDocumentNumber
					,sdp.[Description]
					,sdp.[Amount]
					,sdp.[CreatedDate]
					,sdp.[LastModifiedDate]
					,sdp.[CreatedByUserID]
					,sdp.[LastModifiedByUserID]	 
					,case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 1 else 0 end as IsActive
							  ,case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3	
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2														
								end as [Source] 	  
					,u.ID as UserID
					,ul.ID as LUserID					
					,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
					,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
					,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
					,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
					,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=sdp.[ID]) as AmountSumm
		FROM [dbo].[SaleDocumentPrepayment] sdp
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]
					inner join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]
					left join dbo.Users u on u.[ID]=sd.UserID
								left join dbo.Users ul on ul.[ID]=sd1.UserID
								left join [dbo].[SaleDocumentPrepayment] sdp1 on sdp1.[DocumentID]=sdp.[UseDocumentID]
		where sdp.ID=@p_ID
	end

	if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_IsActive = '' or @p_Source = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '')
				return
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
		set @p_IsActive = REPLACE(@p_IsActive, '|', ',')
		set @p_Source = REPLACE(@p_Source, '|', ',')

		set @p_filter_request_Amount = ' 		
					(
						(
							( sdp.[Amount]  >= ' + convert(nvarchar(40),@p_Amount_Min,126 ) + ') and
							( sdp.[Amount] <= ' + convert(nvarchar(40),@p_Amount_Max,126 ) + ')
						) 					
					)'	

		if (@DateFromLastModifiedDate_string !='1753-01-01 00:00:10')	
		begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, sdp.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + ''' or CONVERT(date, sdp.LastModifiedDate) IS NULL						
				)'
		end

		if (@DateFromCreatedDate_string !='1753-01-01 00:00:10')	
		begin
			set	@DateFromCreatedDate_string = CONVERT(nvarchar, @p_FromCreatedDate, 102)
			set @p_search_timeCreatedDate =  		
				' and (
					CONVERT(date, sdp.CreatedDate) between ''' + @DateFromCreatedDate_string  + ''' and ''' + @DateToCreatedDate_string + '''				
				)'
		end
				
		set @p_filter_request = @p_filter_request_Amount + @p_search_timeLastModifiedDate + @p_search_timeCreatedDate

		if (@p_search != '')
			set @p_search_request = ' and
			(
				(
					(
						sdp.[Description] like ''' + @p_search_money + ''' OR cast(sd.[DocumentNumber] as nvarchar(40)) like ''' + @p_search_money + ''' 
					)				
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request	
	
		if (@p_IsActive != 'All')
			set @p_search_isactive = ' and case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 1 else 0 end in (' + @p_IsActive + ') '
		if (@p_Source != 'All')
			set @p_search_source = ' and case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2									
								end in (' + @p_Source + ') '
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and u.[ID] in (' + @p_CreatedByUserID + ') '
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_lastModifiedByUserID = ' and ul.[ID] in (' + @p_LastModifiedByUserID + ') '

		if @p_TypeScreen in ('grid') 
			begin
				set @p_search_request = @p_search_request + @p_search_isactive + @p_search_source + @p_search_createdByUserID + @p_search_lastModifiedByUserID
			end
			if @p_TypeScreen in ('ingrid') 
			begin
				set @p_search_request = @p_search_request + @p_search_isactive + @p_search_source + @p_search_createdByUserID + @p_search_lastModifiedByUserID + ' and sdp.[UseDocumentID] = 0 '
			end
	
		if(@p_SortColumn='DisplayUserName')
			set  @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else if(@p_SortColumn='LdisplayUserName')
			set  @p_SortColumn='(Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName)) '
		else if(@p_SortColumn='DocumentNumber')
			set  @p_SortColumn=' sd.[DocumentNumber] '
		else if(@p_SortColumn='IsActive')
			set  @p_SortColumn=' case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 1 else 0 end '
		else if(@p_SortColumn='Source')
			set  @p_SortColumn=' case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3							 									
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2
								end '
		else
			set @p_SortColumn='sdp.'+@p_SortColumn

		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,sdp.[ID]
							  ,sdp.[DocumentID] as DocumentID
							  ,sdp.[UseDocumentID] as UseDocumentID
							  ,sd.[DocumentNumber] as DocumentNumber
							  ,sd1.[DocumentNumber] as UseDocumentNumber
							  ,sdp.[Description]
							  ,sdp.[Amount]
							  ,case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 1 else 0 end as IsActive
							  ,case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2									
								end as [Source]
							  ,sdp.[CreatedDate]
							  ,sdp.[LastModifiedDate]
							  ,sdp.[CreatedByUserID]
							  ,sdp.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID							 
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
						FROM [dbo].[SaleDocumentPrepayment] sdp								
								left join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] 
								left join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]
								left join dbo.Users u on u.[ID]=sd.UserID
								left join dbo.Users ul on ul.[ID]=sd1.UserID							
								where '
								+ @p_search_request 
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)	+' order by st.RowNumber asc'				
		--print @end_request
		EXECUTE (@end_request);	
	end	
		
	if @p_TypeScreen='itembystatus' begin	
		SELECT TOP 1 sdp.[ID]
					,sdp.[DocumentID]
					,sdp.[UseDocumentID]
					,sdp.[Description]
					,sdp.[Amount]
					,sdp.[CreatedDate]
					,sdp.[LastModifiedDate]
					,sdp.[CreatedByUserID]
					,sdp.[LastModifiedByUserID]	
					,case when sd1.[DocumentNumber] IS NULL or sdp.UseDocumentID < 0 then 1 else 0 end as IsActive
							  ,case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3	
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2													
								end as [Source]  	  
					,u.ID as UserID
					,ul.ID as LUserID
					,case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then sd.[DocumentNumber]
						else -1*sd.[DocumentNumber] end as DocumentNumber					
					,sd1.[DocumentNumber] as UseDocumentNumber
					,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
					,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
					,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
					,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
					,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=sdp.[ID]) as AmountSumm
		FROM [dbo].[SaleDocumentPrepayment] sdp
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]
					left join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]
					left join dbo.Users u on u.[ID]=sd.UserID
								left join dbo.Users ul on ul.[ID]=sd1.UserID
								left join [dbo].[SaleDocumentPrepayment] sdp1 on sdp1.[DocumentID]=sdp.[UseDocumentID]
		where sd.[DocumentNumber]=@p_ExtReffID 		
		end	

		if @p_TypeScreen='Name' 
		begin
		if(@p_UseDocumentID != 0)
		begin		
		SELECT  sdp.[ID]
					,sdp.[DocumentID]
					,sdp.[UseDocumentID]
					,sdp.[Description]
					,sdp.[Amount]
					,sdp.[CreatedDate]
					,sdp.[LastModifiedDate]
					,sdp.[CreatedByUserID]
					,sdp.[LastModifiedByUserID]	 
					,case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 1 else 0 end as IsActive
							  ,case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3	
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2													
								end as [Source]  	  
					,u.ID as UserID
					,ul.ID as LUserID
					,sd.[DocumentNumber] as DocumentNumber
					,sd1.[DocumentNumber] as UseDocumentNumber
					,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
					,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
					,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
					,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
					,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=sdp.[ID]) as AmountSumm
		FROM [dbo].[SaleDocumentPrepayment] sdp
					left join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]
					inner join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]
					left join dbo.Users u on u.[ID]=sd.UserID
								left join dbo.Users ul on ul.[ID]=sd1.UserID
								left join [dbo].[SaleDocumentPrepayment] sdp1 on sdp1.[DocumentID]=sdp.[UseDocumentID]
		where sd1.[ID]= @p_UseDocumentID
		end

		if(@p_ID != 0)
		begin
		SELECT  sdp.[ID]
					,sdp.[DocumentID]
					,sdp.[UseDocumentID]
					,sdp.[Description]
					,sdp.[Amount]
					,sdp.[CreatedDate]
					,sdp.[LastModifiedDate]
					,sdp.[CreatedByUserID]
					,sdp.[LastModifiedByUserID]	 
					,case when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 1 else 0 end as IsActive
							  ,case 
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID > -1 then 0
									when sd1.[DocumentNumber] IS NULL and sdp.UseDocumentID < 0 then 3	
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 6 then 1
									when sd1.[DocumentNumber] IS NOT NULL and sd1.Type = 9 then 2													
								end as [Source]  	  
					,u.ID as UserID
					,ul.ID as LUserID
					,sd.[DocumentNumber] as DocumentNumber
					,sd1.[DocumentNumber] as UseDocumentNumber
					,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
					,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
					,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
					,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
					,(SELECT Count(*) from [dbo].[RevaluationDocumentDetails] WHERE DocumentID=sdp.[ID]) as AmountSumm
		FROM [dbo].[SaleDocumentPrepayment] sdp
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID]
					left join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[UseDocumentID]
					left join dbo.Users u on u.[ID]=sd.UserID
								left join dbo.Users ul on ul.[ID]=sd1.UserID
								left join [dbo].[SaleDocumentPrepayment] sdp1 on sdp1.[DocumentID]=sdp.[UseDocumentID]
		where sd.[ID]= @p_ID
		end
	end
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, детали
-- =============================================
-- xp_GetSaleDocumentProduct 'Name', 0, 6597
-- xp_GetSaleDocumentProduct 'Item', 63677, 0
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentProduct]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter	
	@p_ProductID int,
	@p_DocumentID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	set @p_TypeScreen = LOWER(@p_TypeScreen)
			
	if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
			SELECT sd.[ID]
				  ,sd.[ProductID]
				  ,sd.[DocumentID]
				  ,sd.[LineDocument]
				  ,sd.[Quantity]
				  ,sd.[TagPriceWithVat]
				  ,sd.[TagPriceWithOutVat]
				  ,sd.[PriceFromCRM]
				  ,sd.[SalePriceWithVat]
				  ,sd.[SalePriceWithoutVAT]
				  ,sd.[DiscountType]
				  ,sd.[DiscountDescription]
				  ,sd.[InternetNumber]
				  ,sd.[ReasonReturnType]
				  ,sd.[ReasonReturnDescription]
				  ,dc.DocumentNumber as DocumentNumber
				  ,cur.[Code] as CodeCurrency
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,Concat(pr.[Type],' ',pr.[Model]) as [Description]
				  ,sd.[CreatedDate]
				  ,sd.[LastModifiedDate]
				  ,sd.[CreatedByUserID]
				  ,sd.[LastModifiedByUserID]				 
			  FROM [dbo].[SaleDocumentProduct] sd
					left join [dbo].[Product] pr on pr.ID=sd.ProductID
					left join dbo.[SaleDocument] dc on dc.ID=sd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dc.Currency
			  WHERE sd.DocumentID = @p_DocumentID
			  order by sd.[LineDocument]
	end

	if @p_TypeScreen in ('Item') begin ---------------------------------------------------------------------
			SELECT TOP 1
			      sd.[ID]
				  ,sd.[ProductID]
				  ,sd.[DocumentID]
				  ,sd.[LineDocument]
				  ,sd.[Quantity]
				  ,sd.[TagPriceWithVat]
				  ,sd.[TagPriceWithOutVat]
				  ,sd.[PriceFromCRM]
				  ,sd.[SalePriceWithVat]
				  ,sd.[SalePriceWithoutVAT]
				  ,sd.[DiscountDescription]
				  ,sd.[DiscountType]
				  ,sd.[DiscountDescription]
				  ,sd.[InternetNumber]
				  ,sd.[ReasonReturnType]
				  ,sd.[ReasonReturnDescription]
				  ,dc.DocumentNumber as DocumentNumber
				  ,cur.[Code] as CodeCurrency
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,Concat(pr.[Type],' ',pr.[Model]) as [Description]
				  ,sd.[CreatedDate]
				  ,sd.[LastModifiedDate]
				  ,sd.[CreatedByUserID]
				  ,sd.[LastModifiedByUserID]				 
			  FROM [dbo].[SaleDocumentProduct] sd
					left join [dbo].[Product] pr on pr.ID=sd.ProductID
					left join dbo.[SaleDocument] dc on dc.ID=sd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dc.Currency
			  WHERE sd.[ProductID] = @p_ProductID
					AND pr.[Status]=9
					AND dc.[Type]=9
			  ORDER BY sd.[LastModifiedDate] DESC
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, детали
-- =============================================
-- xp_GetSaleDocumentRelatedProduct 'Name', 25432
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentRelatedProduct]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter	
	@p_DocumentID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	set @p_TypeScreen = LOWER(@p_TypeScreen)
			
	if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
			SELECT sd.[ID]
				  ,sd.[Model]
				  ,sd.[PartNumber]
				  ,sd.[DocumentID]
				  ,sd.[LineDocument]
				  ,sd.[Quantity]
				  ,sd.[TagPriceWithVat]
				  ,sd.[TagPriceWithOutVat]
				  ,sd.[SalePriceWithVAT]
				  ,sd.[SalePriceWithoutVAT]
				  ,sd.[CreatedDate]
				  ,sd.[LastModifiedDate]
				  ,sd.[CreatedByUserID]
				  ,sd.[LastModifiedByUserID]
				  ,rpg.[Description] as [Description]
				  ,dc.[DocumentNumber] as [DocumentNumber]
				  ,cur.[Code] as [CodeCurrency]
				  ,cur.[ShortDescription] as [CurrencyShortDescription]
				  ,cur.[LongDescription] as [CurrencyLongDescription]
				  ,sd.[Supplier]
			  FROM [dbo].[SaleDocumentRelatedProduct] sd
					left join dbo.[RelatedProductGuide] rpg on rpg.[Model]=sd.[Model] and rpg.[Supplier]=sd.[Supplier]
					left join dbo.[SaleDocument] dc on dc.ID=sd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dc.Currency
			  where dc.ID = @p_DocumentID
			  order by sd.[LineDocument]
	end
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		Kuliokov.A.U
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.SaleDocumentServices
-- =============================================
-- xp_GetSaleDocumentScrapDocument_20210216172933 'Name', 25439
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentScrapDocument]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_DocumentID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @dt_now datetime=getdate()

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='Name' begin
		SELECT sdb.[ID]
			  ,sdb.[DocumentID]
			  ,sdb.[ScrapDocumentID]
			  ,sdb.[CreatedDate]
			  ,sdb.[LastModifiedDate]
			  ,sdb.[CreatedByUserID]
			  ,sdb.[LastModifiedByUserID]
			  ,sd.[ScrapDocumentNumber]
			  ,(SELECT Sum(IsNull(ss.[Summa],0)) FROM [dbo].[ScrapDocumentDetails] AS ss WHERE ss.[DocumentID]=sd.[ID]) AS [Amount]
			  ,(SELECT Sum(IsNull(ss.[Weight],0)) FROM [dbo].[ScrapDocumentDetails] AS ss WHERE ss.[DocumentID]=sd.[ID]) AS [Weight]
			  ,(SELECT Sum(IsNull(ss.[Quantity],0)) FROM [dbo].[ScrapDocumentDetails] AS ss WHERE ss.[DocumentID]=sd.[ID]) AS [Quantity]
			  ,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
			  ,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
			  ,ve.[ID] AS [VendorID]
		  FROM [dbo].[SaleDocumentScrapDocument] AS sdb
			left join [dbo].[ScrapDocument] AS sd ON sd.[ID]=sdb.[ScrapDocumentID]
			left join [dbo].[Users] u on u.[ID]=sdb.[CreatedByUserID]
			left join [dbo].[Users] ul on ul.[ID]=sdb.[LastModifiedByUserID]
			left join [dbo].[Vendor] AS ve ON ve.[ID]=sd.[VendorID]
		  WHERE
			sdb.[DocumentID] = @p_DocumentID
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.SaleDocumentServices
-- =============================================
-- xp_GetSaleDocumentServices 'Name', 109
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentServices]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_DocumentID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @dt_now datetime=getdate()

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='Name' begin
		SELECT sds.[ID]
			  ,sds.[DocumentID]
			  ,sds.[Type]
			  ,sds.[Amount]
			  ,sds.[Description]
			  ,sds.[CreatedDate]
			  ,sds.[LastModifiedDate]
			  ,sds.[CreatedByUserID]
			  ,sds.[LastModifiedByUserID]
		  FROM [dbo].[SaleDocumentServices] as sds
		  WHERE
			   sds.[DocumentID] = @p_DocumentID
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, сборка фильтров
-- =============================================
-- [xp_GetSaleDocumentServicesFilters] 'Grid'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentServicesFilters]
	@p_TypeScreen varchar(40) --Item, Grid, InGrid	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables	
		@p_CreatedUsers nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_IsActive nvarchar(MAX)='',
		@p_Source nvarchar(MAX)='',
		@p_Amount_Min money = 0,
		@p_Amount_Max money = 0


	--Users
-------------------------------------------------------------------
	SELECT
		@p_CreatedUsers = CONCAT(@p_CreatedUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					sdp.[CreatedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[SaleDocumentServices] sdp
					left join dbo.Users u on u.[ID]=sdp.[CreatedByUserID]
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
		) as Temp
	IF LEN(@p_CreatedUsers) > 2 SET @p_CreatedUsers = SUBSTRING(@p_CreatedUsers,1, LEN(@p_CreatedUsers)-1) ELSE SET @p_CreatedUsers = NULL

	--LastUsers
-------------------------------------------------------------------
	SELECT
		@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					sdp.[LastModifiedByUserID] as [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) as [Value]
				FROM [dbo].[SaleDocumentServices] sdp
					inner join dbo.Users u on u.[ID]=sdp.[LastModifiedByUserID]
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
		) as Temp
	IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL
	
	--IsActive
-------------------------------------------------------------------
	SELECT
		@p_IsActive = CONCAT(@p_IsActive,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					case when sdp.DocumentID = 0 then 1 else 0 end as [Value]
				FROM [dbo].[SaleDocumentServices] sdp
					inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
		) as Temp
	IF LEN(@p_IsActive) > 2 SET @p_IsActive = SUBSTRING(@p_IsActive,1, LEN(@p_IsActive)-1) ELSE SET @p_IsActive = NULL

	--p_Source
-------------------------------------------------------------------
	SELECT
		@p_Source = CONCAT(@p_Source,LTRIM(RTRIM([Source])),':',LTRIM(RTRIM([Source])),'|')
		FROM (
				SELECT DISTINCT
					case when sdp.DocumentID = 0 then 1 else 0 end as [Source]					
				FROM [dbo].[SaleDocumentServices] sdp
					left join [dbo].[SaleDocument] sd1 on sd1.[ID]=sdp.[DocumentID]
		) as Temp
	IF LEN(@p_Source) > 2 SET @p_Source = SUBSTRING(@p_Source,1, LEN(@p_Source)-1) ELSE SET @p_Source = NULL

	--Amount
-------------------------------------------------------------------
	SELECT @p_Amount_Min=(SELECT MIN(sdp.[Amount])
						from [dbo].[SaleDocumentServices] sdp
						inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
						),
		   @p_Amount_Max=(SELECT MAX(sdp.[Amount])
						from [dbo].[SaleDocumentServices] sdp
						inner join [dbo].[SaleDocument] sd on sd.[ID]=sdp.[DocumentID] AND sd.[Type]=9
						)

	--Out Final Result

-------------------------------------------------------------------
	SELECT
			@p_CreatedUsers as [CreatedByUserID],
			@p_LastUsers as [LastModifiedByUserID],
			@p_IsActive as [IsActive],
			@p_Source as [Source],
		 	@p_Amount_Min as AmountMin,
			@p_Amount_Max as AmountMax

END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		MJF\Voskresenskaya.A
-- Create date: 2020-05-07 13:38
-- Description:	Получение записей из таблицы dbo.SaleDocumentServices
-- =============================================
-- xp_GetSaleDocumentServicesTable 'Name', 109
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentServicesTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_DocumentID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @dt_now datetime=getdate()

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='Name' begin
		SELECT sds.[ID]
			  ,sds.[DocumentID]
			  ,sds.[Type]
			  ,sds.[Amount]
			  ,sds.[Description]
			  ,sds.[CreatedDate]
			  ,sds.[LastModifiedDate]
			  ,sds.[CreatedByUserID]
			  ,sds.[LastModifiedByUserID]
		  FROM [dbo].[SaleDocumentServices] as sds
		  WHERE
			   sds.[DocumentID] = @p_DocumentID
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, подсчет сумм
-- =============================================
-- xp_GetSaleDocumentSummary '', '01.01.1753 0:00:10', '11.12.2022 11:53:41', '01.01.1753 0:00:10', '11.12.2022 11:53:41', 'All', 'All', '9', 1, 28, 0.01, 922337203685477
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentSummary]
	@p_search nvarchar(40)='',

	@p_FromDateSyncDate datetime,
	@p_ToDateSyncDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_Type nvarchar(MAX)='',
	
	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,
	@p_TagPriceWithVat_Min money = 0,
	@p_TagPriceWithVat_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''

	declare @DateFromSyncDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateSyncDate, 120)
	declare @DateToSyncDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateSyncDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)
		
		if (@p_Type = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '')
				return	

		set @p_Type = REPLACE(@p_Type,'|', ',')	
		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID,'|', ',')	
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID,'|', ',')		

		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'
		
		declare @p_search_type nvarchar(MAX) = ''
		declare @p_search_createdByUserID nvarchar(MAX) = ''		
		declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''

		declare @p_search_timeSyncDate nvarchar(MAX) = ''	
		declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVat nvarchar(MAX) = ''
		declare @p_filter_request_DiscountSumm nvarchar(MAX) = ''
		
		set @p_filter_request_Quantity = '( s.[Count] >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ' and
							s.[Count] <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')'	

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and ( s.[Amount]	>= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ' and
						s.[Amount] <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')'			
		
		if (@DateFromSyncDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromSyncDate_string = CONVERT(nvarchar, @p_FromDateSyncDate, 102)
			set @p_search_timeSyncDate =  		
					' and (
						CONVERT(date, s.SyncDate) between ''' + @DateFromSyncDate_string  + ''' and ''' + @DateToSyncDate_string + '''
					)'	
		end

		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
		begin	
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
					' and (
						CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''
					)'	
		end		

		set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_TagPriceWithVAT + @p_search_timeSyncDate + @p_search_timeLastModifiedDate
		
		declare @p_search_request nvarchar(MAX) = ''

		if (@p_Type != 'All')
			set @p_search_type = ' and s.[Type] in (' + @p_Type + ')'
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ')'			
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ')'	
		
		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.[DocumentNumber] as nvarchar(40)) like ''' + @p_search_money + ''' 
						or
						cast(s.[ClientCardNumber] as nvarchar(40)) like ''' + @p_search_string + '''	
					)				
				)
			)'

		set @p_filter_request = @p_filter_request + @p_search_request + @p_search_type + @p_search_createdByUserID + @p_search_LastModifiedByUserID
			
		Create table #SaleDocument(
					SummaryQuantityLine int,
					[Count] int,
					[Amount] money
				)	
				
		declare @end_request nvarchar(max) = ''	
		set @end_request = 
		'Insert into #SaleDocument
		SELECT 		
					COUNT(st.[ID]) as SummaryQuantityLine,
					SUM(Count) as Count,
					SUM(Amount) as Amount
					FROM (
							SELECT								
								   s.[ID],		
								   s.[Count] as [Count],
								   s.[Amount] as Amount
							FROM [dbo].[SaleDocument] s
									left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
									left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
									+ @p_filter_request					
										
					+')  AS st  
					select * from #SaleDocument'											
		EXECUTE (@end_request);	
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, результирующая грида
-- =============================================
-- xp_GetSaleDocumentTable 'Grid', '', 0, '01.01.1753 0:00:10', '02.12.2020 18:20:25', '01.01.1753 0:00:10', '02.12.2020 18:20:25', 'All', 'All', '9', 1, 16, 0.01, 11112412, 0, 2, 'ID', 1
-- xp_GetSaleDocumentTable 'Grid', '', 0, '01.01.1753 0:00:10', '02.12.2020 18:20:25', '01.01.1753 0:00:10', '02.12.2020 18:20:25', 'All', 'All', '9', 1, 16, 0.01, 11112412, 0, 13, 'ID', 0
-- xp_GetSaleDocumentTable 'Grid', '', 431, '01.01.1753 0:00:10', '06.15.2020 19:19:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 'All', 'All', 'All', 0, 12, 100, 20000000, 0, 1003, 'ID', 0
-- xp_GetSaleDocumentTable 'item', '', 431, '01.01.1753 0:00:10', '02.12.2020 18:20:25', '01.01.1753 0:00:10', '02.12.2020 18:20:25', 'All', 'All', '9', 0, 100000, 0, 100000, 0, 20, 'ID', 1
-- xp_GetSaleDocumentTable 'Grid', '', 0, '01.01.1753 0:00:10', '02.12.2020 18:20:25', '01.01.1753 0:00:10', '02.12.2020 18:20:25', 'All', 'All', '9', 0, 100000, 0, 100000, 0, 20, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSaleDocumentTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID bigint,
	
	@p_FromDateSyncDate datetime,
	@p_ToDateSyncDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_Type nvarchar(MAX)='',

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,
	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''
	declare @p_MaxValue int = 0
	declare @p_MinValue int = 0

	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)
	declare @DateFromSyncDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateSyncDate, 120)
	declare @DateToSyncDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateSyncDate, 102)

	declare @p_search_type nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''		
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''

	declare @p_search_timeSyncDate nvarchar(MAX) = ''	
	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Quantity nvarchar(MAX) = ''	
	declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''

	declare @p_filter_request_Vat nvarchar(MAX) = ''
	declare @p_filter_request_DiscountSumm nvarchar(MAX) = ''

	declare @end_request nvarchar(max) = ''	

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT TOP 1 s.[ID]
							  ,s.[DocumentNumber]
							  ,s.[Type] as TypeDocument					
							  ,s.[UserID]
							  ,s.[ClientCardNumber]
							  ,s.[Currency]
							  ,s.[SyncDate]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]					
							  ,s.[ClientPhone] as NumberPhone
							  ,s.[ClientEmail] as Email					
							  ,s.[SendCheck]
							  ,u.ID as CUserID
							  ,ul.ID as LUserID
							  ,(SELECT 20) as Vat
							  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
							  ,u.[Number] as NumberUserWRK
							  ,s.[Count]
							  ,s.[Amount]
							  ,cur.[ShortDescription] as CurrencyShortDescription
							  ,cur.[LongDescription] as CurrencyLongDescription
							  ,cur.[Code] as CodeCurrency
						FROM [dbo].[SaleDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]
								left join [dbo].[Currency] cur on cur.Code=s.Currency
					where s.[ID]=@p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_Type = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '')
				return
		set @p_Type = REPLACE(@p_Type,'|', ',')	
		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID,'|', ',')	
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID,'|', ',')	
			
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC'
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount

		set @p_filter_request_Quantity = '( s.[Count] >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ' and
							s.[Count] <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')'	

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and ( s.[Amount]	>= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ' and
						s.[Amount] <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')'			
		
		if (@DateFromSyncDate_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFromSyncDate_string = CONVERT(nvarchar, @p_FromDateSyncDate, 102)
			set @p_search_timeSyncDate =  		
					' and (
						CONVERT(date, s.SyncDate) between ''' + @DateFromSyncDate_string  + ''' and ''' + @DateToSyncDate_string + '''
					)'	
			end
		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
		begin	
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
					' and (
						CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''
					)'	
					end		

		set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_TagPriceWithVAT + @p_search_timeSyncDate + @p_search_timeLastModifiedDate
		
		declare @p_search_request nvarchar(MAX) = ''

		if (@p_Type != 'All')
			set @p_search_type = ' and s.[Type] in (' + @p_Type + ')'
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ')'			
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ')'	
		
		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.[DocumentNumber] as nvarchar(40)) like ''' + @p_search_money + ''' 
						or
						cast(s.[ClientCardNumber] as nvarchar(40)) like ''' + @p_search_string + '''	
					)				
				)
			)'

		set @p_filter_request = @p_filter_request + @p_search_request + @p_search_type + @p_search_createdByUserID + @p_search_LastModifiedByUserID
		
		if(@p_SortColumn='CreatedByUserID')
			set  @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else if(@p_SortColumn='ShortLDisplayNameUser')
			set  @p_SortColumn='(Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName)) '
		else
			set @p_SortColumn='s.'+@p_SortColumn

		set @p_search_request = ''
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[DocumentNumber]
							  ,s.[Type] as TypeDocument					
							  ,s.[UserID]
							  ,s.[ClientCardNumber]
							  ,s.[Currency]
							  ,s.[SyncDate]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]					
							  ,s.[ClientPhone] as NumberPhone
							  ,s.[ClientEmail] as Email					
							  ,s.[SendCheck]
							  ,u.ID as CUserID
							  ,ul.ID as LUserID
							  ,(SELECT 20) as Vat
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
							  ,u.[Number] as NumberUserWRK
							  ,s.[Count]
							  ,s.[Amount]
							  ,cur.[ShortDescription] as CurrencyShortDescription
							  ,cur.[LongDescription] as CurrencyLongDescription
							  ,cur.[Code] as CodeCurrency
						FROM [dbo].[SaleDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]
								left join [dbo].[Currency] cur on cur.Code=s.Currency where '
								+ @p_filter_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'
		--print @end_request
		--SELECT @end_request
		EXECUTE (@end_request);	
	end
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, результирующая грида
-- =============================================

-- xp_GetSalePlanDetailDetailsTable 2791


-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSalePlanDetailDetailsTable]
	@p_ID bigint
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	
	declare @p_FromDate datetime;
	declare @UsersID int=0;
	declare @Category int=0;

	SET @p_FromDate = ( SELECT sp.[FromDate] FROM [dbo].[SalePlanDetails] spd								
			left join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID
		where spd.ID = @p_ID )

	SET @UsersID = ( SELECT spd.[UsersID] FROM [dbo].[SalePlanDetails] spd								
			left join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID
		where spd.ID = @p_ID )
	
	SET @Category = ( SELECT sp.Category FROM [dbo].[SalePlanDetails] spd								
			left join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID
		where spd.ID = @p_ID )

	SELECT
			sdd.[DocumentID],
			sdd.[ProductID],
			sdd.[Model],
			sdd.[PartNumber],
			sdd.[Description],
			sd.[Type],
			sdd.[TagPriceWithVAT],
			sdd.[TagPriceWithoutVAT],
			sdd.[Quantity],
			(SELECT (CASE WHEN IsIndividualDiscount = 1 THEN [IndividualDiscount] ELSE [Discount] END))as Discount,
			(SELECT (CASE WHEN IsIndividualDiscount = 1 THEN [IndividualDiscountSumm] ELSE [DiscountSumm] END))as DiscountSumm,			
			sd.[Currency],
			sd.[UserID],
			(select ShortDescription from [dbo].[Currency] as cr where cr.Code= sd.Currency) as CurrencyShortDescription ,
			Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser,
			(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser, 
			(SELECT (CASE WHEN IsIndividualDiscount = 1 THEN [TagPriceWithVAT]-[IndividualDiscountSumm] ELSE [TagPriceWithVAT]-[DiscountSumm] END)) as TagPriceWithVATWithDiscount
							  	
	FROM [dbo].[SaleDocumentDetails] AS sdd
											inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
												AND sd.[UserID] = @UsersID
												AND sd.[LastModifiedDate] BETWEEN @p_FromDate AND DATEADD(day,1,@p_FromDate) 
												AND sd.[DocumentNumber]>0
											left join dbo.Users u on u.[ID]=sd.[UserID]
										WHERE
											    (@Category=0 AND sdd.PartNumber IS NULL)
											OR (@Category=1 AND sdd.PartNumber IS NOT NULL)
											
											END



			
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, сборка фильтров
-- =============================================
-- xp_GetSalePlanDetailsFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSalePlanDetailsFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables		
		@p_Сategory nvarchar(MAX)='',
		@p_Users nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_AmountFact_Min money = 0,
		@p_AmountFact_Max money = 0,
		@p_AmountPlan_Min money = 0,
		@p_AmountPlan_Max money = 0
	
	--Users
-------------------------------------------------------------------
	SELECT
		@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[UsersID] AS [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) AS [Value]
				FROM [dbo].[SalePlanDetails] ua
					left join dbo.Users u on u.[ID]=ua.[UsersID]
		) AS Temp
	IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

	--LastUsers
-------------------------------------------------------------------
	SELECT
		@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([Id])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ua.[LastModifiedByUserID] AS [Id]
					,Concat(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) AS [Value]
				FROM [dbo].[SalePlanDetails] ua
					inner join dbo.Users u on u.[ID]=ua.[LastModifiedByUserID]
		) AS Temp
	IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL

	--Сategory
-------------------------------------------------------------------
	SELECT
		@p_Сategory = CONCAT(@p_Сategory,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					sp.[Category] AS [Value]
				FROM [dbo].[SalePlanDetails] spd
					inner join dbo.SalePlan sp on sp.[ID]=spd.[SalePlanID]
		) AS Temp
	IF LEN(@p_Сategory) > 2 SET @p_Сategory = SUBSTRING(@p_Сategory,1, LEN(@p_Сategory)-1) ELSE SET @p_Сategory = NULL
	
	--AmountFact
-------------------------------------------------------------------
	SELECT @p_AmountFact_Min=MIN([AmountFact]), @p_AmountFact_Max=MAX([AmountFact])
		FROM
			(SELECT
				IsNull((
						SELECT SUM(
									CASE WHEN sdd.[IsIndividualDiscount]=0
										THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
										ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
									END
									) as [SumPlan]
						FROM [dbo].[SaleDocumentDetails] AS sdd
							inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
								AND sd.[UserID] = spd.[UsersID]
								AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
								AND sd.[DocumentNumber]>0
						WHERE
								(sp.Category=0 AND sdd.PartNumber IS NULL)
							OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
					),0) as [AmountFact]
				FROM [dbo].[SalePlanDetails] spd
					inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID
			) st

	--AmountPlan
-------------------------------------------------------------------
	SELECT @p_AmountPlan_Min=MIN(qs1.AmountPlan), @p_AmountPlan_Max=MAX(qs1.AmountPlan) FROM (
		SELECT AmountPlan from [dbo].[SalePlanDetails]  as AmountPlan) as qs1
	
	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Сategory AS [Category],
			@p_Users as Users,
			@p_LastUsers as LastUsers,
		 	@p_AmountFact_Min AS AmountFactMin,
			@p_AmountFact_Max AS AmountFactMax,
			@p_AmountPlan_Min AS AmountPlanMin,
			@p_AmountPlan_Max AS AmountPlanMax
			
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, подсчет сумм
-- =============================================
-- xp_GetSalePlanDetailsSummary '0|1','15|1474|', 0, 99999999999, 0, 99999999999, '01.01.1753 0:00:10', '06.23.2021 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41'
-- xp_GetSalePlanDetailsSummary '0|','1483|', 0, 99999999999, 0, 99999999999, '01.01.1753 0:00:10', '06.23.2021 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSalePlanDetailsSummary]
		@p_Сategory nvarchar(MAX)='',
		@p_UsersID nvarchar(MAX)='',
		@p_AmountFact_Min money = 0,
		@p_AmountFact_Max money = 0,
		@p_AmountPlan_Min money = 0,
		@p_AmountPlan_Max money = 0,
		@p_FromDateFrom datetime,
		@p_FromDateTo datetime,
		@p_ToDateFrom datetime,
		@p_ToDateTo datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;	
	--SET STATISTICS TIME ON;

	if (@p_Сategory = '' ) begin
		SELECT TOP 1
		0 as CountID
		,0 as AmountPlan
		,0 as AmountFack
	end
	else begin
		declare @p_search_money nvarchar(40)
		declare @p_search_string nvarchar(40)
		declare @p_order nvarchar(40)='ASC'
		declare @delimeter nvarchar(10)= '''|'''
		declare @filter_all nvarchar(10)= '''All'''
		declare @p_MaxValue int = 0
		declare @p_MinValue int = 0

		declare @FromDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateFrom, 120)
		declare @FromDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateTo, 102)
		declare @ToDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateFrom, 120)
		declare @ToDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateTo, 102)

		declare @p_search_category nvarchar(MAX) = ''
		declare @p_search_UsersID nvarchar(MAX) = ''
		declare @p_search_timeFromDate nvarchar(MAX) = ''	
		declare @p_search_timeToDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_AmountFact nvarchar(MAX) = ''	
		declare @p_filter_request_AmountPlan nvarchar(MAX) = ''	

		set @p_filter_request_AmountFact = 		 		
				'(
					
						(
							IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
													   (sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0)
						 >= ' + convert(nvarchar(40),@p_AmountFact_Min,126 ) + ') and
						( 
							IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
													   (sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0)						
						 <= ' + convert(nvarchar(40),@p_AmountFact_Max,126 ) + ')
				)'
		
		set @p_filter_request_AmountPlan = 		 		
				'(
					
						( spd.AmountPlan   >= ' + convert(nvarchar(40),@p_AmountPlan_Min,126 ) + ') and
						( spd.AmountPlan   <= ' + convert(nvarchar(40),@p_AmountPlan_Max,126 ) + ')
										
				)'
		
		
		if (@FromDateFrom_string!='1753-01-01 00:00:10')	
			begin
			set	@FromDateFrom_string = CONVERT(nvarchar, @p_FromDateFrom, 102)
			set @p_search_timeFromDate =  		
				'(
					CONVERT(date, sp.FromDate) between  ''' + @FromDateFrom_string  + ''' and ''' + @FromDateTo_string + '''				
				)'	
			end


		if (@ToDateFrom_string!='1753-01-01 00:00:10')	
			begin
			set	@ToDateFrom_string = CONVERT(nvarchar, @p_ToDateFrom, 102)
			set @p_search_timeToDate =  		
				'(
					CONVERT(date, sp.ToDate) between ''' + @ToDateFrom_string  + ''' and ''' + @ToDateTo_string + '''
				)'								
			end

		set @p_filter_request = @p_filter_request_AmountFact + ' and ' + @p_filter_request_AmountPlan 

		if (@p_search_timeFromDate!='')
		    set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeFromDate

		if (@p_search_timeToDate!='')
		    set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeToDate

		declare @p_search_request nvarchar(MAX) = ''
		if(@p_search_request = '' and @p_filter_request != '')
			set @p_search_request = ' where ' + @p_filter_request
		else if(@p_search_request != '' and @p_filter_request != '')
			set @p_search_request = @p_search_request + ' and ' + @p_filter_request	

		if (@p_Сategory != 'All')
			set @p_search_category = ' inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(''' + @p_Сategory + ''',' + @delimeter + ')) as ty ON (ty.Val1 = sp.[Category])';
		if (@p_UsersID != 'All') 
			set @p_search_UsersID = '  inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(''' + @p_UsersID + ''',' + @delimeter + ')) as co ON (co.Val1 = spd.[UsersID])';
		
		declare @end_request nvarchar(max) = ''	
		set @end_request =  '
							Declare @p_CountID integer = 0
							Declare @p_AmountPlan money = 0
							Declare @p_AmountFact money = 0

							Declare @p_AmmountPlanGroupByUsers nvarchar(MAX)=''''
							Declare @p_AmmountPlanGroupByCategory nvarchar(MAX)=''''
							Declare @p_AmmountPlanGroupByDate nvarchar(MAX)=''''

							Declare @p_AmmountFactGroupByUsers nvarchar(MAX)=''''
							Declare @p_AmmountFactGroupByCategory nvarchar(MAX)=''''
							Declare @p_AmmountFactGroupByDate nvarchar(MAX)=''''
							
							SELECT 
								@p_CountID = COUNT(distinct st.[ID])
								,@p_AmountPlan = SUM(st.[AmountPlan])
								,@p_AmountFact = SUM(st.[AmountFact])
						     FROM (
									SELECT
										spd.[ID]
										,spd.[SalePlanID]
										,spd.[UsersID]
										,spd.[AmountPlan]
										,IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
														(sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0) as [AmountFact]
										,sp.[Category]	
										,sp.[FromDate]
										,sp.[ToDate]							
										,spd.[CreatedDate]
										,spd.[LastModifiedDate]
										,spd.[CreatedByUserID]
										,spd.[LastModifiedByUserID]
										,u.ID as UserID
										,ul.ID as LUserID
										,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
										,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
										,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
										,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
									FROM [dbo].[SalePlanDetails] spd
											left join dbo.Users u on u.[ID]=spd.[CreatedByUserID]
											left join dbo.Users ul on ul.[ID]=spd.[LastModifiedByUserID]
											inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
											+ @p_search_category
											+ @p_search_UsersID
											+ @p_search_request		
						     +')  AS st							
	
							SELECT @p_AmmountPlanGroupByUsers = CONCAT(@p_AmmountPlanGroupByUsers, LTRIM(RTRIM(t.userlist)),'':'',LTRIM(RTRIM(t.amountList)),''|'') From
							(SELECT 
								st.userID as userlist
								,CAST(SUM(st.[AmountPlan]) as money) as amountList	
								FROM (
									SELECT
										spd.UsersID as userID
										,spd.[AmountPlan]										
							FROM [dbo].[SalePlanDetails] spd
								inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
											+ @p_search_category
											+ @p_search_UsersID
											+ @p_search_request + ') st	
											GROUP BY (userID)) t 

							SELECT @p_AmmountPlanGroupByCategory = CONCAT(@p_AmmountPlanGroupByCategory, LTRIM(RTRIM(t.categorylist)),'':'',LTRIM(RTRIM(t.amountList)),''|'') From
							(SELECT 
								st.Category as categorylist,
								CAST(SUM(st.[AmountPlan]) as money) as amountList	
								FROM (
									SELECT
										sp.Category as Category
										,spd.[AmountPlan]										
							FROM [dbo].[SalePlanDetails] spd
											inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
											+ @p_search_category
											+ @p_search_UsersID
											+ @p_search_request + ') st	
											Group by(Category)) t 

							SELECT @p_AmmountPlanGroupByDate = CONCAT(@p_AmmountPlanGroupByDate, LTRIM(RTRIM(t.fromDatelist)),''$'',LTRIM(RTRIM(t.amountList)),''|'') From
							(SELECT 
								st.FromDate as fromDatelist,
								CAST(SUM(st.[AmountPlan]) as money) as amountList
								FROM (
									SELECT
										sp.FromDate as FromDate
										,sp.AmountPlan as FromAmountPlan
										,spd.[AmountPlan]
							FROM [dbo].[SalePlanDetails] spd
											inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
											+ @p_search_category
											+ @p_search_UsersID
											+ @p_search_request + ') st	
											Group by(FromDate)) t

							SELECT @p_AmmountFactGroupByUsers = CONCAT(@p_AmmountFactGroupByUsers, LTRIM(RTRIM(t.userlist)),'':'',LTRIM(RTRIM(t.amountList)),''|'') From
							(SELECT 
								st.userID as userlist
								,CAST(SUM(st.[AmountFact]) as money) as amountList	
								FROM (
									SELECT
										spd.UsersID as userID
										,IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
														(sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0) as [AmountFact]										
							FROM [dbo].[SalePlanDetails] spd
											inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
											+ @p_search_category
											+ @p_search_UsersID
											+ @p_search_request + ') st	
											GROUP BY (userID)) t 	 	
											
							SELECT @p_AmmountFactGroupByCategory = CONCAT(@p_AmmountFactGroupByCategory, LTRIM(RTRIM(t.categorylist)),'':'',LTRIM(RTRIM(t.amountList)),''|'') From
							(SELECT 
								st.Category as categorylist,
								CAST(SUM(st.[AmountFact]) as money) as amountList	
								FROM (
									SELECT
										sp.Category as Category
										,IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
														(sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0) as [AmountFact]										
							FROM [dbo].[SalePlanDetails] spd
											inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
											+ @p_search_category
											+ @p_search_UsersID
											+ @p_search_request + ') st	
											Group by(Category)) t 
											
							SELECT @p_AmmountFactGroupByDate = CONCAT(@p_AmmountFactGroupByDate, LTRIM(RTRIM(t.fromDatelist)),''$'',LTRIM(RTRIM(t.amountList)),''|'') From
							(SELECT 
								st.FromDate as fromDatelist,
								CAST(SUM(st.[AmountFact]) as money) as amountList	
								FROM (
									SELECT
										sp.FromDate as FromDate
										,sp.AmountPlan as FromAmountPlan
										,IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
														(sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0) as [AmountFact]
																				
							FROM [dbo].[SalePlanDetails] spd
											inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
											+ @p_search_category
											+ @p_search_UsersID
											+ @p_search_request + ') st	
											Group by(FromDate)) t 							

							SELECT
								@p_CountID as CountID,
								@p_AmountPlan as AmountPlan,
								@p_AmountFact as AmountFact,
								@p_AmmountPlanGroupByUsers as AmmountPlanGroupByUsers,
								@p_AmmountPlanGroupByCategory as AmmountPlanGroupByCategory,
								@p_AmmountPlanGroupByDate as AmmountPlanGroupByDate,
								@p_AmmountFactGroupByUsers as AmmountFactGroupByUsers,
								@p_AmmountFactGroupByCategory as AmmountFactGroupByCategory,
								@p_AmmountFactGroupByDate as AmmountFactGroupByDate
							 '
		--print @end_request
		--SELECT @end_request
		EXECUTE (@end_request);
		-- 
	end
								
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, результирующая грида
-- =============================================
-- xp_GetSalePlanDetailsTable 'Name', '', 0, 170, 'All', 'All', 149, 41231, 400000, 500000, '01.01.1753 0:00:10', '06.23.2020 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 0, 20, 'ID', 0
-- xp_GetSalePlanDetailsTable 'item', '', 0 , 'All',0, 99999999999, 0, 999999999, '01.01.1753 0:00:10', '06.23.2020 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 0, 20, 'CategoryString', 0
-- xp_GetSalePlanDetailsTable 'Grid', '', 0, 0, 'All', 'All', 'All', 0, 99999999999, 0, 99999999999, '01.01.1753 0:00:10', '06.23.2021 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 0, 20, 'Category', 0
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSalePlanDetailsTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID bigint,
	@p_SalePlanID int = 0,
	
	@p_Сategory nvarchar(MAX)='',
	@p_UsersID nvarchar(MAX)='',
	@p_NameWeekDay nvarchar(MAX)='',
	@p_AmountFact_Min money = 0,
	@p_AmountFact_Max money = 0,
	@p_AmountPlan_Min money = 0,
	@p_AmountPlan_Max money = 0,

	@p_FromDateFrom datetime,
	@p_FromDateTo datetime,

	@p_ToDateFrom datetime,
	@p_ToDateTo datetime,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @FromDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateFrom, 120)
	declare @FromDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateTo, 102)
	declare @ToDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateFrom, 120)
	declare @ToDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateTo, 102)

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT TOP 1	spd.[ID]
						,spd.[SalePlanID]
						,spd.[UsersID]
						,spd.[AmountPlan]
						,IsNull((
								SELECT SUM(
											CASE WHEN sdd.[IsIndividualDiscount]=0
												THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
												ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
											END
											) as [SumPlan]
								FROM [dbo].[SaleDocumentDetails] AS sdd
									inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
										AND sd.[UserID] = spd.[UsersID]
										AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
										AND sd.[DocumentNumber]>0
								WHERE
										(sp.Category=0 AND sdd.PartNumber IS NULL)
									OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
							),0) as [AmountFact]
						,spd.[CreatedDate]
						,sp.[Category]
						,sp.[FromDate]
						,sp.[ToDate]
						,spd.[LastModifiedDate]
						,spd.[CreatedByUserID]
						,spd.[LastModifiedByUserID]
						,u.ID as CUserID
						,ul.ID as LUserID
						,Concat(us.LastName,' ',us.FirstName,' ',us.SecondName) as DisplayNameUsersID
						,(SELECT CASE WHEN isnull(us.LastName,'') = '' THEN '' ELSE case when isnull(us.FirstName,'') = '' then us.LastName else us.LastName + ' ' + SUBSTRING(us.FirstName, 1, 1) + '.' + SUBSTRING(us.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUsersID
						,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
						,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
						,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
						,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
				FROM [dbo].[SalePlanDetails] spd
						left join dbo.Users u on u.[ID]=spd.[CreatedByUserID]
						left join dbo.Users ul on ul.[ID]=spd.[LastModifiedByUserID]
						left join dbo.Users us on us.[ID]=spd.[UsersID]
						inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID
			where spd.[ID]=@p_ID
	end
	
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

		if (@p_Сategory = '' or @p_UsersID='')
				return

		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC'
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount
		
		declare @p_search_category nvarchar(MAX) = ''
		declare @p_search_UsersID nvarchar(MAX) = ''
		declare @p_search_NameWeekDay nvarchar(MAX) = ''

		declare @p_search_timeFromDate nvarchar(MAX) = ''	
		declare @p_search_timeToDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''	
		declare @p_filter_request_AmountFact nvarchar(MAX) = ''	
		declare @p_filter_request_AmountPlan nvarchar(MAX) = ''	

		set @p_filter_request_AmountFact = 		 		
				'(
					
						(
							IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
													   (sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0)
						 >= ' + convert(nvarchar(40),@p_AmountFact_Min,126 ) + ') and
						( 
							IsNull((
												SELECT SUM(
															CASE WHEN sdd.[IsIndividualDiscount]=0
																THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
															END
															) as [SumPlan]
												FROM [dbo].[SaleDocumentDetails] AS sdd
													inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
														AND sd.[UserID] = spd.[UsersID]
														AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
														AND sd.[DocumentNumber]>0
												WHERE
													   (sp.Category=0 AND sdd.PartNumber IS NULL)
													OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
											),0)						
						 <= ' + convert(nvarchar(40),@p_AmountFact_Max,126 ) + ')
				)'
		
		set @p_filter_request_AmountPlan = 		 		
				'(
					
						( spd.AmountPlan   >= ' + convert(nvarchar(40),@p_AmountPlan_Min,126 ) + ') and
						( spd.AmountPlan   <= ' + convert(nvarchar(40),@p_AmountPlan_Max,126 ) + ')
										
				)'
		
		if (@FromDateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@FromDateFrom_string = CONVERT(nvarchar, @p_FromDateFrom, 102)
			set @p_search_timeFromDate =  		
				'(
					CONVERT(date, sp.FromDate) between  ''' + @FromDateFrom_string  + ''' and ''' + @FromDateTo_string + '''				
				)'
		end


		if (@ToDateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@ToDateFrom_string = CONVERT(nvarchar, @p_ToDateFrom, 102)
			set @p_search_timeToDate =  		
				'(
					CONVERT(date, sp.ToDate) between ''' + @ToDateFrom_string  + ''' and ''' + @ToDateTo_string + '''
				)'					
		end

		set @p_filter_request =@p_filter_request_AmountFact + ' and ' + @p_filter_request_AmountPlan 

		if (@p_search_timeFromDate!='')
		    set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeFromDate

		if (@p_search_timeToDate!='')
		    set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeToDate
		
		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' where
			(
				(
					(
						cast(spd.SalePlanID as nvarchar(40)) like ''' + @p_search_string + '''
					)				
				)
			)'

		if(@p_search_request = '' and @p_filter_request != '')
			set @p_search_request = ' where ' + @p_filter_request

		else if(@p_search_request != '' and @p_filter_request != '')
			set @p_search_request = @p_search_request + ' and ' + @p_filter_request	

		if (@p_Сategory != 'All')
			set @p_search_category = ' inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(''' + @p_Сategory + ''',' + @delimeter + ')) as ty ON (ty.Val1 = sp.[Category])';
		if (@p_UsersID != 'All') 
			set @p_search_UsersID = ' inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(''' + @p_UsersID + ''',' + @delimeter + ')) as co ON (co.Val1 = spd.[UsersID])';
		if (@p_NameWeekDay != 'All') 
			set @p_search_NameWeekDay = ' inner join (
														select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(''' + @p_NameWeekDay + ''',' + @delimeter + ')
													 ) as nw ON (nw.Val1 = DATEPART(DW, sp.[FromDate]))';

		if(@p_SortColumn='CreatedByUserID')
			set  @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else if(@p_SortColumn='ShortDisplayNameUsersID')
			set  @p_SortColumn='(Concat(us.LastName,'' '',us.FirstName,'' '',us.SecondName)) '
		else if(@p_SortColumn = 'Category')
			set  @p_SortColumn='sp.Category'
		else if(@p_SortColumn='FromDate')
			set  @p_SortColumn='(sp.FromDate) '
		else if(@p_SortColumn='ToDate')
			set  @p_SortColumn='(sp.ToDate) '
		else if (@p_SortColumn = 'AmountFact')
			set @p_SortColumn=' 
							IsNull((
										SELECT SUM(
													CASE WHEN sdd.[IsIndividualDiscount]=0
														THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
														ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
													END
													) as [SumPlan]
										FROM [dbo].[SaleDocumentDetails] AS sdd
											inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
												AND sd.[UserID] = spd.[UsersID]
												AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
												AND sd.[DocumentNumber]>0
										WHERE
												(sp.Category=0 AND sdd.PartNumber IS NULL)
											OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
									),0)
				'
		else
			set @p_SortColumn='spd.'+@p_SortColumn

 		declare @end_request nvarchar(max) = ''	
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							   ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
								,spd.[ID]
								,spd.[SalePlanID]
								,spd.[UsersID]
								,spd.[AmountPlan]
								,IsNull((
										SELECT SUM(
													CASE WHEN sdd.[IsIndividualDiscount]=0
														THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
														ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
													END
													) as [SumPlan]
										FROM [dbo].[SaleDocumentDetails] AS sdd
											inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
												AND sd.[UserID] = spd.[UsersID]
												AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate]) 
												AND sd.[DocumentNumber]>0
										WHERE
											    (sp.Category=0 AND sdd.PartNumber IS NULL)
											OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
									),0) as [AmountFact]
								,sp.[Category]	
								,sp.[FromDate]
								,sp.[ToDate]							
								,spd.[CreatedDate]
								,spd.[LastModifiedDate]
								,spd.[CreatedByUserID]
								,spd.[LastModifiedByUserID]
								,u.ID as UserID
								,ul.ID as LUserID
								,Concat(us.LastName,'' '',us.FirstName,'' '',us.SecondName) as DisplayNameUsersID
								,(SELECT CASE WHEN isnull(us.LastName,'''') = '''' THEN '''' ELSE case when isnull(us.FirstName,'''') = '''' then us.LastName else us.LastName + '' '' + SUBSTRING(us.FirstName, 1, 1) + ''.'' + SUBSTRING(us.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUsersID
								,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
								,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
								,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
								,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
								
						FROM [dbo].[SalePlanDetails] spd
								left join dbo.Users u on u.[ID]=spd.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=spd.[LastModifiedByUserID]
								left join dbo.Users us on us.[ID]=spd.[UsersID]
								inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID'
								+ @p_search_category
								+ @p_search_UsersID
								+ @p_search_NameWeekDay
								+ @p_search_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'					
		--select @end_request
		EXECUTE (@end_request);	
	end

	if @p_TypeScreen='name' begin
		SELECT spd.[ID]
				,spd.[SalePlanID]
				,spd.[UsersID]
				,spd.[AmountPlan]
				,IsNull((
						SELECT SUM(
									CASE WHEN sdd.[IsIndividualDiscount]=0
										THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
										ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
									END
									) as [SumPlan]
						FROM [dbo].[SaleDocumentDetails] AS sdd
							inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
								AND sd.[UserID] = spd.[UsersID]
								AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND DATEADD(day,1,sp.[FromDate])
								AND sd.[DocumentNumber]>0
						WHERE
								(sp.Category=0 AND sdd.PartNumber IS NULL)
							OR (sp.Category=1 AND sdd.PartNumber IS NOT NULL)
					),0) as [AmountFact]
				,spd.[CreatedDate]
				,sp.[Category]
				,sp.[FromDate]
				,sp.[ToDate]
				,spd.[LastModifiedDate]
				,spd.[CreatedByUserID]
				,spd.[LastModifiedByUserID]
				,u.ID as CUserID
				,ul.ID as LUserID
				,Concat(us.LastName,' ',us.FirstName,' ',us.SecondName) as DisplayNameUsersID
				,(SELECT CASE WHEN isnull(us.LastName,'') = '' THEN '' ELSE case when isnull(us.FirstName,'') = '' then us.LastName else us.LastName + ' ' + SUBSTRING(us.FirstName, 1, 1) + '.' + SUBSTRING(us.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUsersID
				,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
				,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
				,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
				,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
			FROM [dbo].[SalePlanDetails] spd
					left join dbo.Users u on u.[ID]=spd.[CreatedByUserID]
					left join dbo.Users ul on ul.[ID]=spd.[LastModifiedByUserID]
					left join dbo.Users us on us.[ID]=spd.[UsersID]
					inner join [dbo].[SalePlan] sp on sp.ID=spd.SalePlanID
		where spd.[SalePlanID]=@p_SalePlanID
	end

END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> ПоCтавки, Cборка фильтров
-- =============================================
-- xp_GetSalePlanFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSalePlanFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables		
		@p_Category nvarchar(MAX)='',
		@p_AmountFact_Min money = 0,
		@p_AmountFact_Max money = 0,
		@p_AmountPlan_Min money = 0,
		@p_AmountPlan_Max money = 0,
		@p_AmountUnused_Min money = 0,
		@p_AmountUnused_Max money = 0

	--Category
-------------------------------------------------------------------
	SELECT
		@p_Category = CONCAT(@p_Category,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					sp.[Category] AS [Value]
				FROM [dbo].[SalePlan] sp
		) AS Temp
	IF LEN(@p_Category) > 2 SET @p_Category = SUBSTRING(@p_Category,1, LEN(@p_Category)-1) ELSE SET @p_Category = NULL

	--AmountFact
-------------------------------------------------------------------
	SELECT @p_AmountFact_Min=MIN([AmountFact]), @p_AmountFact_Max=MAX([AmountFact])
		FROM
			(SELECT
				IsNull((
						SELECT SUM(
									CASE WHEN sdd.[IsIndividualDiscount]=0
										THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
										ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
									END
									) as [SumPlan]
						FROM [dbo].[SaleDocumentDetails] AS sdd
							inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
								AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
								AND sd.[DocumentNumber]>0
						WHERE
								(s.Category=0 AND sdd.PartNumber IS NULL)
							OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
					),0) as [AmountFact]
			FROM [dbo].[SalePlan] s
		) st

	--AmountPlan
-------------------------------------------------------------------
	SELECT @p_AmountPlan_Min=MIN(qs1.AmountPlan), @p_AmountPlan_Max=MAX(qs1.AmountPlan) FROM (
		SELECT AmountPlan FROM [dbo].[SalePlan] AS AmountPlan) AS qs1

	--AmountUnused
-------------------------------------------------------------------
	SELECT @p_AmountUnused_Min=MIN(qs2.AmountUnused),
		   @p_AmountUnused_Max=MAX(qs2.AmountUnused)
		FROM (
				SELECT 
					IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]) as AmountUnused
				FROM [dbo].[SalePlan] AS s
			) as qs2

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Category AS [Category],
		 	@p_AmountFact_Min AS AmountFactMin,
			@p_AmountFact_Max AS AmountFactMax,
			@p_AmountPlan_Min AS AmountPlanMin,
			@p_AmountPlan_Max AS AmountPlanMax,
			@p_AmountUnused_Min AS AmountUnusedMin,
			@p_AmountUnused_Max AS AmountUnusedMax			
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Cкупка лома, CпиCок квитанций, подCчет Cумм
-- =============================================
-- xp_GetSalePlanSummary 'All', 0, 99999999, 0, 99999999, -10000000, 99999999, '01-01-1753 00:00:10', '04-13-2022 09:40:10', '01-01-1753 00:00:10', '04-13-2022 09:40:10'
-- xp_GetSalePlanSummary 'All', 0, 41849, 100000, 500000, 20000, 500000, '01-01-1753 00:00:10', '04-13-2022 09:40:10', '01-01-1753 00:00:10', '04-13-2022 09:40:10'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSalePlanSummary]
		@p_Category nvarchar(MAX)='',
		@p_AmountFact_Min money = 0,
		@p_AmountFact_Max money = 0,
		@p_AmountPlan_Min money = 0,
		@p_AmountPlan_Max money = 0,
		@p_AmountUnused_Min money = 0,
		@p_AmountUnused_Max money = 0,
		@p_FromDateFrom datetime,
		@p_FromDateTo datetime,
		@p_ToDateFrom datetime,
		@p_ToDateTo datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	--SET STATISTICS TIME ON;

	if (@p_Category = '' ) begin
		SELECT TOP 1
		0 as CountID
		,0 as AmountPlan
		,0 as AmountFack
	end
	else begin
		declare @p_search_money nvarchar(40)
		declare @p_search_string nvarchar(40)
		declare @p_order nvarchar(40)='ASC';
		declare @delimeter nvarchar(10)= '''|''';
		declare @filter_all nvarchar(10)= '''All''';
		declare @p_MaxValue int = 0;
		declare @p_MinValue int = 0;	

		declare @FromDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateFrom, 120)
		declare @FromDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateTo, 102)
		declare @ToDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateFrom, 120)
		declare @ToDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateTo, 102)

		declare @p_search_category nvarchar(MAX) = ''

		declare @p_search_timeFromDate nvarchar(MAX) = ''	
		declare @p_search_timeToDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_AmountFact nvarchar(MAX) = ''	
		declare @p_filter_request_AmountPlan nvarchar(MAX) = ''	
		declare @p_filter_request_AmountUnused nvarchar(MAX) = ''

		set @p_filter_request_AmountFact = ' 		
				(
					(
						( 
							IsNull((
										SELECT SUM(
													CASE WHEN sdd.[IsIndividualDiscount]=0
														THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
														ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
													END
													) as [SumPlan]
										FROM [dbo].[SaleDocumentDetails] AS sdd
											inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
												AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
												AND sd.[DocumentNumber]>0
										WHERE
												(s.Category=0 AND sdd.PartNumber IS NULL)
											OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
									),0)
							
							>= ' + convert(nvarchar(40),@p_AmountFact_Min,126 ) + ') and
						( 
							IsNull((
										SELECT SUM(
													CASE WHEN sdd.[IsIndividualDiscount]=0
														THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
														ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
													END
													) as [SumPlan]
										FROM [dbo].[SaleDocumentDetails] AS sdd
											inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
												AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
												AND sd.[DocumentNumber]>0
										WHERE
												(s.Category=0 AND sdd.PartNumber IS NULL)
											OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
									),0)
							<= ' + convert(nvarchar(40),@p_AmountFact_Max,126 ) + ')
					) 					
				)'

		set @p_filter_request_AmountPlan = 
				'(
					(
						(  AmountPlan  >= ' + convert(nvarchar(40),@p_AmountPlan_Min,126 ) + ') and
						( AmountPlan  <= ' + convert(nvarchar(40),@p_AmountPlan_Max,126 ) + ')
					) 
				)'	

		set @p_filter_request_AmountUnused= '
				(
					(
						(ROUND(IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]),2)  >= ' + convert(nvarchar(40),@p_AmountUnused_Min,126 ) + ') and
						(ROUND(IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]),2)  <= ' + convert(nvarchar(40),@p_AmountUnused_Max,126 ) + ')
					) 					
				)'

		if (@FromDateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@FromDateFrom_string = CONVERT(nvarchar, @p_FromDateFrom, 102)
			set @p_search_timeFromDate =  		
				'(
					CONVERT(date, s.FromDate) between  ''' + @FromDateFrom_string  + ''' and ''' + @FromDateTo_string + '''				
				)'	
		end

		if (@ToDateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@ToDateFrom_string = CONVERT(nvarchar, @p_ToDateFrom, 102)
			set @p_search_timeToDate =  		
				'(
					CONVERT(date, s.ToDate) between ''' + @ToDateFrom_string  + ''' and ''' + @ToDateTo_string + '''
				)'								
		end

		set @p_filter_request =@p_filter_request_AmountFact + ' and ' + @p_filter_request_AmountPlan + ' and ' + @p_filter_request_AmountUnused

		if (@p_search_timeFromDate!='')
		    set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeFromDate

		if (@p_search_timeToDate!='')
		    set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeToDate

		declare @p_search_request nvarchar(MAX) = ''
		if(@p_search_request = '' and @p_filter_request != '')
			set @p_search_request = ' where ' + @p_filter_request

		else if(@p_search_request != '' and @p_filter_request != '')
			set @p_search_request = @p_search_request + ' and ' + @p_filter_request	

		if (@p_Category != 'All')
			set @p_search_category = ' inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(''' + @p_Category + ''',' + @delimeter + ')) as ty ON (ty.Val1 = s.[Category])';
		
		declare @end_request nvarchar(max) = ''	

		set @end_request =  'SELECT 	
								COUNT(ID) as CountID,
								SUM(AmountPlan) as AmountPlanSumma,
								SUM(AmountFact) as AmountFactSumma					
								FROM (
										SELECT								
											   s.[ID] as ID,
											   s.[AmountPlan] as AmountPlan,
											   IsNull((
														SELECT SUM(
																	CASE WHEN sdd.[IsIndividualDiscount]=0
																		THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
																		ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
																	END
																	) as [SumPlan]
														FROM [dbo].[SaleDocumentDetails] AS sdd
															inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
																AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
																AND sd.[DocumentNumber]>0
														WHERE
															   (s.Category=0 AND sdd.PartNumber IS NULL)
															OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
													),0) as AmountFact								  
								
										FROM [dbo].[SalePlan] as s'																
							+ @p_search_category
							+ @p_search_request		
							+')  AS st'							
	
		--print @end_request
		EXECUTE (@end_request);	
	end
								
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поcтавки, результирующая грида
-- =============================================
--23.06.2020 13:29:37
-- xp_GetSalePlanTable 'Grid','', 0, 'All',0, 99999999999, 0, 99999999999, 0, 99999999999, '01.01.1753 0:00:10', '06.23.2021 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 0, 200000, 'ID', 1
-- xp_GetSalePlanTable 'Grid', 0 , 'All',0, 99999999999, 0, 999999999, 0, 999999999, '01.01.1753 0:00:10', '06.23.2021 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 0, 20, 'AmountFact', 1
-- xp_GetSalePlanTable 'InGrid', 0 , 'All',0, 99999999999, 0, 999999999, -999999999, 999999999, '01.01.1753 0:00:10', '06.23.2020 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 0, 20, 'ID', 1
-- xp_GetSalePlanTable 'item','', 266, 'All',0, 99999999999, 0, 99999999999, 0, 99999999999, '01.01.1753 0:00:10', '06.23.2021 11:53:41', '01.01.1753 0:00:10', '11.02.2021 11:53:41', 0, 200000, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetSalePlanTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,

	@p_Category nvarchar(MAX)='',
	@p_AmountFact_Min money = 0,
	@p_AmountFact_Max money = 0,
	@p_AmountPlan_Min money = 0,
	@p_AmountPlan_Max money = 0,
	@p_AmountUnused_Min money = 0,
	@p_AmountUnused_Max money = 0,

	@p_FromDateFrom datetime,
	@p_FromDateTo datetime,

	@p_ToDateFrom datetime,
	@p_ToDateTo datetime,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @FromDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateFrom, 120)
	declare @FromDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateTo, 102)
	declare @ToDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateFrom, 120)
	declare @ToDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateTo, 102)

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT TOP 1  s.[ID]
							  ,s.[Category]
							  ,s.[AmountPlan]
							  ,IsNull((
										SELECT SUM(
													CASE WHEN sdd.[IsIndividualDiscount]=0
														THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
														ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
													END
													) as [SumPlan]
										FROM [dbo].[SaleDocumentDetails] AS sdd
											inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
												AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
												AND sd.[DocumentNumber]>0
										WHERE
											   (s.Category=0 AND sdd.PartNumber IS NULL)
											OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
								    ),0) as [AmountFact]
							  ,ROUND(IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]),2) as AmountUnused				  
							  ,s.[FromDate]
							  ,s.[ToDate] 
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]
							  ,s.[Status] 							 	  
							  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
						FROM [dbo].[SalePlan] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]
								where s.ID=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_Category = '')
				return
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'
		
		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;
		
		declare @p_search_category nvarchar(MAX) = ''
		declare @p_search_request nvarchar(MAX) = ''

		declare @p_search_timeFromDate nvarchar(MAX) = ''	
		declare @p_search_timeToDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_AmountFact nvarchar(MAX) = ''	
		declare @p_filter_request_AmountPlan nvarchar(MAX) = ''	
		declare @p_filter_request_AmountUnused nvarchar(MAX) = ''
		declare @end_request nvarchar(max) = ''	
			
		if  (@p_TypeScreen = 'grid') 
		begin
			set @p_filter_request_AmountFact = ' 		
					(
						(
							( 
								IsNull((
											SELECT SUM(
														CASE WHEN sdd.[IsIndividualDiscount]=0
															THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
															ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
														END
														) as [SumPlan]
											FROM [dbo].[SaleDocumentDetails] AS sdd
												inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
													AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
													AND sd.[DocumentNumber]>0
											WHERE
												   (s.Category=0 AND sdd.PartNumber IS NULL)
												OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
										),0)
							
							  >= ' + convert(nvarchar(40),@p_AmountFact_Min,126 ) + ') and
							( 
								IsNull((
											SELECT SUM(
														CASE WHEN sdd.[IsIndividualDiscount]=0
															THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
															ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
														END
														) as [SumPlan]
											FROM [dbo].[SaleDocumentDetails] AS sdd
												inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
													AND sd.[LastModifiedDate]  BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
													AND sd.[DocumentNumber]>0
											WHERE
												   (s.Category=0 AND sdd.PartNumber IS NULL)
												OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
										),0)
							  <= ' + convert(nvarchar(40),@p_AmountFact_Max,126 ) + ')
						) 					
					)'

			set @p_filter_request_AmountPlan = 
					'(
						(
							( AmountPlan  >= ' + convert(nvarchar(40),@p_AmountPlan_Min,126 ) + ') and
							( AmountPlan  <= ' + convert(nvarchar(40),@p_AmountPlan_Max,126 ) + ')
						) 
					)'	

			set @p_filter_request_AmountUnused= '
					(
						(
							(ROUND(IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]),2)  >= ' + convert(nvarchar(40),@p_AmountUnused_Min,126 ) + ') and
							(ROUND(IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]),2)  <= ' + convert(nvarchar(40),@p_AmountUnused_Max,126 ) + ')
						) 					
					)'

			if (@FromDateFrom_string!='1753-01-01 00:00:10')	
				begin
				set	@FromDateFrom_string = CONVERT(nvarchar, @p_FromDateFrom, 102)
				set @p_search_timeFromDate =  		
					'(
						CONVERT(date, s.FromDate) between  ''' + @FromDateFrom_string  + ''' and ''' + @FromDateTo_string + '''				
					)'	
				end


			if (@ToDateFrom_string!='1753-01-01 00:00:10')	
				begin
				set	@ToDateFrom_string = CONVERT(nvarchar, @p_ToDateFrom, 102)
				set @p_search_timeToDate =  		
					'(
						CONVERT(date, s.ToDate) between ''' + @ToDateFrom_string  + ''' and ''' + @ToDateTo_string + '''
					)'								
				end

			set @p_filter_request =@p_filter_request_AmountFact + ' and ' + @p_filter_request_AmountPlan + ' and ' + @p_filter_request_AmountUnused

			if (@p_search_timeFromDate!='')
				set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeFromDate

			if (@p_search_timeToDate!='')
				set @p_filter_request = @p_filter_request  + ' and ' + @p_search_timeToDate
		
			if (@p_search != '')
				set @p_search_request = ' where
				(
					(
						(
							cast(s.ID as nvarchar(40)) like ''' + @p_search_string + '''
						)				
					)
				)'
			--print @p_filter_request			
			if(@p_search_request = '' and @p_filter_request != '')
				set @p_search_request = ' where ' + @p_filter_request

			else if(@p_search_request != '' and @p_filter_request != '')
				set @p_search_request = @p_search_request + ' and ' + @p_filter_request	

			if (@p_Category != 'All')
				set @p_search_category = ' inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(''' + @p_Category + ''',' + @delimeter + ')) as ty ON (ty.Val1 = s.[Category])'
		end
		if (@p_SortColumn = 'CategoryString')
				set @p_SortColumn='Category'
			else if (@p_SortColumn = 'AmountUnused')
				set @p_SortColumn=' IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]) '
			else if (@p_SortColumn = 'AmountFact')
				set @p_SortColumn=' 
								IsNull((
											SELECT SUM(
														CASE WHEN sdd.[IsIndividualDiscount]=0
															THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
															ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
														END
														) as [SumPlan]
											FROM [dbo].[SaleDocumentDetails] AS sdd
												inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
													AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
													AND sd.[DocumentNumber]>0
											WHERE
												   (s.Category=0 AND sdd.PartNumber IS NULL)
												OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
										),0)
				 '
			else
				set @p_SortColumn='s.'+@p_SortColumn		
		
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[Category]
							  ,s.[AmountPlan]
							  ,IsNull((
										SELECT SUM(
													CASE WHEN sdd.[IsIndividualDiscount]=0
														THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
														ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
													END
													) as [SumPlan]
										FROM [dbo].[SaleDocumentDetails] AS sdd
											inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
												AND sd.[LastModifiedDate] BETWEEN s.[FromDate] AND DATEADD(day,1,s.[FromDate])
												AND sd.[DocumentNumber]>0
										WHERE
											   (s.Category=0 AND sdd.PartNumber IS NULL)
											OR (s.Category=1 AND sdd.PartNumber IS NOT NULL)
								    ),0) as [AmountFact]
							  ,s.[FromDate]
							  ,s.[ToDate] 
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]
							  ,s.[Status]
							  ,ROUND(IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]),2) as AmountUnused
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
						FROM [dbo].[SalePlan] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]							
								'
								+ @p_search_category
								+ @p_search_request								
					+') AS st
					 where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'								
		--print @end_request
		EXECUTE (@end_request);	
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, детали
-- =============================================
-- xp_GetScrapDetails 'Item', 33, 7001120000121
-- xp_GetScrapDetails 'Grid', 0, 0, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetScrapDetails]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_ID int=0,
	@p_DocumentID bigint=0,
	@p_PriceType int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT u.[ID]
			  ,u.[KTID]
			  ,u.[Quantity]
			  ,u.[Weight]
			  ,u.[Description]
			  ,u.[Imennik]
			  ,u.[Impress]
			  ,u.[DocumentID]
			  ,u.[Summa]
			  ,u.[SinglePrice]
			  ,Concat(me.[Description],' - ',kt.[Description]) as FullKTName
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[ScrapDetails] u
			  left join dbo.KT kt on kt.[ID]=u.KTID
			  left join dbo.Metal me on me.[ID]=kt.MetalID
		where u.ID=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

		SELECT u.[ID]
				,u.[KTID]
				,u.[Quantity]
				,u.[Weight]
				,u.[Description]
				,u.[Imennik]
				,u.[Impress]
				,u.[DocumentID]
				,u.[Summa]
				,u.[SinglePrice]
				,Concat(me.[Description],case when kt.[Description] is null then '' else ' - ' end,kt.[Description]) as FullKTName
				,u.[CreatedDate]
				,u.[LastModifiedDate]
				,u.[CreatedByUserID]
				,u.[LastModifiedByUserID]
			FROM [dbo].[ScrapDetails] u
			left join dbo.KT kt on kt.[ID]=u.KTID
			left join dbo.Metal me on me.[ID]=kt.MetalID
			where 
			@p_DocumentID=0 or u.[DocumentID]=@p_DocumentID
		order by u.[ID]
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, отчеты, графики
-- =============================================
-- xp_GetScrapDetailsForReport '01-01-2018 15:13:39', '10-25-2020 15:13:39'
-- xp_GetScrapDetailsForReport '12-23-2020 00:00:00', '12-25-2021 00:00:00', 'All', 'All'
-- =============================================
-- STRING_AGG(ScrapProductsID,',')
-- xp_GetScrapDetailsForReport '12-23-2020 00:00:00', '12-24-2020 00:00:00','All', '2|3|4|5|6'

CREATE PROCEDURE [dbo].[xp_GetScrapDetailsForReport]	
	@p_DateFrom datetime,
	@p_DateTo datetime,
	@p_Type nvarchar(max)='',
	@p_Status nvarchar(MAX)=''
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	begin

	declare @end_request nvarchar(max) = '',
			@str_datefrom nvarchar(30),
			@str_dateto nvarchar(30),
			@p_search_request nvarchar(MAX) = '',
			@p_request_Date nvarchar(MAX)='',
			@p_search_type nvarchar(MAX) = '',
			@p_search_status nvarchar(MAX) = ''
			

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 102)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)



	set @p_Status = REPLACE(@p_Status, '|', ',')
	set @p_Type = REPLACE(@p_Type, '|', ',')


	if (@p_Type != 'All')
	set @p_search_type = ' and sdoc.[Type] in (' + @p_Type + ')' ;	

	if (@p_Status != 'All')
	set @p_search_status = ' and sdoc.[Status] in (' + @p_Status + ')' ;

	if (@DateFrom_string!='1753-01-01 00:00:10')	
	begin
		set @p_request_Date =  		
		' (
			CONVERT(date, sdoc.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
		)'		
	end

	set @p_search_request = @p_request_Date + @p_search_type + @p_search_status
	if (@p_search_request != '')
		set @p_search_request = ' where ' + @p_search_request

	set @end_request = '
	select * from (
		SELECT sdoc.[ID]
			  ,sdoc.[Status]
			  ,sdoc.[SyncDate]
			  ,sdoc.[VendorID]
			  ,sdoc.[ScrapDocumentNumber]
			  ,sdoc.[RegisterID]
			  ,sdoc.[CreatedDate]
			  ,sdoc.[LastModifiedDate]
			  ,sdoc.[CreatedByUserID]
			  ,sdoc.[LastModifiedByUserID]
			  ,sdet.[Weight] as WeightSumm
			  ,sdet.Summa as SummaSumm
			  ,ven.Name as VendorName
			  ,ven.Serial as VendorSerial
			  ,ven.Number as VendorNumber
			  ,ven.Issue as VendorIssue
			  ,ven.IssueDate as VendorIssueDate
			  ,u.FirstName as UserFirstName
			  ,u.LastName as UserLastName
			  ,u.SecondName as UserSecondName
			  ,sdet.CreatedDate as RegCreatedDate
			  ,reg.ScrapRegisterNumber as ScrapRegisterNumber
			  ,reg.SyncDate as SendToCenter
			  ,reg.CreatedDate as docCreatedDate
			  ,sdet.[ID] as ScrapProductID
			  ,Concat(me.Description,case when kt.Description is null then '''' else '' - '' end,kt.Description) as ProbeDescription
			  ,sd1.DocumentNumber as SaleDocument
			  ,sd2.DocumentNumber as PurchaseDoc
			  ,REVERSE(
					STUFF(
						REVERSE(
							(SELECT cast (sdprod1.ProductID as varchar(20)) + '', '' as [text()]
								FROM [dbo].[ScrapDocument] sdoc1
								  left join dbo.Register reg1 on sdoc1.RegisterID=reg1.[ID]
								  inner join dbo.ScrapDetails sdet1 on sdet.[DocumentID]=sdoc.[ID]          
								  left join dbo.[SaleDocumentPayment] sdp1 on sdp1.ExtReffID=sdoc1.ScrapDocumentNumber
								  left join dbo.[SaleDocument] sd2 on sd2.ID=sdp1.DocumentID
								  left join dbo.[SaleDocumentProduct] sdprod1 on sd2.ID=sdprod1.DocumentID
							 where CONVERT(date, sdoc1.CreatedDate) between ''' + @DateFrom_string + ''' and ''' + @DateTo_string + ''' and  sdet1.[ID] = sdet.[ID] and sdoc1.ID=sdoc.ID
							 order by sdprod1.ID for xml path('''')
							)
						),2,1,''''
					  )
			  ) as ScrapProductsID
			 ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
		  FROM [dbo].[ScrapDocument] sdoc
			  inner join dbo.ScrapDetails sdet on sdet.[DocumentID]=sdoc.[ID]
			  left join dbo.Vendor ven on ven.ID=sdoc.[VendorID]
			  left join dbo.Users u on u.ID=sdoc.[CreatedByUserID]
			  left join dbo.KT kt on kt.ID=sdet.[KTID]
			  left join dbo.Metal me on me.ID=kt.[MetalID]
			  left join dbo.Register reg on sdoc.RegisterID=reg.[ID]		  
			  left join dbo.[SaleDocumentScrapDocument] sdsd on sdoc.ID=sdsd.ScrapDocumentID
			  left join dbo.[SaleDocument] sd1 on sd1.ID=sdsd.DocumentID
			  left join dbo.[SaleDocumentPayment] sdp on sdp.ExtReffID=sdoc.ScrapDocumentNumber
			  left join dbo.[SaleDocument] sd2 on sd2.ID=sdp.DocumentID
			  left join dbo.[SaleDocumentProduct] sdprod on sd2.ID=sdprod.DocumentID
		  ' 
		  + @p_search_request +
		 ')t
			group by ID, [Status],SyncDate,VendorID, ScrapDocumentNumber, RegisterID, CreatedDate, LastModifiedDate, CreatedByUserID, LastModifiedByUserID,
			WeightSumm, SummaSumm,VendorName,	VendorSerial, VendorNumber,VendorIssue,	VendorIssueDate,UserFirstName,UserLastName, UserSecondName,	RegCreatedDate,ScrapRegisterNumber, SendToCenter, docCreatedDate, 
			ScrapProductID,	ProbeDescription,SaleDocument,PurchaseDoc,
			ShortDisplayNameUser, ScrapProductsID'
	--select @end_request
	--print @end_request
	EXECUTE (@end_request);	
	end
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, отчеты, графики
-- =============================================
-- xp_GetScrapDetailsForReportSummary '10-01-2019 15:13:39', '10-25-2019 15:13:39','0|2|3|4', 'All'
-- xp_GetScrapDetailsForReportSummary '01-01-1753 20:00:10', '10-25-2020 15:13:39','0|2|3|4', 'All'
-- xp_GetScrapDetailsForReportSummary '01-01-1753 20:00:10', '10-25-2020 15:13:39','0|2|3|4', 'All'

CREATE PROCEDURE [dbo].[xp_GetScrapDetailsForReportSummary]	
	@p_DateFrom datetime,
	@p_DateTo datetime,
	@p_Type nvarchar(max)='',
	@p_Status nvarchar(MAX)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	begin

	declare @end_request nvarchar(max) = '',
			@str_datefrom nvarchar(30),
			@str_dateto nvarchar(30),
			@p_search_request nvarchar(MAX) = '',
			@p_search_requestLast nvarchar(MAX) = '',
			@p_request_Date nvarchar(MAX)='',
			@p_request_DateLast nvarchar(MAX)='',
			@p_search_type nvarchar(MAX) = '',
			@p_search_status nvarchar(MAX) = '',
			@p_DateFromLast datetime,
			@p_DateToLast datetime,
			@DateFromLast_string nvarchar(40),
			@DateToLast_string nvarchar(40)

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 102)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

	set @p_Status = REPLACE(@p_Status, '|', ',')
	set @p_Type = REPLACE(@p_Type, '|', ',')

	if (@p_DateFrom < '1754-01-01 00:00:10')
		set @p_DateFromLast = '1753-01-01 00:00:10'
	else
		set @p_DateFromLast = DATEADD(Year,-1,@p_DateFrom)		

	if (@p_DateTo < '1754-01-01 00:00:10')
		set @p_DateToLast = '1753-01-01 00:00:10'
	else
		set @p_DateToLast = DATEADD(Year,-1,@p_DateTo)

	set @DateFromLast_string = CONVERT(nvarchar(40), @p_DateFromLast, 102)
	set @DateToLast_string = CONVERT(nvarchar(40), @p_DateToLast, 102)

	if (@p_Type != 'All')
	set @p_search_type = ' and sdoc.[Type] in (' + @p_Type + ')' ;	

	if (@p_Status != 'All')
	set @p_search_status = ' and sdoc.[Status] in (' + @p_Status + ')' ;

	if (@DateFrom_string!='1753-01-01 00:00:10')	
	begin
		set @p_request_Date =  		
		' (
			CONVERT(date, sdoc.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
		)'
		set @p_request_DateLast =  		
		' (
			CONVERT(date, sdoc.CreatedDate) between ''' + @DateFromLast_string  + ''' and ''' + @DateToLast_string + '''				
		)'		
	end

	set @p_search_request = @p_request_Date + @p_search_type + @p_search_status
	set @p_search_requestLast = @p_request_DateLast + @p_search_type + @p_search_status

	if (@p_search_request != '')
		set @p_search_request = ' where ' + @p_search_request

	if (@p_search_requestLast != '')
		set @p_search_requestLast = ' where ' + @p_search_requestLast

	set @end_request = '
		CREATE TABLE #Summary1(
				[ProbeDescription] nvarchar(MAX),
				[WeightSumm] money,
				[SummaSumm] money,
		)

		CREATE TABLE #Summary2(
				[ProbeDescription] nvarchar(MAX),
				[WeightSummLast] money,
				[SummaSummLast] money
		)

		INSERT INTO #Summary1
		(
				[ProbeDescription],
				[WeightSumm],
				[SummaSumm]
		)
		select ProbeDescription, SUM(WeightSumm) as WeightSumm, SUM(SummaSumm) as SummaSumm from (
			SELECT sdet.[Weight] as WeightSumm
				  ,sdet.Summa as SummaSumm
				  ,Concat(me.Description,case when kt.Description is null then '''' else '' - '' end,kt.Description) as ProbeDescription
			FROM [dbo].[ScrapDocument] sdoc
				left join dbo.Register reg on sdoc.RegisterID=reg.[ID]		  
				inner join dbo.ScrapDetails sdet on sdet.[DocumentID]=sdoc.[ID]
				inner join dbo.KT kt on kt.ID=sdet.[KTID]
				inner join dbo.Metal me on me.ID=kt.[MetalID]
			  ' 
			  + @p_search_request +
			 ')t1
		group by ProbeDescription

		INSERT INTO #Summary2
		(
				[ProbeDescription],
				[WeightSummLast],
				[SummaSummLast]
		)
		select ProbeDescription, SUM(WeightSumm) as WeightSummLast, SUM(SummaSumm) as SummaSummLast from (
			SELECT sdet.[Weight] as WeightSumm
				  ,sdet.Summa as SummaSumm
				  ,Concat(me.Description,case when kt.Description is null then '''' else '' - '' end,kt.Description) as ProbeDescription
			FROM [dbo].[ScrapDocument] sdoc
				left join dbo.Register reg on sdoc.RegisterID=reg.[ID]		  
				inner join dbo.ScrapDetails sdet on sdet.[DocumentID]=sdoc.[ID]
				inner join dbo.KT kt on kt.ID=sdet.[KTID]
				inner join dbo.Metal me on me.ID=kt.[MetalID]
			  ' 
			  + @p_search_requestLast +
			 ')t2
		group by ProbeDescription
	
		SELECT
			CASE WHEN s2.[ProbeDescription] IS NOT NULL THEN s2.[ProbeDescription] ELSE s1.[ProbeDescription] END as ProbeDescription,
			s1.[WeightSumm],
			s1.[SummaSumm],
			s2.[WeightSummLast],
			s2.[SummaSummLast]
		FROM #Summary1 s1
			left join #Summary2 s2 ON s2.[ProbeDescription]=s1.[ProbeDescription]
		ORDER BY ProbeDescription
	'
	execute	sp_EXECUTEsql @end_request	
	end
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, детали
-- =============================================
-- xp_GetScrapDocumentDetails 'Item', 33, 7001120000121
-- xp_GetScrapDocumentDetails 'Grid', 0, 0, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetScrapDocumentDetails]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_ID int=0,
	@p_DocumentID bigint=0,
	@p_PriceType int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT u.[ID]
			  ,u.[KTID]
			  ,u.[Quantity]
			  ,u.[Weight]
			  ,u.[Description]
			  ,u.[Imennik]
			  ,u.[Impress]
			  ,u.[DocumentID]
			  ,u.[Summa]
			  ,u.[SinglePrice]
			  ,Concat(me.[Description],' - ',kt.[Description]) as FullKTName
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[ScrapDocumentDetails] u
			  left join dbo.KT kt on kt.[ID]=u.KTID
			  left join dbo.Metal me on me.[ID]=kt.MetalID
		where u.ID=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

		SELECT u.[ID]
				,u.[KTID]
				,u.[Quantity]
				,u.[Weight]
				,u.[Description]
				,u.[Imennik]
				,u.[Impress]
				,u.[DocumentID]
				,u.[Summa]
				,u.[SinglePrice]
				,Concat(me.[Description],case when kt.[Description] is null then '' else ' - ' end,kt.[Description]) as FullKTName
				,u.[CreatedDate]
				,u.[LastModifiedDate]
				,u.[CreatedByUserID]
				,u.[LastModifiedByUserID]
			FROM [dbo].[ScrapDocumentDetails] u
			left join dbo.KT kt on kt.[ID]=u.KTID
			left join dbo.Metal me on me.[ID]=kt.MetalID
			where 
			@p_DocumentID=0 or u.[DocumentID]=@p_DocumentID
		order by u.[ID]
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, отчеты, графики
-- =============================================
-- xp_GetScrapDocumentDetailsForReport '01-01-2018 15:13:39', '10-25-2020 15:13:39'
-- xp_GetScrapDocumentDetailsForReport '12-23-2020 00:00:00', '12-25-2021 00:00:00', 'All', 'All'
-- =============================================
-- STRING_AGG(ScrapProductsID,',')
-- xp_GetScrapDocumentDetailsForReport '12-23-2020 00:00:00', '12-24-2020 00:00:00','All', '2|3|4|5|6'

CREATE PROCEDURE [dbo].[xp_GetScrapDocumentDetailsForReport]	
	@p_DateFrom datetime,
	@p_DateTo datetime,
	@p_Type nvarchar(max)='',
	@p_Status nvarchar(MAX)=''
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	begin

	declare @end_request nvarchar(max) = '',
			@str_datefrom nvarchar(30),
			@str_dateto nvarchar(30),
			@p_search_request nvarchar(MAX) = '',
			@p_request_Date nvarchar(MAX)='',
			@p_search_type nvarchar(MAX) = '',
			@p_search_status nvarchar(MAX) = ''
			

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 102)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)



	set @p_Status = REPLACE(@p_Status, '|', ',')
	set @p_Type = REPLACE(@p_Type, '|', ',')


	if (@p_Type != 'All')
	set @p_search_type = ' and sdoc.[Type] in (' + @p_Type + ')' ;	

	if (@p_Status != 'All')
	set @p_search_status = ' and sdoc.[Status] in (' + @p_Status + ')' ;

	if (@DateFrom_string!='1753-01-01 00:00:10')	
	begin
		set @p_request_Date =  		
		' (
			CONVERT(date, sdoc.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
		)'		
	end

	set @p_search_request = @p_request_Date + @p_search_type + @p_search_status
	if (@p_search_request != '')
		set @p_search_request = ' where ' + @p_search_request

	set @end_request = '
	select * from (
		SELECT sdoc.[ID]
			  ,sdoc.[Status]
			  ,sdoc.[SyncDate]
			  ,sdoc.[VendorID]
			  ,sdoc.[ScrapDocumentNumber]
			  ,sdoc.[RegisterID]
			  ,sdoc.[CreatedDate]
			  ,sdoc.[LastModifiedDate]
			  ,sdoc.[CreatedByUserID]
			  ,sdoc.[LastModifiedByUserID]
			  ,sdet.[Weight] as WeightSumm
			  ,sdet.Summa as SummaSumm
			  ,ven.Name as VendorName
			  ,ven.Serial as VendorSerial
			  ,ven.Number as VendorNumber
			  ,ven.Issue as VendorIssue
			  ,ven.IssueDate as VendorIssueDate
			  ,u.FirstName as UserFirstName
			  ,u.LastName as UserLastName
			  ,u.SecondName as UserSecondName
			  ,sdet.CreatedDate as RegCreatedDate
			  ,reg.ScrapRegisterNumber as ScrapRegisterNumber
			  ,reg.SyncDate as SendToCenter
			  ,reg.CreatedDate as docCreatedDate
			  ,sdet.[ID] as ScrapProductID
			  ,Concat(me.Description,case when kt.Description is null then '''' else '' - '' end,kt.Description) as ProbeDescription
			  ,sd1.DocumentNumber as SaleDocument
			  ,sd2.DocumentNumber as PurchaseDoc
			  ,REVERSE(
					STUFF(
						REVERSE(
							(SELECT cast (sdprod1.ProductID as varchar(20)) + '', '' as [text()]
								FROM [dbo].[ScrapDocument] sdoc1
								  left join dbo.Register reg1 on sdoc1.RegisterID=reg1.[ID]
								  inner join dbo.ScrapDocumentDetails sdet1 on sdet.[DocumentID]=sdoc.[ID]          
								  left join dbo.[SaleDocumentPayment] sdp1 on sdp1.ExtReffID=sdoc1.ScrapDocumentNumber
								  left join dbo.[SaleDocument] sd2 on sd2.ID=sdp1.DocumentID
								  left join dbo.[SaleDocumentProduct] sdprod1 on sd2.ID=sdprod1.DocumentID
							 where CONVERT(date, sdoc1.CreatedDate) between ''' + @DateFrom_string + ''' and ''' + @DateTo_string + ''' and  sdet1.[ID] = sdet.[ID] and sdoc1.ID=sdoc.ID
							 order by sdprod1.ID for xml path('''')
							)
						),2,1,''''
					  )
			  ) as ScrapProductsID
			 ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
		  FROM [dbo].[ScrapDocument] sdoc
			  inner join dbo.ScrapDocumentDetails sdet on sdet.[DocumentID]=sdoc.[ID]
			  left join dbo.Vendor ven on ven.ID=sdoc.[VendorID]
			  left join dbo.Users u on u.ID=sdoc.[CreatedByUserID]
			  left join dbo.KT kt on kt.ID=sdet.[KTID]
			  left join dbo.Metal me on me.ID=kt.[MetalID]
			  left join dbo.Register reg on sdoc.RegisterID=reg.[ID]		  
			  left join dbo.[SaleDocumentScrapDocument] sdsd on sdoc.ID=sdsd.ScrapDocumentID
			  left join dbo.[SaleDocument] sd1 on sd1.ID=sdsd.DocumentID
			  left join dbo.[SaleDocumentPayment] sdp on sdp.ExtReffID=sdoc.ScrapDocumentNumber
			  left join dbo.[SaleDocument] sd2 on sd2.ID=sdp.DocumentID
			  left join dbo.[SaleDocumentProduct] sdprod on sd2.ID=sdprod.DocumentID
		  ' 
		  + @p_search_request +
		 ')t
			group by ID, [Status],SyncDate,VendorID, ScrapDocumentNumber, RegisterID, CreatedDate, LastModifiedDate, CreatedByUserID, LastModifiedByUserID,
			WeightSumm, SummaSumm,VendorName,	VendorSerial, VendorNumber,VendorIssue,	VendorIssueDate,UserFirstName,UserLastName, UserSecondName,	RegCreatedDate,ScrapRegisterNumber, SendToCenter, docCreatedDate, 
			ScrapProductID,	ProbeDescription,SaleDocument,PurchaseDoc,
			ShortDisplayNameUser, ScrapProductsID'
	--select @end_request
	--print @end_request
	EXECUTE (@end_request);	
	end
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, отчеты, графики
-- =============================================
-- xp_GetScrapDocumentDetailsForReportSummary '10-01-2019 15:13:39', '10-25-2019 15:13:39','0|2|3|4', 'All'
-- xp_GetScrapDocumentDetailsForReportSummary '01-01-1753 20:00:10', '10-25-2020 15:13:39','0|2|3|4', 'All'
-- xp_GetScrapDocumentDetailsForReportSummary '01-01-1753 20:00:10', '10-25-2020 15:13:39','0|2|3|4', 'All'

CREATE PROCEDURE [dbo].[xp_GetScrapDocumentDetailsForReportSummary]	
	@p_DateFrom datetime,
	@p_DateTo datetime,
	@p_Type nvarchar(max)='',
	@p_Status nvarchar(MAX)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	begin

	declare @end_request nvarchar(max) = '',
			@str_datefrom nvarchar(30),
			@str_dateto nvarchar(30),
			@p_search_request nvarchar(MAX) = '',
			@p_search_requestLast nvarchar(MAX) = '',
			@p_request_Date nvarchar(MAX)='',
			@p_request_DateLast nvarchar(MAX)='',
			@p_search_type nvarchar(MAX) = '',
			@p_search_status nvarchar(MAX) = '',
			@p_DateFromLast datetime,
			@p_DateToLast datetime,
			@DateFromLast_string nvarchar(40),
			@DateToLast_string nvarchar(40)

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 102)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

	set @p_Status = REPLACE(@p_Status, '|', ',')
	set @p_Type = REPLACE(@p_Type, '|', ',')

	if (@p_DateFrom < '1754-01-01 00:00:10')
		set @p_DateFromLast = '1753-01-01 00:00:10'
	else
		set @p_DateFromLast = DATEADD(Year,-1,@p_DateFrom)		

	if (@p_DateTo < '1754-01-01 00:00:10')
		set @p_DateToLast = '1753-01-01 00:00:10'
	else
		set @p_DateToLast = DATEADD(Year,-1,@p_DateTo)

	set @DateFromLast_string = CONVERT(nvarchar(40), @p_DateFromLast, 102)
	set @DateToLast_string = CONVERT(nvarchar(40), @p_DateToLast, 102)

	if (@p_Type != 'All')
	set @p_search_type = ' and sdoc.[Type] in (' + @p_Type + ')' ;	

	if (@p_Status != 'All')
	set @p_search_status = ' and sdoc.[Status] in (' + @p_Status + ')' ;

	if (@DateFrom_string!='1753-01-01 00:00:10')	
	begin
		set @p_request_Date =  		
		' (
			CONVERT(date, sdoc.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
		)'
		set @p_request_DateLast =  		
		' (
			CONVERT(date, sdoc.CreatedDate) between ''' + @DateFromLast_string  + ''' and ''' + @DateToLast_string + '''				
		)'		
	end

	set @p_search_request = @p_request_Date + @p_search_type + @p_search_status
	set @p_search_requestLast = @p_request_DateLast + @p_search_type + @p_search_status

	if (@p_search_request != '')
		set @p_search_request = ' where ' + @p_search_request

	if (@p_search_requestLast != '')
		set @p_search_requestLast = ' where ' + @p_search_requestLast

	set @end_request = '
		CREATE TABLE #Summary1(
				[ProbeDescription] nvarchar(MAX),
				[WeightSumm] money,
				[SummaSumm] money,
		)

		CREATE TABLE #Summary2(
				[ProbeDescription] nvarchar(MAX),
				[WeightSummLast] money,
				[SummaSummLast] money
		)

		INSERT INTO #Summary1
		(
				[ProbeDescription],
				[WeightSumm],
				[SummaSumm]
		)
		select ProbeDescription, SUM(WeightSumm) as WeightSumm, SUM(SummaSumm) as SummaSumm from (
			SELECT sdet.[Weight] as WeightSumm
				  ,sdet.Summa as SummaSumm
				  ,Concat(me.Description,case when kt.Description is null then '''' else '' - '' end,kt.Description) as ProbeDescription
			FROM [dbo].[ScrapDocument] sdoc
				left join dbo.Register reg on sdoc.RegisterID=reg.[ID]		  
				inner join dbo.ScrapDocumentDetails sdet on sdet.[DocumentID]=sdoc.[ID]
				inner join dbo.KT kt on kt.ID=sdet.[KTID]
				inner join dbo.Metal me on me.ID=kt.[MetalID]
			  ' 
			  + @p_search_request +
			 ')t1
		group by ProbeDescription

		INSERT INTO #Summary2
		(
				[ProbeDescription],
				[WeightSummLast],
				[SummaSummLast]
		)
		select ProbeDescription, SUM(WeightSumm) as WeightSummLast, SUM(SummaSumm) as SummaSummLast from (
			SELECT sdet.[Weight] as WeightSumm
				  ,sdet.Summa as SummaSumm
				  ,Concat(me.Description,case when kt.Description is null then '''' else '' - '' end,kt.Description) as ProbeDescription
			FROM [dbo].[ScrapDocument] sdoc
				left join dbo.Register reg on sdoc.RegisterID=reg.[ID]		  
				inner join dbo.ScrapDocumentDetails sdet on sdet.[DocumentID]=sdoc.[ID]
				inner join dbo.KT kt on kt.ID=sdet.[KTID]
				inner join dbo.Metal me on me.ID=kt.[MetalID]
			  ' 
			  + @p_search_requestLast +
			 ')t2
		group by ProbeDescription
	
		SELECT
			CASE WHEN s2.[ProbeDescription] IS NOT NULL THEN s2.[ProbeDescription] ELSE s1.[ProbeDescription] END as ProbeDescription,
			s1.[WeightSumm],
			s1.[SummaSumm],
			s2.[WeightSummLast],
			s2.[SummaSummLast]
		FROM #Summary1 s1
			left join #Summary2 s2 ON s2.[ProbeDescription]=s1.[ProbeDescription]
		ORDER BY ProbeDescription
	'
	execute	sp_EXECUTEsql @end_request	
	end
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, сборка фильтров
-- =============================================
-- xp_GetScrapDocumentFilters_20210216172933 0
-- xp_GetScrapDocumentFilters_20210216172933 1
-- xp_GetScrapDocumentFilters_20210216172933 2
-- xp_GetScrapDocumentFilters_20210216172933 3
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetScrapDocumentFilters]	
	@p_StatusDocument int,
	@p_PosID int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	Declare
		--Out Variables
		@p_QuantityMin int=0,
		@p_QuantityMax int=0,
		@p_WeightMin money=0,
		@p_WeightMax money=0,
		@p_TagPriceWithVATMin money=0,
		@p_TagPriceWithVATMax money=0,
		@p_Status nvarchar(MAX)='',
		@p_CreatedByUserID nvarchar(MAX)='',
		@p_Type nvarchar(MAX)='',
		@LMD datetime


if @p_StatusDocument!=0
	begin
		select @LMD =  OpeningDate from WorkShift where PosID = @p_PosID and ClosingDate is null	
		--QuantityMin
-------------------------------------------------------------------
			SELECT Top 1 @p_QuantityMin=IsNull(SUM(sdt.Quantity),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			WHERE
				sd.[Status]=@p_StatusDocument
				and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
			group by sdt.DocumentID order by SUM(sdt.Quantity)

		--QuantityMax
-------------------------------------------------------------------
			SELECT Top 1 @p_QuantityMax=IsNull(SUM(sdt.Quantity),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			WHERE
				sd.[Status]=@p_StatusDocument
				and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
			group by sdt.DocumentID order by SUM(sdt.Quantity) Desc

		--WeightMin
-------------------------------------------------------------------
			SELECT Top 1 @p_WeightMin=IsNull(SUM(sdt.Weight),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			WHERE
				sd.[Status]=@p_StatusDocument
				and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
			group by sdt.DocumentID order by SUM(sdt.Weight)

		--WeightMax
-------------------------------------------------------------------
			SELECT Top 1 @p_WeightMax=IsNull(SUM(sdt.Weight),0)  from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			WHERE
				sd.[Status]=@p_StatusDocument
				and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
			group by sdt.DocumentID order by SUM(sdt.Weight) Desc

		--TagPriceWithVATMin
-------------------------------------------------------------------
			SELECT Top 1 @p_TagPriceWithVATMin=IsNull(SUM(sdt.Summa),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			WHERE
				sd.[Status]=@p_StatusDocument
				and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
			group by sdt.DocumentID order by SUM(sdt.Summa)

		--TagPriceWithVATMax
-------------------------------------------------------------------
			SELECT Top 1 @p_TagPriceWithVATMax=IsNull(SUM(sdt.Summa),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			WHERE
				sd.[Status]=@p_StatusDocument
				and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
			group by sdt.DocumentID order by SUM(sdt.Summa) Desc

		--Status
-------------------------------------------------------------------
			SELECT
				@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							sd.[Status] as [Value]
						FROM [dbo].[ScrapDocument] sd
						WHERE
						sd.[Status]=@p_StatusDocument
						and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
				) as Temp
			IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

		--CreatedByUserID
-------------------------------------------------------------------
			SELECT
				@p_CreatedByUserID = CONCAT(@p_CreatedByUserID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							sd.[CreatedByUserID] as [ID]
							,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
						FROM [dbo].[ScrapDocument] sd
							inner join Users u on u.ID = sd.[CreatedByUserID]
						WHERE
						sd.[Status]=@p_StatusDocument
						and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
				) as Temp
				ORDER by Temp.[ID],Temp.[Value]
			IF LEN(@p_CreatedByUserID) > 2 SET @p_CreatedByUserID = SUBSTRING(@p_CreatedByUserID,1, LEN(@p_CreatedByUserID)-1) ELSE SET @p_CreatedByUserID = NULL

		--Type
-------------------------------------------------------------------
			SELECT
				@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							sd.[Type] as [Value]
						FROM [dbo].[ScrapDocument] sd
						WHERE
						sd.[Status]=@p_StatusDocument
						and sd.LastModifiedDate > CAST(@LMD AS nvarchar)
				) as Temp
			IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL
	end
else
	begin
		--QuantityMin
-------------------------------------------------------------------
			SELECT Top 1 @p_QuantityMin=IsNull(SUM(sdt.Quantity),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			group by sdt.DocumentID order by SUM(sdt.Quantity)

		--QuantityMax
-------------------------------------------------------------------
			SELECT Top 1 @p_QuantityMax=IsNull(SUM(sdt.Quantity),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			group by sdt.DocumentID order by SUM(sdt.Quantity) Desc

		--WeightMin
-------------------------------------------------------------------
			SELECT Top 1 @p_WeightMin=IsNull(SUM(sdt.Weight),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			group by sdt.DocumentID order by SUM(sdt.Weight)

		--WeightMax
-------------------------------------------------------------------
			SELECT Top 1 @p_WeightMax=IsNull(SUM(sdt.Weight),0)  from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			group by sdt.DocumentID order by SUM(sdt.Weight) Desc

		--TagPriceWithVATMin
-------------------------------------------------------------------
			SELECT Top 1 @p_TagPriceWithVATMin=IsNull(SUM(sdt.Summa),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			group by sdt.DocumentID order by SUM(sdt.Summa)

		--TagPriceWithVATMax
-------------------------------------------------------------------
			SELECT Top 1 @p_TagPriceWithVATMax=IsNull(SUM(sdt.Summa),0) from [dbo].[ScrapDocumentDetails] sdt
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdt.DocumentID
			group by sdt.DocumentID order by SUM(sdt.Summa) Desc

		--Status
-------------------------------------------------------------------
			SELECT
				@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							sd.[Status] as [Value]
						FROM [dbo].[ScrapDocument] sd
				) as Temp
			IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

		--CreatedByUserID
-------------------------------------------------------------------
			SELECT
				@p_CreatedByUserID = CONCAT(@p_CreatedByUserID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							sd.[CreatedByUserID] as [ID]
							,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
						FROM [dbo].[ScrapDocument] sd
							inner join Users u on u.ID = sd.[CreatedByUserID]
				) as Temp
				ORDER by Temp.[ID],Temp.[Value]
			IF LEN(@p_CreatedByUserID) > 2 SET @p_CreatedByUserID = SUBSTRING(@p_CreatedByUserID,1, LEN(@p_CreatedByUserID)-1) ELSE SET @p_CreatedByUserID = NULL

		--Type
-------------------------------------------------------------------
			SELECT
				@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
				FROM (
						SELECT DISTINCT
							sd.[Type] as [Value]
						FROM [dbo].[ScrapDocument] sd
				) as Temp
			IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL
	end

	--Out Final Result
-------------------------------------------------------------------
	SELECT	@p_QuantityMin as QuantityMin,
			@p_QuantityMax as QuantityMax,
			@p_WeightMin as WeightMin,
			@p_WeightMax as WeightMax,
			@p_TagPriceWithVATMin as TagPriceWithVATMin,
			@p_TagPriceWithVATMax as TagPriceWithVATMax,
			@p_Status as Status,
			@p_CreatedByUserID as CreatedByUserID,
			@p_Type as Type
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, подсчет сумм
-- =============================================
-- xp_GetScrapDocumentSummary_20210216172933 'ingrid','', 'All', '2', '0', '01-01-1753 0:00:10', '01-21-2021 14:53:47', '01-01-1753 0:00:10', '01-21-2021 14:53:37', 1, 15, 0.97, 3466, 1479.28, 5223262, 1998
-- exec xp_GetScrapDocumentSummary_20210216172933 @p_FromDateLastModifiedDate='1753-01-01 00:00:10',@p_ToDateLastModifiedDate='2021-01-21 15:03:09.860',@p_search=N'',@p_DateFrom='1753-01-01',@p_DateTo='2021-01-21',@p_Status=N'2',@p_Type=N'0',@p_CreatedByUserID=N'All',@p_Quantity_Min=1.0000,@p_Quantity_Max=15.0000,@p_Weight_Min=0.9700,@p_Weight_Max=3466.0000,@p_TagPriceWithVAT_Min=1479.2800,@p_TagPriceWithVAT_Max=5223262.0000
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetScrapDocumentSummary]
	@p_TypeScreen varchar(40),
	@p_search nvarchar(40)='',

	@p_CreatedByUserID nvarchar(MAX)='',	
	@p_Status nvarchar(MAX)='',
	@p_Type nvarchar(MAX)='',

	@p_DateFrom datetime,
	@p_DateTo datetime,

	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,

	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,
	@p_PosID int = 0	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	--SET STATISTICS TIME ON;
	declare @end_request nvarchar(max) = ''

	if (@p_Type = '' or @p_Status = '' or @p_CreatedByUserID = '') begin
		SELECT TOP 1
		0 as CountID
		,0 as WeightSumm
		,0 as PriceSumm
	end
	else begin
		declare @p_search_money nvarchar(40)
		declare @p_search_string nvarchar(40)
		declare @p_order nvarchar(40)='ASC';
		declare @delimeter nvarchar(10)= '''|''';
		declare @filter_all nvarchar(10)= '''All''';
		declare @p_MaxValue int = 0;
		declare @p_MinValue int = 0;	

		declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
		declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

		declare @DateLastFrom_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
		declare @DateLastTo_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)

		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		declare @p_search_type nvarchar(MAX) = ''
		declare @p_search_createdByUserID nvarchar(MAX) = ''
		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_time nvarchar(MAX) = ''
		declare @p_search_timeout nvarchar(MAX) = ''
		declare @p_search_LastModifiedDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''	
		declare @p_filter_request_Weight nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''
		declare @p_search_request nvarchar(MAX) = '',
				@LMD datetime

		select @LMD =  OpeningDate from WorkShift where PosID = @p_PosID and ClosingDate is null 

		if @p_TypeScreen in ('grid') begin ---------------------------------------------------------------------

			set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
			set @p_Type = REPLACE(@p_Type, '|', ',')
			set @p_Status = REPLACE(@p_Status, '|', ',')
	
			set @p_filter_request_Quantity = ' 		
						(
							(
								( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
								( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
							) 					
						)'	

			set @p_filter_request_Weight = ' and 		
					(
						(
							( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
							( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
						) 					
					)'

			set @p_filter_request_TagPriceWithVAT = 
					' and (
						(
							( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
							( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
						) 
					)'	

			if (@DateFrom_string!='1753-01-01 00:00:10')	
			begin
				set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
				set @p_search_time =  		
					' and (
						CONVERT(date, s.[SyncDate]) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
					)'			
			end

			if (@DateLastFrom_string!='1753-01-01 00:00:10')	
			begin
				set	@DateLastFrom_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
				set @p_search_time = @p_search_time +		
					' and (
						CONVERT(date, s.[LastModifiedDate]) between ''' + @DateLastFrom_string  + ''' and ''' + @DateLastTo_string + '''				
					) '			
			end
		
			set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_search_time

			if (@p_search != '')
				set @p_search_request = ' and
				(
					(
						(
							cast(s.ScrapDocumentNumber as nvarchar(40)) like ''' + @p_search_string + '''
						)				
					)
				)'

			set @p_search_request = @p_filter_request + @p_search_request 

			if (@p_Type != 'All')
				set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
			if (@p_Status != 'All')
				set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
			if (@p_CreatedByUserID != 'All') 
				set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;

			set @p_search_request = @p_search_request + @p_search_type + @p_search_status + @p_search_createdByUserID
		
			set @end_request =  'SELECT 
									COUNT(distinct s.[ID]) as CountID
									,SUM(sdd.[Quantity]) as QuantitySumm
									,SUM(sdd.[Weight]) as WeightSumm 
									,SUM(sdd.[Summa]) as SummaSumm
								from [dbo].[ScrapDocument] as s
								left join ScrapDocumentDetails sdd on sdd.DocumentID = s.ID where '
								+ @p_search_request		
			--print @end_request
			EXECUTE (@end_request);	
		end

		if @p_TypeScreen in ('ingrid') begin ---------------------------------------------------------------------

			set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
			set @p_Type = REPLACE(@p_Type, '|', ',')
			set @p_Status = REPLACE(@p_Status, '|', ',')
	
			set @p_filter_request_Quantity = ' 		
						(
							(
								( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
								( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
							) 					
						)'	

			set @p_filter_request_Weight = ' and 		
					(
						(
							( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
							( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
						) 					
					)'

			set @p_filter_request_TagPriceWithVAT = 
					' and (
						(
							( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
							( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
						) 
					)'	

			if (@DateFrom_string!='1753-01-01 00:00:10')	
			begin
				set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
				set @p_search_time =  		
					' and (
						CONVERT(date, s.[SyncDate]) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
					)'			
			end

			if (@DateLastFrom_string!='1753-01-01 00:00:10')	
			begin
				set	@DateLastFrom_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
				set @p_search_time = @p_search_time +		
					' and (
						CONVERT(date, s.[LastModifiedDate]) between ''' + @DateLastFrom_string  + ''' and ''' + @DateLastTo_string + '''				
					) '			
			end
		
			set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_search_time

--			declare @p_search_request nvarchar(MAX) = ''
			if (@p_search != '')
				set @p_search_request = ' and
				(
					(
						(
							cast(s.ScrapDocumentNumber as nvarchar(40)) like ''' + @p_search_string + '''
						)				
					)
				)'

			set @p_search_request = @p_filter_request + @p_search_request 

			if (@p_Type != 'All')
				set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
			if (@p_Status != 'All')
				set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
			if (@p_CreatedByUserID != 'All') 
				set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
			if(@LMD is null)
				set @p_search_LastModifiedDate = 'and s.LastModifiedDate > ''' + CAST(@LMD AS nvarchar) + '''';

			set @p_search_request = @p_search_request + @p_search_type + @p_search_status + @p_search_createdByUserID+@p_search_LastModifiedDate
		
			set @end_request =  'SELECT 
									COUNT(distinct s.[ID]) as CountID
									,SUM(sdd.[Quantity]) as QuantitySumm
									,SUM(sdd.[Weight]) as WeightSumm 
									,SUM(sdd.[Summa]) as SummaSumm
								from [dbo].[ScrapDocument] as s
								left join ScrapDocumentDetails sdd on sdd.DocumentID = s.ID where '
								+ @p_search_request		
			--print @end_request
			EXECUTE (@end_request);	
		end



	end							
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Скупка лома, список квитанций, результирующая грида
-- =============================================
-- xp_GetScrapDocumentTable_20210216172933 'Grid', '', 0, 0, 0, 'All', 'All', 'All', '12-16-2020 00:00:10', '12-16-2020 23:00:10', '12-16-2020 00:00:10', '12-16-2020 23:00:10', 0 , 1000000000, 0, 1000000000, 0, 1000000000, 0, 24, 'ID', 0
-- xp_GetScrapDocumentTable_202102161729331 'Grid', '', 0, 0, -1, 'All', '2|', 'All', '01-01-1753 0:00:10', '08-11-2022 13:39:15', 1 , 3, 0.1, 30, 0, 1000000000, 0, 24, 'ID', 0
-- xp_GetScrapDocumentTable_202102161729331 'ItemByStatus', '', 15718, 7001020000051, 1023, 'All', 'All', 'All', '01-01-1753 0:00:00', '05-05-2020 13:39:15', 0 , 14, 1, 88, 0.01, 8010, 10, 11098736, 'ID', 1
-- xp_GetScrapDocumentTable_202102161729331 'Item', '', 15744, 7001020000051, 1023, 'All', 'All', 'All', '01-01-1753 0:00:00', '05-05-2020 13:39:15', 0 , 14, 1, 88, 0.01, 8010, 10, 11098736, 'ID', 1
-- xp_GetScrapDocumentTable_20210216172933 'Child', '', 0, 1020776, 0, 'All', 'All', 'All', '01-01-1753 0:00:10', '01-13-2021 17:11:18', '01-01-1753 0:00:10', '01-13-2021 17:11:18', 0 , 0, 0, 0, 0, 0, 0, 0, 'ID', 0
-- xp_GetScrapDocumentTable_202102161729331 'Name', '', 15746, 7001020000057, 1023, 'All', 'All', 'All', '01-01-1753 0:00:00', '08-11-2020 13:39:15', 0 , 14, 1, 88, 0.01, 8010, 10, 11098736, 'ID', 1
-- xp_GetScrapDocumentTable_20210216172933 'ingrid', '', 0, 0, 0, 'All', 'All', 'All', '01-01-1753 0:00:10', '01-13-2021 17:11:18', '01-01-1753 0:00:10', '01-13-2021 17:11:18', 0 , 10000000, 0,10000000, 0, 10000000, 0, 10000, 1998, 'ID', 0

-- =============================================
CREATE PROCEDURE [dbo].[xp_GetScrapDocumentTable]
	@p_TypeScreen varchar(40), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,
	@p_DocumentNumber bigint,
	@p_RegisterID int,

	@p_CreatedByUserID nvarchar(MAX)='',	
	@p_Status nvarchar(MAX)='',
	@p_Type nvarchar(MAX)='',

	@p_DateFrom datetime,
	@p_DateTo datetime,

	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,

	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_PosID int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	

	declare @end_request nvarchar(max) = ''
	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

	declare @DateLastFrom_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateLastTo_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)

	declare @p_search_type nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''
	declare @p_search_status nvarchar(MAX) = ''
	declare @p_search_time nvarchar(MAX) = ''
	declare @p_search_LastModifiedDate nvarchar(MAX) = ''	

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Quantity nvarchar(MAX) = ''	
	declare @p_filter_request_Weight nvarchar(MAX) = ''	
	declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''


	set @p_TypeScreen = LOWER(@p_TypeScreen)	
	Declare @dt_now datetime=getdate(),
			@LMD datetime
	declare @p_search_request nvarchar(MAX) = ''
	select @LMD =  OpeningDate from WorkShift where PosID = @p_PosID and ClosingDate is null 
	if @p_TypeScreen='ItemByStatus' begin
		SELECT s.[ID]
							  ,s.[Type]
							  ,s.[Status]
							  ,s.[SyncDate]
							  ,s.[ScrapDocumentNumber]				  
							  ,s.[RegisterID]
							  ,s.[VendorID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]
							  ,u.ID as UserID
							  ,Concat(u.LastName,' ', u.FirstName,' ', u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
							  ,(SELECT Sum([Quantity]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT Sum([Weight]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT Sum([Summa]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
						FROM [dbo].[ScrapDocument] s
						left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
		where s.ScrapDocumentNumber=@p_DocumentNumber
	end


	if @p_TypeScreen='Child' begin	
			SELECT ScrapDocumentNumber, SUM(SummaMetal) as SummaMetal, SUM(SummaOffset) as SummaOffset, SUM(SummaOffsetWithStones) as SummaOffsetWithStones from 
			(
				SELECT	
						case when s.LastModifiedDate>@LMD and s.Status = 2 then s.ScrapDocumentNumber 
						else -1*s.ScrapDocumentNumber 
						end as ScrapDocumentNumber,
						sd.[Weight]*mp1.[PriceValue] as SummaMetal	
						,sd.[Weight]*mp2.[PriceValue] as SummaOffset
						,sd.[Weight]*mp3.[PriceValue] as SummaOffsetWithStones
								FROM [dbo].[ScrapDocument] s
										inner join dbo.ScrapDocumentDetails sd on sd.DocumentID=s.ID 
										inner join dbo.KT kt on kt.ID=sd.KTID 
										inner join dbo.MetalPrices mp1 on mp1.KTID=kt.ID and mp1.PriceType=1
										inner join dbo.MetalPrices mp2 on mp2.KTID=kt.ID and mp2.PriceType=2
										inner join dbo.MetalPrices mp3 on mp3.KTID=kt.ID and mp3.PriceType=3									
					where s.ScrapDocumentNumber=@p_DocumentNumber  --and s.LastModifiedDate > @LMD--(select OpeningDate from WorkShift where PosID = @p_PosID and ClosingDate is null )--DateAdd(day, -1, @dt_now)								
		) temp
		group by ScrapDocumentNumber
	end

	if @p_TypeScreen='Item' begin
		SELECT s.[ID]
							  ,s.[Type]
							  ,s.[Status]
							  ,s.[SyncDate]
							  ,s.[ScrapDocumentNumber]				  
							  ,s.[RegisterID]
							  ,s.[VendorID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]
							  ,u.ID as UserID
							  ,Concat(u.LastName,' ', u.FirstName,' ', u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
							  ,(SELECT Sum(IsNull([Quantity],0)) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT Sum(IsNull([Weight],0)) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT Sum(IsNull([Summa],0)) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
							  --,(SELECT [Description] from [dbo].[KT] WHERE ID=(Select KTID from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])) as KT
						FROM [dbo].[ScrapDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								--left join dbo.KT kt on kt.[ID]=
		where s.ID=@p_ID
	end

	if @p_TypeScreen in ('grid') begin ---------------------------------------------------------------------
		
		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_Type = REPLACE(@p_Type, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')

		if (@p_Type = '' or @p_Status = '' or @p_CreatedByUserID = '')
		return
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;
		
		set @p_filter_request_Quantity = ' 		
					(
						(
							( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
							( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_Weight = ' and 		
				(
					(
						( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
						( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
					) 					
				) '

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and (
					(
						( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
					) 					
				) '					

		if (@DateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_search_time =  		
				' and (
					CONVERT(date, s.[SyncDate]) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
				) '			
		end

		if (@DateLastFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@DateLastFrom_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_time = @p_search_time +  		
				' and (
					CONVERT(date, s.[LastModifiedDate]) between ''' + @DateLastFrom_string  + ''' and ''' + @DateLastTo_string + '''				
				) '			
		end

		set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_search_time

		
		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.[ScrapDocumentNumber] as nvarchar(40)) like ''' + @p_search_string + '''
					)				
				)
			) '

		set @p_search_request = @p_filter_request + @p_search_request 

		if (@p_Type != 'All')
			set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;

		set @p_search_request = @p_search_request + @p_search_type + @p_search_status + @p_search_createdByUserID

		if(@p_SortColumn='QuantitySumm')
			set  @p_SortColumn='(SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='WeightSumm')
			set @p_SortColumn='(SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='SummaSumm')
			set @p_SortColumn='(SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='DisplayUserName')
			set @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else
			set @p_SortColumn='s.'+@p_SortColumn

		set @end_request = 
		'SELECT * FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[Type]
							  ,s.[Status]
							  ,s.[SyncDate]
							  ,s.[ScrapDocumentNumber]				  
							  ,s.[RegisterID]
							  ,s.[VendorID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]
							  ,u.ID as UserID
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,(SELECT SUM([Quantity]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM([Weight]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT SUM([Summa]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
						FROM [dbo].[ScrapDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID] where '
								+ @p_search_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'					
		-- select @end_request
		EXECUTE (@end_request);	
	end

	if @p_TypeScreen in ('ingrid') begin ---------------------------------------------------------------------
		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_Type = REPLACE(@p_Type, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')

		if (@p_Type = '' or @p_Status = '' or @p_CreatedByUserID = '')
		return
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;
		
		set @p_filter_request_Quantity = ' 		
					(
						(
							( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
							( (SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_Weight = ' and 		
				(
					(
						( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
						( (SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
					) 					
				) '

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and (
					(
						( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						( (SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
					) 					
				) '					

		if (@DateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_search_time =  		
				' and (
					CONVERT(date, s.[SyncDate]) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
				) '			
		end

		if (@DateLastFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@DateLastFrom_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_time = @p_search_time +  		
				' and (
					CONVERT(date, s.[LastModifiedDate]) between ''' + @DateLastFrom_string  + ''' and ''' + @DateLastTo_string + '''				
				) '			
		end

		set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_search_time

		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.[ScrapDocumentNumber] as nvarchar(40)) like ''' + @p_search_string + '''
					)				
				)
			) '
		
		set @p_search_request = @p_filter_request + @p_search_request 

		if (@p_Type != 'All')
			set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
		if(@LMD is null)
			set @p_search_LastModifiedDate = 'and s.LastModifiedDate > ''' + CAST(@LMD AS nvarchar) + '''';

		set @p_search_request = @p_search_request + @p_search_type + @p_search_status + @p_search_createdByUserID+@p_search_LastModifiedDate

		if(@p_SortColumn='QuantitySumm')
			set  @p_SortColumn='(SELECT IsNull(SUM([Quantity]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='WeightSumm')
			set @p_SortColumn='(SELECT IsNull(SUM([Weight]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='SummaSumm')
			set @p_SortColumn='(SELECT IsNull(SUM([Summa]),0) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='DisplayUserName')
			set @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else
			set @p_SortColumn='s.'+@p_SortColumn
		set @end_request = '';
		set @end_request = 
		'SELECT * FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[Type]
							  ,s.[Status]
							  ,s.[SyncDate]
							  ,s.[ScrapDocumentNumber]				  
							  ,s.[RegisterID]
							  ,s.[VendorID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]
							  ,u.ID as UserID
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,(SELECT SUM([Quantity]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM([Weight]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT SUM([Summa]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
						FROM [dbo].[ScrapDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID] where '
								+ @p_search_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'					
--		 select @end_request
		EXECUTE (@end_request);	
	end


	if @p_TypeScreen = 'Name' begin ---------------------------------------------------------------------
		
		declare @p_search_registr nvarchar(MAX) = ''		

		set @p_search_registr = ' s.RegisterID = ' + CAST(@p_RegisterID AS nvarchar);			
		set @p_filter_request =  @p_search_registr
		set @p_Status = REPLACE(@p_Status, '|', ',')

		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') '
	
		set @end_request = 
		              'SELECT s.[ID]
						      ,s.[Type]
							  ,s.[Status]
							  ,s.[SyncDate]
							  ,s.[ScrapDocumentNumber]				  
							  ,s.[RegisterID]
							  ,s.[VendorID]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]
							  ,u.ID as UserID
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,(SELECT SUM([Quantity]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM([Weight]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT SUM([Summa]) from [dbo].[ScrapDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
						FROM [dbo].[ScrapDocument] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID] where '
								+ @p_search_registr	
								+ @p_search_status

		--select @end_request
		EXECUTE (@end_request);	
	end
END







 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [xp_GetShopAttributes] 'grid', '', 0, 1, 0, '', '', 'CommonAttributes'
-- =============================================
Create PROCEDURE [dbo].[xp_GetShopAttributes]
	@p_TypeScreen nvarchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',
	@p_ID int=0,
	@p_Type tinyint = 0,
	@p_Name nvarchar(255) = '',
	@p_Value nvarchar(255) = '',
	@p_AttributeGroup nvarchar(50)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT [ID]
			,[Type]
			,[Name]
			,[Value]
			,[AttributeGroup]
			,[AttributeSort]
			,[Visibility]
			,[CreatedDate]
			,[LastModifiedDate]
			,[CreatedByUserID]
			,[LastModifiedByUserID]
		FROM [dbo].[ShopAttributes]
		where ID=@p_ID 
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		SELECT [ID]
			,[Type]
			,[Name]
			,[Value]
			,[AttributeGroup]
			,[AttributeSort]
			,[Visibility]
			,[CreatedDate]
			,[LastModifiedDate]
			,[CreatedByUserID]
			,[LastModifiedByUserID]
		FROM [dbo].[ShopAttributes] 
		where (@p_Search='' 
				or (convert(varchar(10), ID) like @p_search 
					or [Name]  like '%' + @p_search +'%'
					or [Value]  like '%' + @p_search +'%')) 
				and (@p_AttributeGroup='' or AttributeGroup=@p_AttributeGroup)
		order by [AttributeSort]
	end
	else if @p_TypeScreen='name' begin
		SELECT [ID]
			,[Type]
			,[Name]
			,[Value]
			,[AttributeGroup]
			,[Visibility]
			,[CreatedDate]
			,[LastModifiedDate]
			,[CreatedByUserID]
			,[LastModifiedByUserID]
		FROM [dbo].[ShopAttributes] 
		where [Name]=@p_Name
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetShowcase 'Item', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetShowcase]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_ID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT s.[ID]
			  ,s.[Name]
			  ,s.[Description]
			  ,s.[CreatedDate]
			  ,s.[LastModifiedDate]
			  ,s.[CreatedByUserID]
			  ,s.[LastModifiedByUserID]
		FROM [dbo].[Showcase] s
		where s.ID=@p_ID
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		SELECT s.[ID]
			  ,s.[Name]
			  ,s.[Description]
			  ,s.[CreatedDate]
			  ,s.[LastModifiedDate]
			  ,s.[CreatedByUserID]
			  ,s.[LastModifiedByUserID]
		FROM [dbo].[Showcase] s
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetStones 4
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetStones]
	@p_ProductID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		SELECT s.[ID]
			  ,s.[ProductID]
			  ,s.[Stone]
			  ,s.[Shape]
			  ,s.[Size]
			  ,s.[Color]
			  ,s.[Clarity]
			  ,s.[Quantity]
			  ,s.[Weight]
			  ,s.[Setting]
			  ,s.[CreatedDate]
			  ,s.[LastModifiedDate]
			  ,s.[CreatedByUserID]
			  ,s.[LastModifiedByUserID]
		  FROM [dbo].[Stones] s
		where (@p_ProductID=0  or s.[ProductID]=@p_ProductID)
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> старая Перемещения, список перемещений, детали
-- =============================================
-- xp_GetTransferDocumentDetails 'Grid', 131
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferDocumentDetails]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter	
	@p_DocumentID int,
	@p_ID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
			SELECT dd.[ID]
				  ,dd.[DocumentID]
				  ,dd.[LineDocument]
				  ,dd.[Model]
				  ,dd.[ProductID]
				  ,dd.[Type]
				  ,dd.[KtID]
				  ,meid.[Description] as MetalDescription
				  ,ktid.[Description] as KtIDShortDescription
				  ,Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) as KtIDDescription
				  ,dd.[Size]
				  ,dd.[Color]
				  ,dd.[Gender]
				  ,dd.[SupplierID]
				  ,dd.[SupplierName]
				  ,dd.[Country]
				  ,dd.[ThemedCollection]
				  ,dd.[Weight]
				  ,dd.[CostWithoutVAT]
				  ,dd.[CostCurrency]
				  ,dd.[TagPriceWithVAT]
				  ,dd.[TagPriceCurrency]
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,dd.[TagPriceExtra]
				  ,dd.[ShowcaseID]
				  ,shid.[Description] as ShowcaseIDDescription
				  ,dc.[ReffID]
				  ,dd.[IsChecked]
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
				  ,dd.TagPriceWithOutVAT 
				  ,dd.DeclarationNumber
			      ,dd.TnvedCode
			  FROM [dbo].[TransferDocumentDetails] dd
			  		left join dbo.[KT] ktid on ktid.ID=dd.[KtID]
					left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					left join dbo.[Showcase] shid on shid.ID=dd.[ShowcaseID]
					left join dbo.[Document] dc on dc.ID=dd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dd.TagPriceCurrency
			  where dd.DocumentID = @p_DocumentID
			  order by dd.[LineDocument]
	end
	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
			SELECT dd.[ID]
				  ,dd.[DocumentID]
				  ,dd.[LineDocument]
				  ,dd.[Model]
				  ,dd.[ProductID]
				  ,dd.[Type]
				  ,dd.[KtID]
				  ,meid.[Description] as MetalDescription
				  ,ktid.[Description] as KtIDShortDescription
				  ,Concat(meid.[Description],case when ktid.[Description] is null then '' else ' - ' end,ktid.[Description]) as KtIDDescription
				  ,dd.[Size]
				  ,dd.[Color]
				  ,dd.[Gender]
				  ,dd.[SupplierID]
				  ,dd.[SupplierName]
				  ,dd.[Country]
				  ,dd.[ThemedCollection]
				  ,dd.[Weight]
				  ,dd.[CostWithoutVAT]
				  ,dd.[CostCurrency]
				  ,dd.[TagPriceWithVAT]
				  ,dd.[TagPriceCurrency]
				  ,cur.[ShortDescription] as CurrencyShortDescription
				  ,cur.[LongDescription] as CurrencyLongDescription
				  ,dd.[TagPriceExtra]
				  ,dd.[ShowcaseID]
				  ,shid.[Description] as ShowcaseIDDescription
				  ,dc.[ReffID]
				  ,dd.[IsChecked]
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
			,dd.TagPriceWithOutVAT 
			,dd.DeclarationNumber
			,dd.TnvedCode
			  FROM [dbo].[TransferDocumentDetails] dd
			  		left join dbo.[KT] ktid on ktid.ID=dd.[KtID]
					left join dbo.[Metal] meid on meid.ID=ktid.MetalID
					left join dbo.[Showcase] shid on shid.ID=dd.[ShowcaseID]
					left join dbo.[Document] dc on dc.ID=dd.[DocumentID]
					left join [dbo].[Currency] cur on cur.Code=dd.TagPriceCurrency
			  where dd.DocumentID = @p_DocumentID AND
					dd.[ID] = @p_ID
			  order by dd.[LineDocument]
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Перемещения, список перемещений, сборка фильтров
-- =============================================
-- xp_GetTransferDocumentFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferDocumentFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		@p_Users nvarchar(MAX)='',
		@p_SenderID nvarchar(MAX)='',
		@p_ReceiverID nvarchar(MAX)='',
		@p_Type nvarchar(MAX)='',
		@p_Status nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_Quantity_Min money = 0,
		@p_Quantity_Max money = 0,
		@p_Weight_Min money = 0,
		@p_Weight_Max money = 0,
		@p_TagPriceWithVAT_Min money = 0,
		@p_TagPriceWithVAT_Max money = 0,
		@p_TagPriceWithOutVAT_Min money = 0,
		@p_TagPriceWithOutVAT_Max money = 0

	--Users
-------------------------------------------------------------------
		SELECT
			@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[CreatedByUserID] as [ID]
						,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
					FROM [dbo].[TransferDocument] p
						left join Users u on u.ID = p.[CreatedByUserID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

	--LastUsers
-------------------------------------------------------------------
		SELECT
			@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[LastModifiedByUserID] as [ID]
						,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
					FROM [dbo].[TransferDocument] p
						inner join Users u on u.ID = p.[LastModifiedByUserID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL

	--SenderID
-------------------------------------------------------------------
		SELECT
			@p_SenderID = CONCAT(@p_SenderID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.SenderID as [ID]
						,Concat(p.SenderID,' ',ls.Description) as [Value]
					FROM [dbo].[TransferDocument] p
						left join dbo.Location ls on ls.[ID]=p.[SenderID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_SenderID) > 2 SET @p_SenderID = SUBSTRING(@p_SenderID,1, LEN(@p_SenderID)-1) ELSE SET @p_SenderID = NULL

	--ReceiverID
-------------------------------------------------------------------
		SELECT
			@p_ReceiverID = CONCAT(@p_ReceiverID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.ReceiverID as [ID]
						,Concat(p.ReceiverID,' ',ls.Description) as [Value]
					FROM [dbo].[TransferDocument] p
						left join dbo.Location ls on ls.[ID]=p.[ReceiverID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_ReceiverID) > 2 SET @p_ReceiverID = SUBSTRING(@p_ReceiverID,1, LEN(@p_ReceiverID)-1) ELSE SET @p_ReceiverID = NULL

	--Type
-------------------------------------------------------------------
		SELECT
			@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Type] as [Value]
					FROM [dbo].[TransferDocument] p
					WHERE p.[Type] IS NOT NULL
			) as Temp
		IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL

	--Status
-------------------------------------------------------------------
		SELECT
			@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Status] as [Value]
					FROM [dbo].[TransferDocument] p
					WHERE p.[Status] IS NOT NULL
			) as Temp
		IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

	--Quantity Min Max
-------------------------------------------------------------------
	SELECT @p_Quantity_Min=MIN(qs.QuantitySumm), @p_Quantity_Max=MAX(qs.QuantitySumm) FROM (
		SELECT (SELECT IsNull(COUNT(ID),0) from TransferDocumentDetails doc WHERE doc.DocumentID=p.[ID]) as QuantitySumm
	FROM [dbo].[TransferDocument] as p) as qs

	--Weight Min Max
-------------------------------------------------------------------
	SELECT @p_Weight_Min=MIN(ws.WeightSumm), @p_Weight_Max=MAX(ws.WeightSumm) FROM (
		SELECT (SELECT IsNull(SUM(Weight),0) from TransferDocumentDetails doc WHERE doc.DocumentID=p.[ID]) as WeightSumm
	FROM [dbo].[TransferDocument] as p) as ws

	--TagPriceWithVAT Min Max
-------------------------------------------------------------------
	SELECT @p_TagPriceWithVAT_Min=MIN(ss.SummaSumm), @p_TagPriceWithVAT_Max=MAX(ss.SummaSumm) FROM (
		SELECT (SELECT IsNull(SUM(TagPriceWithVAT),0) from TransferDocumentDetails doc WHERE doc.DocumentID=p.[ID]) as SummaSumm
	FROM [dbo].[TransferDocument] as p) as ss

	--TagPriceWithOutVAT Min Max
-------------------------------------------------------------------
	SELECT @p_TagPriceWithOutVAT_Min=MIN(sb.SummaSumm), @p_TagPriceWithOutVAT_Max=MAX(sb.SummaSumm) FROM (
		SELECT (SELECT IsNull(SUM(TagPriceWithOutVAT),0) from TransferDocumentDetails doc WHERE doc.DocumentID=p.[ID]) as SummaSumm
	FROM [dbo].[TransferDocument] as p) as sb

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Users as CreatedByUserID,
			@p_LastUsers as LastModifiedByUserID,
			@p_SenderID as SenderID,
			@p_ReceiverID as ReceiverID,
			@p_Type as [Type],
			@p_Status as [Status],
		 	@p_Quantity_Min as QuantityMin,
			@p_Quantity_Max as QuantityMax,
			@p_Weight_Min as WeightMin,
			@p_Weight_Max as WeightMax,
			@p_TagPriceWithVAT_Min as TagPriceWithVATMin,
			@p_TagPriceWithVAT_Max as TagPriceWithVATMax,
			@p_TagPriceWithOutVAT_Min as TagPriceWithOutVATMin,
			@p_TagPriceWithOutVAT_Max as TagPriceWithOutVATMax
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Перемещения, список перемещений, детали камни
-- =============================================
-- xp_GetTransferDocumentStonesDetails 'Item','', 0,0,'','','','','','','',''
-- xp_GetTransferDocumentStonesDetails 'Grid','',0,0,'','','','','','','',''

-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferDocumentStonesDetails]
	@p_ProductID int = 0,	
	@p_DocumentID int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		SELECT ds.[ID]
			  ,ds.[ProductID]
			  ,ds.[DocumentID]
			  ,ds.[Stone]
			  ,ds.[Shape]
			  ,ds.[Size]
			  ,ds.[Color]
			  ,ds.[Clarity]
			  ,ds.[Quantity]
			  ,ds.[Weight]
			  ,ds.[Setting]
			  ,ds.[CreatedDate]
			  ,ds.[LastModifiedDate]
			  ,ds.[CreatedByUserID]
			  ,ds.[LastModifiedByUserID]
		  FROM [dbo].[TransferDocumentStonesDetails] ds
		where (@p_ProductID =0 or ds.[ProductID]=@p_ProductID)
		and (@p_DocumentID = 0 or ds.[DocumentID]=@p_DocumentID)
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Перемещения, список перемещений, подсчет сумм
-- =============================================
-- xp_GetTransferDocumentSummary '', '01.01.1753 0:00:00', '11.02.2022 11:53:41', '01.01.1753 0:00:00', '11.02.2022 11:53:41', 'All', 'All', 'All', 'All', 'All', 'All', 0, 1387800, 0, 1387800, 0, 1387800, 0, 1387800
-- xp_GetTransferDocumentSummary '12', '01.01.1753 0:00:00', '11.02.2022 11:53:41', '01.01.1753 0:00:00', '11.02.2022 11:53:41', 'All', 'All', 'All', 'All', 'All', 'All', 0, 1387800, 0, 1387800, 0, 1387800, 0, 1387800
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferDocumentSummary]
	@p_search nvarchar(40)='',

	@p_FromDateRefDate datetime,
	@p_ToDateRefDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_SenderID nvarchar(MAX)='',	
	@p_ReceiverID nvarchar(MAX)='',	
	@p_Type nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,

	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_TagPriceWithOutVAT_Min money = 0,
	@p_TagPriceWithOutVAT_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)
		
	if (@p_Type = '' or @p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = ''or @p_ReceiverID= '')
		return

	set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
	set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
	set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
	set @p_ReceiverID = REPLACE(@p_ReceiverID, '|', ',')
	set @p_Type = REPLACE(@p_Type, '|', ',')
	set @p_Status = REPLACE(@p_Status, '|', ',')
		
	set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
	set @p_search_string='%' + @p_search + '%'
		
	declare @p_search_type nvarchar(MAX) = ''
	declare @p_search_status nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''		
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
	declare @p_search_senderID nvarchar(MAX) = ''
	declare @p_search_receiverID nvarchar(MAX) = ''

	declare @p_search_timeReffDate nvarchar(MAX) = ''	
	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Quantity nvarchar(MAX) = ''	
	declare @p_filter_request_Weight nvarchar(MAX) = ''	
	declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''
	declare @p_filter_request_TagPriceWithOutVAT nvarchar(MAX) = ''

	set @p_filter_request_Quantity = ' 		
					(
						(
							( (SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
							( (SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_Weight = ' and 		
				(
					(
						( (SELECT SUM(IsNull([Weight],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
						( (SELECT SUM(IsNull([Weight],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
					) 					
				)'

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and (
					(
						( (SELECT SUM(IsNull([TagPriceWithVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						( (SELECT SUM(IsNull([TagPriceWithVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
					) 					
				)'					

		set @p_filter_request_TagPriceWithOutVAT = 		 		
				' and (
					(
						( (SELECT SUM(IsNull([TagPriceWithOutVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Min,126 ) + ') and
						( (SELECT SUM(IsNull([TagPriceWithOUtVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Max,126 ) + ')
					) 					
				)'					

	if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
		set @p_search_timeReffDate =  		
			' and (
				CONVERT(date, s.SyncDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + ''' 				
			)'	
	end
		
	if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
		set @p_search_timeLastModifiedDate =  		
			' and (
				CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''		
			)'	
	end

	set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_filter_request_TagPriceWithOutVAT + @p_search_timeReffDate + @p_search_timeLastModifiedDate

	declare @p_search_request nvarchar(MAX) = ''

	if (@p_search != '')
		set @p_search_request = ' and
		(
			(
				(
					cast(s.TransferDocumentNumber as nvarchar(40)) like ''' + @p_search_money + ''' or
					s.[Contract] like ''' + @p_search_string + '''
				)				
			)
		)'

	set @p_search_request = @p_filter_request + @p_search_request 	

	if (@p_Type != 'All')
		set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
	if (@p_Status != 'All')
		set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
	if (@p_CreatedByUserID != 'All') 
		set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
	if (@p_LastModifiedByUserID != 'All') 
		set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;
	if (@p_SenderID != 'All') 
		set @p_search_SenderID = ' and s.[SenderID] in (' + @p_SenderID + ') ' ;
	if (@p_ReceiverID != 'All') 
		set @p_search_ReceiverID = ' and s.[ReceiverID] in (' + @p_ReceiverID + ') ' ;
		
	set @p_search_request = @p_search_request + @p_search_type + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID + @p_search_ReceiverID

	declare @end_request nvarchar(max) = ''	
	set @end_request = 
	'SELECT 		
				COUNT(st.[ID]) as TransferDocumentCount,
				SUM(QuantitySumm) as TransferDocumentSummaryQuantity,
				SUM(WeightSumm) as TransferDocumentSummaryWeigth,
				SUM(SummaSumm) as TransferDocumentSummarySumma
				FROM (
						SELECT								
							s.[ID]
							,s.[SyncDate]
							,s.[SenderID]
							,s.[ReceiverID]
							,s.[Type]
							,s.[Contract]
							,s.[Status]
							,s.[TransferDocumentNumber]
							,s.[CreatedDate]
							,s.[LastModifiedDate]
							,s.[CreatedByUserID]
							,s.[LastModifiedByUserID]	  	  
							,u.ID as UserID
							,ul.ID as LUserID
							,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							,(SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							,(SELECT SUM(IsNull([Weight],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							,(SELECT SUM(IsNull([TagPriceWithVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
					FROM [dbo].[TransferDocument] s
							left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
							left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
							+ @p_search_request									
				+')  AS st'
											
	--Select @end_request
	EXECUTE (@end_request);	
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Перемещения, список перемещений, результирующая грида
-- =============================================
-- xp_GetTransferDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:00', '10.27.2020 13:35:45', '01.01.1753 0:00:00', '10.27.2020 13:35:45 13:35:45', 'All', 'All', 'All', 'All', 'All', 'All', 0, 100, 0.01, 851.55, 615, 92817364, 512.5, 77347803.32, 38, 16, 'ID', 1
-- xp_GetTransferDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:00', '10.27.2020 13:35:45', '01.01.1753 0:00:00', '10.27.2020 13:35:45', 'All', 'All', 'All', 'All', 'All', 'All', 0, 100, 0.01, 851.55, 615, 92817364, 512.5, 77347803.32, 0, 16, 'ID', 1
-- xp_GetTransferDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:00', '03.03.2022 13:35:45', '01.01.1753 0:00:00', '03.03.2022 13:35:45', 'All', 'All', 'All', 'All', 'All', 'All', 0, 10000000, 0, 10000000, 0, 10000000, 0, 10000000, 0, 14, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferDocumentTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,

	@p_FromDateRefDate datetime,
	@p_ToDateRefDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_SenderID nvarchar(MAX)='',	
	@p_ReceiverID nvarchar(MAX)='',	
	@p_Type nvarchar(MAX)='',
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_Weight_Min money = 0,
	@p_Weight_Max money = 0,

	@p_TagPriceWithVAT_Min money = 0,
	@p_TagPriceWithVAT_Max money = 0,

	@p_TagPriceWithOutVAT_Min money = 0,
	@p_TagPriceWithOutVAT_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateRefDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateRefDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT s.[ID]
							  ,s.[SyncDate]
							  ,s.[SenderID]
							  ,s.[ReceiverID]
							  ,s.[Type]
							  ,s.[Contract]
							  ,s.[Status]
							  ,s.[TransferDocumentNumber]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(s.SenderID,case when ls.Description is null then '' else ' - ' end,ls.Description) as SenderDescription
							  ,Concat(s.ReceiverID,case when lr.Description is null then '' else ' - ' end,lr.Description) as ReceiverDescription
							  ,Concat(u.LastName,' ', u.FirstName,' ', u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM([Weight]) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT SUM([TagPriceWithVAT]) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
						FROM [dbo].[TransferDocument] s
								left join dbo.Location ls on ls.[ID]=s.[SenderID]
								left join dbo.Location lr on lr.[ID]=s.[ReceiverID]
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]			
		where s.ID=@p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_Type = '' or @p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = ''or @p_ReceiverID= '')
				return

		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
		set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
		set @p_ReceiverID = REPLACE(@p_ReceiverID, '|', ',')
		set @p_Type = REPLACE(@p_Type, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;

		
		declare @p_search_type nvarchar(MAX) = ''
		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_createdByUserID nvarchar(MAX) = ''		
		declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
		declare @p_search_senderID nvarchar(MAX) = ''
		declare @p_search_receiverID nvarchar(MAX) = ''

		declare @p_search_timeReffDate nvarchar(MAX) = ''	
		declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''	
		declare @p_filter_request_Weight nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVAT nvarchar(MAX) = ''
		declare @p_filter_request_TagPriceWithOutVAT nvarchar(MAX) = ''
		declare @p_SortGlobal nvarchar(MAX) = ''
		set @p_filter_request_Quantity = ' 		
					(
						(
							( (SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
							( (SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_Weight = ' and 		
				(
					(
						( (SELECT SUM(IsNull([Weight],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Weight_Min,126 ) + ') and
						( (SELECT SUM(IsNull([Weight],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_Weight_Max,126 ) + ')
					) 					
				)'

		set @p_filter_request_TagPriceWithVAT = 		 		
				' and (
					(
						( (SELECT SUM(IsNull([TagPriceWithVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						( (SELECT SUM(IsNull([TagPriceWithVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
					) 					
				)'					

		set @p_filter_request_TagPriceWithOutVAT = 		 		
				' and (
					(
						( (SELECT SUM(IsNull([TagPriceWithOutVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Min,126 ) + ') and
						( (SELECT SUM(IsNull([TagPriceWithOUtVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithOutVAT_Max,126 ) + ')
					) 					
				)'					

		if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateRefDate, 102)
			set @p_search_timeReffDate =  		
				' and (
					CONVERT(date, s.SyncDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + ''' 				
				)'	
		end
		
		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''		
				)'	
		end

		set @p_filter_request = @p_filter_request_Quantity + @p_filter_request_Weight + @p_filter_request_TagPriceWithVAT + @p_filter_request_TagPriceWithOutVAT + @p_search_timeReffDate + @p_search_timeLastModifiedDate

		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						cast(s.TransferDocumentNumber as nvarchar(40)) like ''' + @p_search_money + ''' or					
						s.[Contract] like ''' + @p_search_string + '''
					)				
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request

		if (@p_Type != 'All')
			set @p_search_type = ' and s.[Type] in (' + @p_Type + ') ' ;
		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;
		if (@p_SenderID != 'All') 
			set @p_search_SenderID = ' and s.[SenderID] in (' + @p_SenderID + ') ' ;
		if (@p_ReceiverID != 'All') 
			set @p_search_ReceiverID = ' and s.[ReceiverID] in (' + @p_ReceiverID + ') ' ;
		
		set @p_search_request = @p_search_request + @p_search_type + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID + @p_search_ReceiverID
	
		if(@p_SortColumn='QuantitySumm')
			set  @p_SortColumn='(SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='WeightSumm')
			set @p_SortColumn='(SELECT SUM(IsNull([Weight],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='SummaSumm')
			set @p_SortColumn='(SELECT SUM(IsNull([TagPriceWithVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='SummaSummOutVAT')
			set @p_SortColumn='(SELECT SUM(IsNull([TagPriceWithOutVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='CreatedByUserID')
			set  @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else if(@p_SortColumn='LdisplayUserName')
			set  @p_SortColumn='(Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName)) '
		else begin
			set @p_SortGlobal='st.'+@p_SortColumn
			set @p_SortColumn='s.'+@p_SortColumn			
		end

		declare @end_request nvarchar(max) = ''	
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[SyncDate]
							  ,s.[SenderID]
							  ,s.[ReceiverID]
							  ,s.[Type]
							  ,s.[Contract]
							  ,s.[Status]
							  ,s.[TransferDocumentNumber]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,CASE WHEN ls.Description is null then CAST(s.SenderID AS NVARCHAR) else Concat(s.SenderID,'' - '',ls.Description) end as SenderDescription
							  ,CASE WHEN lr.Description is null then CAST(s.ReceiverID AS NVARCHAR)  else Concat(s.ReceiverID,'' - '',lr.Description) end as ReceiverDescription
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else u.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM(IsNull([Weight],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as WeightSumm
							  ,(SELECT SUM(IsNull([TagPriceWithVAT],0)) from [dbo].[TransferDocumentDetails] WHERE DocumentID=s.[ID]) as SummaSumm
						FROM [dbo].[TransferDocument] s
								left join dbo.Location ls on ls.[ID]=s.[SenderID]
								left join dbo.Location lr on lr.[ID]=s.[ReceiverID]
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
								+ @p_search_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'
					--+' order by '+ @p_SortGlobal + ' ' + @p_order 					
		--select @end_request
		EXECUTE (@end_request);	
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующий товар , список перемещений, сборка фильтров
-- =============================================
-- xp_GetTransferRelatedDocumentFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferRelatedDocumentFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_Users nvarchar(MAX)='',
		@p_SenderID nvarchar(MAX)='',
		@p_ReceiverID nvarchar(MAX)='',
		@p_Status nvarchar(MAX)='',
		@p_LastUsers nvarchar(MAX)='',
		@p_Quantity_Min money = 0,
		@p_Quantity_Max money = 0,
		@p_TagPriceWithVat_Min money = 0,
		@p_TagPriceWithVat_Max money = 0

	--Users
-------------------------------------------------------------------
		SELECT
			@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[CreatedByUserID] as [ID]
						,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
					FROM [dbo].[TransferRelatedProductDocument] p
						left join Users u on u.ID = p.[CreatedByUserID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

	--LastUsers
-------------------------------------------------------------------
		SELECT
			@p_LastUsers = CONCAT(@p_LastUsers,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[LastModifiedByUserID] as [ID]
						,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
					FROM [dbo].[TransferRelatedProductDocument] p
						inner join Users u on u.ID = p.[LastModifiedByUserID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_LastUsers) > 2 SET @p_LastUsers = SUBSTRING(@p_LastUsers,1, LEN(@p_LastUsers)-1) ELSE SET @p_LastUsers = NULL

	--SenderID
-------------------------------------------------------------------
		SELECT
			@p_SenderID = CONCAT(@p_SenderID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.SenderID as [ID]
						,Concat(p.SenderID,' ',ls.Description) as [Value]
					FROM [dbo].[TransferRelatedProductDocument] p
						left join dbo.Location ls on ls.[ID]=p.[SenderID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_SenderID) > 2 SET @p_SenderID = SUBSTRING(@p_SenderID,1, LEN(@p_SenderID)-1) ELSE SET @p_SenderID = NULL

	--ReceiverID
-------------------------------------------------------------------
		SELECT
			@p_ReceiverID = CONCAT(@p_ReceiverID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.ReceiverID as [ID]
						,Concat(p.ReceiverID,' ',ls.Description) as [Value]
					FROM [dbo].[TransferRelatedProductDocument] p
						left join dbo.Location ls on ls.[ID]=p.[ReceiverID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_ReceiverID) > 2 SET @p_ReceiverID = SUBSTRING(@p_ReceiverID,1, LEN(@p_ReceiverID)-1) ELSE SET @p_ReceiverID = NULL


	--Status
-------------------------------------------------------------------
		SELECT
			@p_Status = CONCAT(@p_Status,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[Status] as [Value]
					FROM [dbo].[TransferRelatedProductDocument] p
					WHERE p.[Status] IS NOT NULL
			) as Temp
		IF LEN(@p_Status) > 2 SET @p_Status = SUBSTRING(@p_Status,1, LEN(@p_Status)-1) ELSE SET @p_Status = NULL

	--Quantity Min Max
-------------------------------------------------------------------
	SELECT @p_Quantity_Min=MIN(qs.QuantitySumm), @p_Quantity_Max=MAX(qs.QuantitySumm) FROM (
		SELECT (SELECT IsNull(Count(IsNull([ID],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] doc WHERE doc.DocumentID=p.[ID]) as QuantitySumm
	FROM [dbo].[TransferRelatedProductDocument] as p) as qs

	--TagPriceWithVat Min Max
-------------------------------------------------------------------
	SELECT @p_TagPriceWithVat_Min=MIN(ss.SummaSumm), @p_TagPriceWithVat_Max=MAX(ss.SummaSumm) FROM (
		SELECT (SELECT IsNull(Sum(TagPriceWithVat),0) from [dbo].[TransferRelatedProductDocumentDetails] doc WHERE doc.DocumentID=p.[ID]) as SummaSumm
	FROM [dbo].[TransferRelatedProductDocument] as p) as ss

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_Users as CreatedByUserID,
			@p_LastUsers as LastModifiedByUserID,
			@p_SenderID as SenderID,
			@p_ReceiverID as ReceiverID,			
			@p_Status as [Status],
		 	@p_Quantity_Min as QuantityMin,
			@p_Quantity_Max as QuantityMax,
			@p_TagPriceWithVat_Min as TagPriceWithVatMin,
			@p_TagPriceWithVat_Max as TagPriceWithVatMax
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующий товар , список перемещений, подсчет сумм
-- =============================================
-- xp_GetTransferRelatedDocumentSummary '', '01.01.1753 0:00:10', '11.02.2022 11:53:41', '01.01.1753 0:00:10', '11.02.2022 11:53:41', 'All', 'All', 'All', 'All', 'All', 0, 200000000, 0, 100000000000
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferRelatedDocumentSummary]
	@p_search nvarchar(40)='',

	@p_FromDateSyncDate datetime,
	@p_ToDateSyncDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_SenderID nvarchar(MAX)='',	
	@p_ReceiverID nvarchar(MAX)='',	
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_TagPriceWithVat_Min money = 0,
	@p_TagPriceWithVat_Max money = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateSyncDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateSyncDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)
		
	if (@p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = ''or @p_ReceiverID= '')
		return

	set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
	set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
	set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
	set @p_ReceiverID = REPLACE(@p_ReceiverID, '|', ',')
	set @p_Status = REPLACE(@p_Status, '|', ',')
		
	set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
	set @p_search_string='%' + @p_search + '%'
		
	declare @p_search_status nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''		
	declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
	declare @p_search_senderID nvarchar(MAX) = ''
	declare @p_search_receiverID nvarchar(MAX) = ''

	declare @p_search_timeReffDate nvarchar(MAX) = ''	
	declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_Quantity nvarchar(MAX) = ''	
	declare @p_filter_request_TagPriceWithVat nvarchar(MAX) = ''

	set @p_filter_request_Quantity = ' 		
				(
					(
						( (SELECT IsNull(Count(IsNull([ID],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
						( (SELECT IsNull(Count(IsNull([ID],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
					) 					
				)'	

	set @p_filter_request_TagPriceWithVat = 		 		
			' and (
				(
					( (SELECT IsNull(Sum(IsNull([TagPriceWithVat],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
					( (SELECT IsNull(Sum(IsNull([TagPriceWithVat],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
				) 					
			)'					

	if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateSyncDate, 102)
			set @p_search_timeReffDate =  		
				' and (
					CONVERT(date, s.SyncDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''
				)'	
			end
		
		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
			begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''			
				)'	
			end

	set @p_filter_request =@p_filter_request_Quantity + @p_filter_request_TagPriceWithVat + @p_search_timeReffDate + @p_search_timeLastModifiedDate

	declare @p_search_request nvarchar(MAX) = ''
	if (@p_search != '')
		set @p_search_request = ' and 
		(
			(
				(
					cast(s.DocumentNumber as nvarchar(40)) like ''' + @p_search_money + ''' or
					s.[Contract] like ''' + @p_search_string + '''
				)				
			)
		)'

	set @p_search_request = @p_filter_request + @p_search_request

	if (@p_Status != 'All')
	set @p_search_status = ' and s.[Status] in (' + @p_Status + ') ' ;
	if (@p_CreatedByUserID != 'All') 
	set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;
	if (@p_LastModifiedByUserID != 'All') 
	set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') ' ;
	if (@p_SenderID != 'All') 
	set @p_search_SenderID = ' and s.[SenderID] in (' + @p_SenderID + ') ' ;
	if (@p_ReceiverID != 'All') 
	set @p_search_ReceiverID = ' and s.[ReceiverID] in (' + @p_ReceiverID + ') ' ;

	set @p_search_request = @p_search_request + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID + @p_search_ReceiverID
		
	declare @end_request nvarchar(max) = ''	

	set @end_request = 
	'SELECT 		
				COUNT(st.[ID]) as SummaryTransferDocumentCount,
				SUM(QuantitySumm) as SummaryQuantity,
				SUM(SummaTagPriceWithVat) as SummaryTagPriceWithVat,
				SUM(SummaUnitPrice) as SummaryUnitPrice
				FROM (
						SELECT								
							s.[ID]
							,s.[SyncDate]
							,s.[SenderID]
							,s.[ReceiverID]
							,s.[Contract]
							,s.[Status]
							,s.[DocumentNumber]
							,s.[CreatedDate]
							,s.[LastModifiedDate]
							,s.[CreatedByUserID]
							,s.[LastModifiedByUserID]	  	  
							,u.ID as UserID
							,ul.ID as LUserID
							,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							,(SELECT IsNull(SUM(Quantity),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							,(SELECT IsNull(SUM([TagPriceWithVat]),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as SummaTagPriceWithVat
							,(SELECT IsNull(SUM([UnitPrice]),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as SummaUnitPrice
					FROM [dbo].[TransferRelatedProductDocument] s
							left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
							left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
							+ @p_search_request									
				+')  AS st'
											
	print @end_request
	EXECUTE (@end_request);	
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующий товар , список перемещений, результирующая грида
-- =============================================
-- xp_GetTransferRelatedDocumentTable 'Grid', '', 0 , '01.01.1753 0:00:10', '03.03.2022 13:35:45', '01.01.1753 0:00:10', '03.03.2022 13:35:45', 'All', 'All', 'All', 'All', 'All', 0, 9999999999, 0, 99999999999, 0, 999, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferRelatedDocumentTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,

	@p_FromDateSyncDate datetime,
	@p_ToDateSyncDate datetime,
	@p_FromDateLastModifiedDate datetime,
	@p_ToDateLastModifiedDate datetime,	

	@p_CreatedByUserID nvarchar(MAX)='',
	@p_LastModifiedByUserID nvarchar(MAX)='',
	@p_SenderID nvarchar(MAX)='',	
	@p_ReceiverID nvarchar(MAX)='',	
	@p_Status nvarchar(MAX)='',	

	@p_Quantity_Min money = 0,
	@p_Quantity_Max money = 0,

	@p_TagPriceWithVat_Min money = 0,
	@p_TagPriceWithVat_Max money = 0,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFromRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateSyncDate, 120)
	declare @DateToRefDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateSyncDate, 102)
	declare @DateFromLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 120)
	declare @DateToLastModifiedDate_string nvarchar(40) = CONVERT(nvarchar, @p_ToDateLastModifiedDate, 102)

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT s.[ID]
			,s.[SyncDate]
			,s.[SenderID]
			,s.[ReceiverID]
			,s.[Contract]
			,s.[Status]
			,s.[DocumentNumber]
			,s.[CreatedDate]
			,s.[LastModifiedDate]
			,s.[CreatedByUserID]
			,s.[LastModifiedByUserID]	  	  
			,u.ID as UserID
			,ul.ID as LUserID
			,Concat(s.SenderID,case when ls.Description is null then '' else ' - ' end,ls.Description) as SenderDescription
			,Concat(s.ReceiverID,case when lr.Description is null then '' else ' - ' end,lr.Description) as ReceiverDescription
			,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
			,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
			,Concat(ul.LastName,' ',ul.FirstName,' ',ul.SecondName) as LDisplayNameUser
			,(SELECT CASE WHEN isnull(ul.LastName,'') = '' THEN '' ELSE case when isnull(ul.FirstName,'') = '' then ul.LastName else ul.LastName + ' ' + SUBSTRING(ul.FirstName, 1, 1) + '.' + SUBSTRING(ul.SecondName, 1, 1) + '.' END END) as ShortLDisplayNameUser
			,(SELECT Count(*) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
			,(SELECT SUM([TagPriceWithVat]) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as SummaTagPriceWithVat
			,(SELECT SUM([UnitPrice]) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as SummaUnitPrice
	FROM [dbo].[TransferRelatedProductDocument] s
			left join dbo.Location ls on ls.[ID]=s.[SenderID]
			left join dbo.Location lr on lr.[ID]=s.[ReceiverID]
			left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
			left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID]			
		where s.ID=@p_ID
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_Status = '' or @p_CreatedByUserID= '' or @p_LastModifiedByUserID= '' or @p_SenderID = ''or @p_ReceiverID= '')
			return
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;
		
		declare @p_search_status nvarchar(MAX) = ''
		declare @p_search_createdByUserID nvarchar(MAX) = ''		
		declare @p_search_lastModifiedByUserID nvarchar(MAX) = ''
		declare @p_search_senderID nvarchar(MAX) = ''
		declare @p_search_receiverID nvarchar(MAX) = ''

		declare @p_search_timeReffDate nvarchar(MAX) = ''	
		declare @p_search_timeLastModifiedDate nvarchar(MAX) = ''	

		declare @p_filter_request nvarchar(MAX) = ''			
		declare @p_filter_request_Quantity nvarchar(MAX) = ''	
		declare @p_filter_request_TagPriceWithVat nvarchar(MAX) = ''

		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')
		set @p_LastModifiedByUserID = REPLACE(@p_LastModifiedByUserID, '|', ',')
		set @p_SenderID = REPLACE(@p_SenderID, '|', ',')
		set @p_ReceiverID = REPLACE(@p_ReceiverID, '|', ',')
		set @p_Status = REPLACE(@p_Status, '|', ',')

		set @p_filter_request_Quantity = '   		
					(
						(
							( (SELECT IsNull(Count(IsNull([ID],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_Quantity_Min,126 ) + ') and
							( (SELECT IsNull(Count(IsNull([ID],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) <= ' + convert(nvarchar(40),@p_Quantity_Max,126 ) + ')
						) 					
					)'	

		set @p_filter_request_TagPriceWithVat = 		 		
				' and (
					(
						( (SELECT IsNull(Sum(IsNull([TagPriceWithVat],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  >= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Min,126 ) + ') and
						( (SELECT IsNull(Sum(IsNull([TagPriceWithVat],0)),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  <= ' + convert(nvarchar(40),@p_TagPriceWithVAT_Max,126 ) + ')
					) 					
				)'					

		if (@DateFromRefDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromRefDate_string = CONVERT(nvarchar, @p_FromDateSyncDate, 102)
			set @p_search_timeReffDate =  		
				' and (
					CONVERT(date, s.SyncDate) between ''' + @DateFromRefDate_string  + ''' and ''' + @DateToRefDate_string + '''
				)'
		end
		
		if (@DateFromLastModifiedDate_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFromLastModifiedDate_string = CONVERT(nvarchar, @p_FromDateLastModifiedDate, 102)
			set @p_search_timeLastModifiedDate =  		
				' and (
					CONVERT(date, s.LastModifiedDate) between ''' + @DateFromLastModifiedDate_string  + ''' and ''' + @DateToLastModifiedDate_string + '''			
				)'
		end

		set @p_filter_request =@p_filter_request_Quantity + @p_filter_request_TagPriceWithVat + @p_search_timeReffDate + @p_search_timeLastModifiedDate

		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and  
			(
				(
					(
						cast(s.DocumentNumber as nvarchar(40)) like ''' + @p_search_money + ''' or						
						s.[Contract] like ''' + @p_search_string + '''
					)				
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request

		if (@p_Status != 'All')
			set @p_search_status = ' and s.[Status] in (' + @p_Status + ') '
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') '
		if (@p_LastModifiedByUserID != 'All') 
			set @p_search_LastModifiedByUserID = ' and s.[LastModifiedByUserID] in (' + @p_LastModifiedByUserID + ') '
		if (@p_SenderID != 'All') 
			set @p_search_SenderID = ' and s.[SenderID] in (' + @p_SenderID + ') '
		if (@p_ReceiverID != 'All') 
			set @p_search_ReceiverID = ' and s.[ReceiverID] in (' + @p_ReceiverID + ') '

		set @p_search_request = @p_search_request + @p_search_status + @p_search_createdByUserID + @p_search_LastModifiedByUserID + @p_search_SenderID + @p_search_ReceiverID
	
		if(@p_SortColumn='QuantitySumm')
			set  @p_SortColumn='(SELECT IsNull(Count(*),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) '
		else if(@p_SortColumn='SummaTagPriceWithVat')
			set @p_SortColumn='(SELECT IsNull(SUM([TagPriceWithVat]),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='SummaUnitPrice')
			set @p_SortColumn='(SELECT IsNull(SUM([UnitPrice]),0) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID])  '
		else if(@p_SortColumn='CreatedByUserID')
			set  @p_SortColumn='(Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName)) '
		else if(@p_SortColumn='LdisplayUserName')
			set  @p_SortColumn='(Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName)) '
		else
			set @p_SortColumn='s.'+@p_SortColumn

		declare @end_request nvarchar(max) = ''	
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[SyncDate]
							  ,s.[SenderID]
							  ,s.[ReceiverID]
							  ,s.[Contract]
							  ,s.[Status]
							  ,s.[DocumentNumber]
							  ,s.[CreatedDate]
							  ,s.[LastModifiedDate]
							  ,s.[CreatedByUserID]
							  ,s.[LastModifiedByUserID]	  	  
							  ,u.ID as UserID
							  ,ul.ID as LUserID
							  ,Concat(s.SenderID,case when ls.Description is null then '''' else '' - '' end,ls.Description) as SenderDescription
							  ,Concat(s.ReceiverID,case when lr.Description is null then '''' else '' - '' end,lr.Description) as ReceiverDescription
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayNameUser
							  ,Concat(ul.LastName,'' '',ul.FirstName,'' '',ul.SecondName) as LDisplayNameUser
							  ,(SELECT CASE WHEN isnull(ul.LastName,'''') = '''' THEN '''' ELSE case when isnull(ul.FirstName,'''') = '''' then ul.LastName else ul.LastName + '' '' + SUBSTRING(ul.FirstName, 1, 1) + ''.'' + SUBSTRING(ul.SecondName, 1, 1) + ''.'' END END) as ShortLDisplayNameUser
							  ,(SELECT Count(*) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as QuantitySumm
							  ,(SELECT SUM([TagPriceWithVat]) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as SummaTagPriceWithVat
							  ,(SELECT SUM([UnitPrice]) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as SummaUnitPrice
							  ,(SELECT SUM([UnitPrice]*[Quantity]) from [dbo].[TransferRelatedProductDocumentDetails] WHERE DocumentID=s.[ID]) as SummaUnitPriceQuantity
						FROM [dbo].[TransferRelatedProductDocument] s
								left join dbo.Location ls on ls.[ID]=s.[SenderID]
								left join dbo.Location lr on lr.[ID]=s.[ReceiverID]
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Users ul on ul.[ID]=s.[LastModifiedByUserID] where '
								+ @p_search_request									
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)	+' order by st.RowNumber asc'				
		--print @end_request
		EXECUTE (@end_request);	
	end
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Сопутствующий товар , список перемещений, детали
-- =============================================
-- xp_GetTransferRelatedProductDocumentDetails 'Grid',337
-- xp_GetTransferRelatedDocumentDetails 'Name',null,178
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetTransferRelatedProductDocumentDetails]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid, Filter	
	@p_DocumentID int,
	@p_ID int=0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

			SELECT dd.[ID]
				  ,dd.[DocumentID]
				  ,dd.[LineDocument]
				  ,dd.[RelatedProductID]
				  ,dd.[PartNumber]
				  ,dd.[Model]
				  ,mo.[Description] as ModelDescription
				  ,dd.[Quantity]
			      ,(SELECT [Quantity] FROM [dbo].[RelatedProduct] as rp where rp.[Model]=dd.[Model] and rp.[PartNumber]=dd.[PartNumber] and rp.[supplier] = dd.[supplier]) as QuantityOnStorage
				  ,dd.[TagPriceWithVat]
				  ,dd.[UnitPrice]
				  ,dd.[CreatedDate]
				  ,dd.[LastModifiedDate]
				  ,dd.[CreatedByUserID]
				  ,dd.[LastModifiedByUserID]
				  ,dd.[Supplier]
			  FROM [dbo].[TransferRelatedProductDocumentDetails] dd
				left join [dbo].[RelatedProductGuide] mo on mo.[Model]=dd.[Model] and mo.[Supplier]=dd.[supplier]
			  where dd.DocumentID = @p_DocumentID
			  order by dd.[LineDocument]
	end
	else if @p_TypeScreen in ('Name') begin ---------------------------------------------------------------------
			SELECT dd.[ID]
				,dd.[PartNumber]
				  ,dd.[Model]
				  ,dd.[Supplier]
				  ,mo.[Description] as ModelDescription
				  ,dd.[Quantity]
				  ,(SELECT [Quantity] FROM [dbo].[RelatedProduct] as rp where rp.[Model]=dd.[Model] and rp.[PartNumber]=dd.[PartNumber]) as QuantityOnStorage
				  ,dd.[TagPriceWithVat]
				  ,dd.[UnitPrice]
			  FROM [dbo].[RelatedProduct] dd
				left join dbo.[RelatedProductGuide] mo on mo.[Model]=dd.[Model]
			  where dd.[ID] = @p_ID
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- xp_GetUpdAttributes
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdAttributes]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)  
		declare @p_LastModifiedDate datetime =  isnull((select top 1 DtRefresh from dbo.[RefreshInfo] a where Obj='Attributes'),0)

		declare @n int =0
		declare @IsGood int = 0
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdAttributes ', CAST(getdate() as varchar)) 

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'Attributes', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Attributes' and [DatVal] is null)		
		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		--print 1
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		--print 2
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH
				
		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
		--print 3
		CREATE TABLE #Attributes(
			[SyncID] [smallint] NULL,
			[Type] [tinyint] NULL,
			[Name] [nvarchar](255) NULL,
			[Value] [nvarchar](max) NULL,
			[AttributeGroup] [nvarchar](50) NULL,
			[AttributeSort] [int] NULL,
			[Visibility] [bit] NULL,
			[IsEnable] bit null,
			[Description] [nvarchar](255) null)

		insert into #Attributes
		SELECT a.[ID]
				,a.[Type]
				,a.[Name]
				,a.[Value]
				,a.[AttributeGroup]
				,a.[AttributeSort]
				,a.[Visibility]
				,a.[IsEnable]
				,a.[Description]
			FROM [DataAdapter].[DataAdapter].[dbo].[Attributes] a
			where ((a.CompanyID=@p_CompanyID 
				and (a.ShopID=@p_ShopID)) or
				(a.CompanyID=@p_CompanyID 
				and (a.ShopID is null)))
				and @p_LastModifiedDate < a.PublishedDate
		
		set @n=@@ROWCOUNT
		if @n = 0 begin
			set @IsGood = 1;
		end
		if @n>0 begin -- прилетели данные с адаптера
			begin tran
				-- Синхронизация аттрибутов для текущего магазина
				-- вставляем все строки которые не найдены в локальной таблице
				insert into dbo.Attributes(
					[SyncID]
					,[Type]
					,[Name]
					,[Description]
					,[Value]
					,[AttributeGroup]
					,[AttributeSort]
					,[Visibility]
					,[IsEnable])
				select 
					s.[SyncID]
					,s.[Type]
					,s.[Name]
					,s.[Description]
					,s.[Value]
					,s.[AttributeGroup]
					,s.[AttributeSort]
					,s.[Visibility]
					,s.[IsEnable]
				from #Attributes s
					left join dbo.Attributes l on s.Name=l.Name
				where l.id is null
				-- обновляем все остальные строки
				update dbo.Attributes
				set 
					[Type] = s.[Type]		 
					,[Name] = s.[Name]	
					,[Description] = s.[Description]	 
					,[Value] = s.[Value]	 
					,[AttributeGroup] = s.[AttributeGroup]
					,[AttributeSort] = s.[AttributeSort]
					,[Visibility] = s.[Visibility]
					,[IsEnable] = s.[IsEnable]
				from dbo.Attributes l 
					inner join #Attributes s on l.Name=s.Name

				-- Синхронизация аттрибутов магазинов-партнеров и компаний
-----------------------------------------------------------------------------------------------------------------------------
					
				CREATE TABLE #AnotherCompanyAttributes(
						[ID]  [int] NULL,
						[CompanyID] [int] NULL,
						[Type] [tinyint] NULL,
						[Name] [nvarchar](255) NULL,
						[Value] [nvarchar](max) NULL,
						[AttributeGroup] [nvarchar](50) NULL,
						[AttributeSort] [int] NULL,
						[Visibility] [bit] NULL,
						[IsEnable] bit null,
						ShopID smallint null)

					-- получаем аттрибуты компаний и магазинов
					insert into #AnotherCompanyAttributes
					exec [DataAdapter].[DataAdapter].[dbo].[xp_GetAnotherCompanyAttributes]  @p_ShopID = @p_ShopID

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.AnotherCompanyAttributes(
							[CompanyID]
						,[Type]
						,[Name]
						,[Value]
						,[AttributeGroup]
						,[AttributeSort]
						,[Visibility]
						,[IsEnable]
						,[ShopID])
					select
							s.[CompanyID]
						,s.[Type]
						,s.[Name]
						,s.[Value]
						,s.[AttributeGroup]
						,s.[AttributeSort]
						,s.[Visibility]
						,s.[IsEnable]
						,s.[ShopID]
					from #AnotherCompanyAttributes s
						left join dbo.AnotherCompanyAttributes l
							on s.[CompanyID]=l.[CompanyID] AND s.[ShopID]=l.[ShopID] AND s.[Name]=l.[Name]
					where
						NOT EXISTS (
										SELECT
											[ID]
										FROM dbo.AnotherCompanyAttributes aca
										WHERE
											(aca.[CompanyID]=s.[CompanyID]
											AND aca.[ShopID]=s.[ShopID]
											AND aca.[Name]=s.[Name])
											or
											(aca.[CompanyID]=s.[CompanyID]
											AND aca.[ShopID] IS NULL
											AND aca.[Name]=s.[Name])
									)

				---- обновляем все остальные строки
				update dbo.AnotherCompanyAttributes
				set 
						[Type] = asd.[Type]
					,[Value] = asd.[Value]
					,[AttributeGroup] = asd.[AttributeGroup]
					,[AttributeSort] = asd.[AttributeSort]
					,[Visibility] = asd.[Visibility]
					,[IsEnable] = asd.[IsEnable]
					,[LastModifiedDate]=getdate()
				from (
					select 
						s.[ID]
						,s.[CompanyID] as [CompanyID_Inner]
						,s.[ShopID] as [ShopID_Inner]
						,s.[Name] as [Name_Inner]
						,s.[Type]
						,s.[Value]
						,s.[AttributeGroup]
						,s.[AttributeSort]
						,s.[Visibility]
						,s.[IsEnable]
						from #AnotherCompanyAttributes s
							left join dbo.AnotherCompanyAttributes l
								on s.[CompanyID]=l.[CompanyID] AND s.[ShopID]=l.[ShopID] AND s.[Name]=l.[Name]
					) as asd
					where
						([CompanyID]=asd.[CompanyID_Inner] AND [Name]=asd.[Name_Inner] AND [ShopID]=asd.[ShopID_Inner])
						OR
						([CompanyID]=asd.[CompanyID_Inner] AND [Name]=asd.[Name_Inner] AND [ShopID] IS NULL)

				IF @@TRANCOUNT > 0 begin
					COMMIT TRANSACTION; 
					set @IsGood=1
					update dbo.UpdID
					set res='ok.',
						DtRes=getdate()
					where ID=@UpdID
					exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
							@p_PosID=@UpdID, 
							@p_CompanyID=@p_CompanyID, 
							@p_ShopID=@p_ShopID, 
							@p_Description='ok.', 
							@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
				end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end	
		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
			    [UserID]= @p_AddUserID,
				Source=0
			where [Obj]='Attributes'  

			print @@rowcount
		end
		--select * from #Attributes

END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_GetUpdCurrency 1474
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdCurrency]
	@p_AddUserID int = null
AS
BEGIN
	SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере
		 
		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)  

		declare @n int =0
		declare @IsGood int = 0

		declare @dt_now datetime=getdate()
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdCurrency', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID

			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'Currency', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Currency' and [DatVal] is null)

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		--print '1'
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			--print '2'
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		--print '2.2'
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
		--print '3'
			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #Currency(				
						[Code] [int] NULL,
						[ShortDescription] [nvarchar](50) NULL,
						[LongDescription] [nvarchar](50) NULL				
				)
				--print '3.3'
			insert into #Currency
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetCurrency]  
			--select * from #RelatedProductGuide
			--select * from RelatedProductGuide
			--xp_GetRelatedProductGuide
			--print '3.4'

			--SELECT *   FROM  #RelatedProductGuide
			
			set @n=@@ROWCOUNT

			if @n = 0 begin
				set @IsGood = 1;
			end

			if @n>0 begin -- прилетели данные с адаптера
				begin tran

				--print '4'
					-- обновляем все строки для которых найдены [SyncID] в темповой таблице
					update dbo.Currency  --truncate table dbo.Location
					set 
						[ShortDescription] = s.[ShortDescription],
						[LongDescription] = s.[LongDescription], 
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID] = @p_AddUserID
					from dbo.Currency l 
						inner join #Currency s on l.[Code]=s.[Code]
						--print '5'
					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.Currency(
						[Code],
						[ShortDescription],
						[LongDescription],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
						)
					select 
						s.[Code]
						,s.[ShortDescription]
						,s.[LongDescription]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID
					from #Currency s
						left join dbo.Currency l on l.[Code]=s.[Code]
					where l.[Code] is null
					--print '6'

					IF @@TRANCOUNT > 0 begin
												
						COMMIT TRANSACTION; 

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 
		print @IsGood
		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
			    [UserID]= @p_AddUserID,
				[Source]=0				
			where [Obj]='Currency'  

			print @@rowcount
		end
		--select * from #Location
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_GetUpdDocument
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdDocument]
@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
		declare @UpdID int =0
		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере
		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)
		declare @p_LastModifiedDate datetime =  isnull((select top 1 DtRefresh from dbo.[RefreshInfo] a where Obj='Document'),0)
		declare @n int =0
		declare @IsGood int = 0
		declare @res int = 0
		Declare @dt_now datetime=getdate()
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdDocument ', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end
		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0
		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'Document', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Document' and [DatVal] is null)
		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH
		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			
			CREATE TABLE #Document(		
				[ID] int, 		
				[ReffID] [bigint] NULL,
				[ReffDate] [datetime] NULL,
				[SenderID] [int] NULL,
				[Contract] [nvarchar](255) NULL
				)

			insert into #Document
				select
					[ID],
					[TransferDocumentNumber],
					[CreatedDate],
					[SenderID], 
					[Contract]
			from [DataAdapter].[DataAdapter].dbo.TransferDocument
			where CompanyID = @p_CompanyID 
				and PublishedDate>=@p_LastModifiedDate
				and ReceiverID = @p_ShopID
				and Status = 2	
			set @n=@@ROWCOUNT

			if @n = 0 begin
				set @IsGood = 1;
			end

			if @n>0 begin -- прилетели данные с адаптера
				begin tran
					-- обновляем все строки для которых найдены [ID] в темповой таблице
					update dbo.Document
					set 
						[ReffDate] = s.[ReffDate],
						[SenderID] = s.[SenderID],
						[Contract] = s.[Contract],						
						[Type] = 0,
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID] = @p_AddUserID		
					from dbo.Document l 
						inner join #Document s on l.[ReffID]=s.[ReffID]	

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.Document
						([ReffID],
						[ReffDate],
						[SenderID],
						[ReceiverID],
						[Contract],
						[Status],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID])
					select 
						s.[ReffID],
						s.[ReffDate],
						s.[SenderID],
						@p_ShopID,
						s.[Contract],
						0,
						@dt_now,
						@dt_now,
						@p_AddUserID,
						@p_AddUserID
					from #Document s
						left join dbo.Document l on l.[ReffID]=s.[ReffID]
					where l.[ID] is null	
								
				CREATE TABLE #DocumentDetails(				
				   [ID] int,
				   [DocumentID] int NULL,
				   [LineDocument] int NULL,
				   [Model] nvarchar(30) NULL,
				   [Type] nvarchar(50) NULL,
				   [KtID] int NULL,
				   [Size] nvarchar(50) NULL,
				   [Color] nvarchar(50) NULL,
				   [Gender] nvarchar(30) NULL,
				   [SupplierID] int NULL,
				   [SupplierName] nvarchar(255) NULL,
				   [Country] nvarchar(255) NULL,
				   [ThemedCollection] nvarchar(255) NULL,
				   [Weight] float NULL,
				   [CostWithoutVAT] float,
				   [CostCurrency] nvarchar(30) NULL,
				   [TagPriceWithVAT] float NULL,
				   [TagPriceCurrency] nvarchar(30) NULL,
				   [TagPriceExtra] float NULL,
				   [TagPriceWithOutVAT] float  null,
				   [DeclarationNumber] nVARCHAR(40)  null,
				   [TnvedCode] nVARCHAR(40)  null				   
					)
					
					insert into #DocumentDetails
					select tdd.ProductID,DocumentID,LineDocument,Model, tdd.[Type],KtID,Size,Color,Gender,SupplierID,SupplierName,Country,ThemedCollection,[Weight],
					CostWithoutVAT,CostCurrency,TagPriceWithOutVAT,TagPriceCurrency,TagPriceExtra,TagPriceWithOutVAT,[DeclarationNumber],[TnvedCode]
						from [DataAdapter].[DataAdapter].[dbo].TransferDocumentDetails tdd					
					inner join #Document d on d.id=tdd.DocumentID	
					
					-- обновляем все строки для которых найдены в темповой таблице
					update dbo.DocumentDetails
					set 
					   [LineDocument] = s.[LineDocument],
					   [Model] = s.[Model],
					   [Type] = s.[Type],
					   [KtID] = s.[KtID],
					   [Size] = s.[Size],
					   [Color] = s.[Color],
					   [Gender] = s.[Gender],
					   [SupplierID] = s.[SupplierID],
					   [SupplierName] = s.[SupplierName],
					   [Country] = s.[Country],
					   [ThemedCollection] = s.[ThemedCollection],
					   [Weight] = s.[Weight],
					   [CostWithoutVAT] = s.[CostWithoutVAT],
					   [CostCurrency] = s.[CostCurrency],
					   [TagPriceWithVAT] = s.[TagPriceWithVAT],
					   [TagPriceCurrency] = s.[TagPriceCurrency],
					   [TagPriceExtra] = s.[TagPriceExtra],
					   [TagPriceWithOutVAT] =s.TagPriceWithOutVAT,
					   [DeclarationNumber] =s.DeclarationNumber,
					   [TnvedCode] = s.TnvedCode,
					   [LastModifiedDate] = @dt_now,
					   [LastModifiedByUserID] = @p_AddUserID
					from #DocumentDetails s 
						inner join #Document d on s.[DocumentID]=d.ID
						inner join Document rd on rd.ReffID = d.ReffID
						inner join dbo.DocumentDetails l on l.[DocumentID]=rd.[ID] and l.[ID]=s.[ID]					

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.DocumentDetails(
					[ID],
					[DocumentID],
					[LineDocument],
					[Model],
					[Type],
					[KtID],
					[Size],
					[Color],
					[Gender],
					[SupplierID],
					[SupplierName],
					[Country],
					[ThemedCollection],
					[Weight],
					[CostWithoutVAT],
					[CostCurrency],
					[TagPriceWithVAT],
					[TagPriceCurrency],
					[TagPriceExtra],
					[TagPriceWithOutVAT],
					[DeclarationNumber],
					[TnvedCode],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])					
					select 
						s.[ID],
						rd.[ID],
						s.[LineDocument],
						s.[Model],
						s.[Type],
						s.[KtID],
						s.[Size],
						s.[Color],
						s.[Gender],
						s.[SupplierID],
						s.[SupplierName],
						s.[Country],
						s.[ThemedCollection],
						s.[Weight],
						s.[CostWithoutVAT],
						s.[CostCurrency],
						s.[TagPriceWithVAT],
						s.[TagPriceCurrency],
						s.[TagPriceExtra],
						s.[TagPriceWithOutVAT],
						s.[DeclarationNumber],
						s.[TnvedCode],
						@dt_now,
						@dt_now,
						@p_AddUserID,
						@p_AddUserID
					from #DocumentDetails s
					inner join #Document d on s.[DocumentID]=d.ID
					inner join Document rd on rd.ReffID = d.ReffID
					left join dbo.DocumentDetails l on l.[DocumentID]=rd.[ID] and l.[ID]=s.[ID]
						where l.[ID] is null				
					
					--exec xp_GetUpdDocumentStonesDetails @p_AddUserID
					CREATE TABLE #DocumentStonesDetails(				
						[ID] int,
						[DocumentID] int NULL,
						ProductID int NULL,
						[Stone] nvarchar(50) NULL,
						[Shape] nvarchar(50) NULL,
						[Size] nvarchar(50) NULL,
						[Color] nvarchar(50) NULL,
						[Clarity] nvarchar(30) NULL,
						[Quantity] int NULL,
						[Weight] float NULL,
						[Setting] nvarchar(50) NULL
					)

					insert into #DocumentStonesDetails
					select tds.ID,DocumentID,tds.ProductID,tds.Stone,tds.Shape,tds.Size,tds.Color,tds.Clarity,tds.Quantity,tds.Weight,tds.Setting
					from [DataAdapter].[DataAdapter].[dbo].TransferDocumentStonesDetails tds
					inner join #Document d on d.id= tds.DocumentID

					update dbo.DocumentStonesDetails
					set 
						  [Stone] = s.[Stone],
						  [Shape] = s.[Shape],
						  [Size] = s.[Size],
						  [Color] = s.[Color],
						  [Clarity] = s.[Clarity],
						  [Quantity] = s.[Quantity],
						  [Weight] = s.[Weight],
						  [Setting] = s.[Setting],
						  [LastModifiedDate] = @dt_now,
						  [LastModifiedByUserID] = @p_AddUserID
					from #DocumentStonesDetails s 
						inner join #Document d on s.[DocumentID]=d.ID
						inner join Document rd on rd.ReffID = d.ReffID
						inner join dbo.DocumentStonesDetails l on l.[DocumentID]=rd.[ID] and l.[ProductID]=s.ProductID and l.[ID]=s.[ID]			

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.DocumentStonesDetails([ID],[ProductID],[DocumentID],[Stone],[Shape],[Size],[Color],[Clarity],[Quantity],[Weight],[Setting],
					[CreatedDate],[LastModifiedDate],[CreatedByUserID],[LastModifiedByUserID])
					select s.[ID],s.ProductID,rd.[ID],s.[Stone],s.[Shape],s.[Size],s.[Color],s.[Clarity],s.[Quantity],s.[Weight],s.[Setting]
					,@dt_now,@dt_now,@p_AddUserID,@p_AddUserID
					from #DocumentStonesDetails s
						inner join #Document d on s.[DocumentID]=d.ID
						inner join Document rd on rd.ReffID = d.ReffID	
						left join dbo.DocumentStonesDetails l on l.[DocumentID]=rd.[ID] and l.[ProductID]=s.ProductID and l.[ID]=s.[ID]
					where l.[ID] is null

					-- обновляем все строки для которых найдены [SyncID] в темповой таблице
					IF @@TRANCOUNT > 0 begin	
						COMMIT TRANSACTION; 					
					set @IsGood=1
					update dbo.UpdID
					set res='ok.',
						DtRes=getdate()
					where ID=@UpdID
					exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
							@p_PosID=@UpdID, 
							@p_CompanyID=@p_CompanyID, 
							@p_ShopID=@p_ShopID, 
							@p_Description='ok.', 
							@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 

		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
				[UserID]= @p_AddUserID,
				Source=0				
			where [Obj]='Document' 
		end
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_GetUpdDocumentDetails
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdDocumentDetails]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)

		declare @dt_now datetime=getdate()

		declare @n int =0
		declare @IsGood int = 0
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetDocumentDetails ', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ

		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника

		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID

			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #DocumentDetails(				
				   [ID] int,
				   [DocumentID] int NULL,
				   [LineDocument] int NULL,
				   [Model] nvarchar(30) NULL,
				   [ModelID] int NULL,
				   [Type] nvarchar(50) NULL,
				   [KtID] int NULL,
				   [Size] nvarchar(50) NULL,
				   [Color] nvarchar(50) NULL,
				   [Gender] nvarchar(30) NULL,
				   [SupplierID] int NULL,
				   [SupplierName] nvarchar(255) NULL,
				   [Country] nvarchar(255) NULL,
				   [ThemedCollection] nvarchar(255) NULL,
				   [Weight] money NULL,
				   [CostWithoutVAT] money,
				   [CostCurrency] nvarchar(30) NULL,
				   [TagPriceWithVAT] money NULL,
				   [TagPriceCurrency] nvarchar(30) NULL,
				   [TagPriceExtra] money NULL,
				   [TagPriceWithOutVAT] money  null,
				   [DeclarationNumber] nVARCHAR(40)  null,
				   [TnvedCode] nVARCHAR(40)  null				   
				)

			insert into #DocumentDetails
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetDocumentDetails] @p_CompanyID, @p_ShopID

			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.DocumentDetails(
					   [ID],
					   [DocumentID],
					   [LineDocument],
					   [Model],
					   [ModelID],
					   [Type],
					   [KtID],
					   [Size],
					   [Color],
					   [Gender],
					   [SupplierID],
					   [SupplierName],
					   [Country],
					   [ThemedCollection],
					   [Weight],
					   [CostWithoutVAT],
					   [CostCurrency],
					   [TagPriceWithVAT],
					   [TagPriceCurrency],
					   [TagPriceExtra],
					   [IsChecked],
					   [TagPriceWithOutVAT],
					   [DeclarationNumber],
					   [TnvedCode],
					   [CreatedDate],
					   [LastModifiedDate],
					   [CreatedByUserID],
					   [LastModifiedByUserID]
					)
					select
					   s.[ID],
					   s.[DocumentID],
					   s.[LineDocument],
					   s.[Model],
					   s.[ModelID],
					   s.[Type],
					   s.[KtID],
					   s.[Size],
					   s.[Color],
					   s.[Gender],
					   s.[SupplierID],
					   s.[SupplierName],
					   s.[Country],
					   s.[ThemedCollection],
					   s.[Weight],
					   s.[CostWithoutVAT],
					   s.[CostCurrency],
					   s.[TagPriceWithVAT],
					   s.[TagPriceCurrency],
					   s.[TagPriceExtra],
					   0,
					   s.[TagPriceWithOutVAT],
					   s.[DeclarationNumber],
					   s.[TnvedCode]
					   ,@dt_now
			   		   ,@dt_now		
					   ,@p_AddUserID
					   ,@p_AddUserID
					from #DocumentDetails s
						left join dbo.DocumentDetails l on l.[DocumentID]=s.[DocumentID]
						and l.[ID]=s.[ID]
					where l.[ID] is null
					
					
					-- обновляем все строки для которых найдены в темповой таблице
					update dbo.DocumentDetails
					set 
					   [LineDocument] = s.[LineDocument],
					   [Model] = s.[Model],
					   [ModelID] = s.[ModelID],
					   [Type] = s.[Type],
					   [KtID] = s.[KtID],
					   [Size] = s.[Size],
					   [Color] = s.[Color],
					   [Gender] = s.[Gender],
					   [SupplierID] = s.[SupplierID],
					   [SupplierName] = s.[SupplierName],
					   [Country] = s.[Country],
					   [ThemedCollection] = s.[ThemedCollection],
					   [Weight] = s.[Weight],
					   [CostWithoutVAT] = s.[CostWithoutVAT],
					   [CostCurrency] = s.[CostCurrency],
					   [TagPriceWithVAT] = s.[TagPriceWithVAT],
					   [TagPriceCurrency] = s.[TagPriceCurrency],
					   [TagPriceExtra] = s.[TagPriceExtra],
					   [TagPriceWithOutVAT] =s.TagPriceWithOutVAT,
					   [DeclarationNumber] =s.DeclarationNumber,
					   [TnvedCode] = s.TnvedCode,
					   [LastModifiedDate] = @dt_now,
					   [LastModifiedByUserID] = @p_AddUserID
					from dbo.DocumentDetails l 
						inner join #DocumentDetails s on l.[DocumentID]=s.[DocumentID]
						and l.[ID]=s.[ID]					

					IF @@TRANCOUNT > 0 begin
												
						COMMIT TRANSACTION; 

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 

		--select * from #Document

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_GetUpdDocumentStonesDetails
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdDocumentStonesDetails]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)

		declare @dt_now datetime=getdate()

		declare @n int =0
		declare @IsGood int = 0
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetDocumentStonesDetails ', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID

			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ

		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника

		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID

			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #DocumentStonesDetails(				
						[ID] int,
						[DocumentID] int NULL,
						[DocumentDetailsID] int NULL,
						[Stone] nvarchar(50) NULL,
						[Shape] nvarchar(50) NULL,
						[Size] nvarchar(50) NULL,
						[Color] nvarchar(50) NULL,
						[Clarity] nvarchar(30) NULL,
						[Quantity] int NULL,
						[Weight] money NULL,
						[Setting] nvarchar(50) NULL
				)

			insert into #DocumentStonesDetails
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetDocumentStonesDetails] @p_CompanyID, @p_ShopID
			--exec [DataAdapter].[DataAdapter].[dbo].[xp_GetDocumentStonesDetails] 1, 102

			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.DocumentStonesDetails(
						[ID],
						[ProductID],
						[DocumentID],
						[Stone],
						[Shape],
						[Size],
						[Color],
						[Clarity],
						[Quantity],
						[Weight],
						[Setting],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					select
						s.[ID],
						s.[DocumentDetailsID],
						s.[DocumentID],
						s.[Stone],
						s.[Shape],
						s.[Size],
						s.[Color],
						s.[Clarity],
						s.[Quantity],
						s.[Weight],
						s.[Setting]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID

					from #DocumentStonesDetails s
						left join dbo.DocumentStonesDetails l on l.[ProductID]=s.[DocumentDetailsID]						
					where l.[ID] is null
					
					-- обновляем все строки для которых найдены [SyncID] в темповой таблице
					update dbo.DocumentStonesDetails
					set 
						  [Stone] = s.[Stone],
						  [Shape] = s.[Shape],
						  [Size] = s.[Size],
						  [Color] = s.[Color],
						  [Clarity] = s.[Clarity],
						  [Quantity] = s.[Quantity],
						  [Weight] = s.[Weight],
						  [Setting] = s.[Setting],
						  [LastModifiedDate] = @dt_now,
						  [LastModifiedByUserID] = @p_AddUserID
					from dbo.DocumentStonesDetails l 
						inner join #DocumentStonesDetails s on l.[ProductID]=s.[DocumentDetailsID] and l.[DocumentID]=s.[DocumentID]

					IF @@TRANCOUNT > 0 begin
												
						COMMIT TRANSACTION; 

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- =============================================
-- Author:		Voskresenskaya Alesya
-- Create date: 19.05.2020 14:31:28
-- Description:	обновление на клиенте таблицы с пробами
-- =============================================
-- exec xp_GetUpdKT
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdKT]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		--declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)
		declare @p_ShopID int =0

		declare @n int =0
		declare @IsGood int = 0

		declare @dt_now datetime=getdate()
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdKT ', CAST(getdate() as varchar))

		--if @p_CompanyID=0 or @p_ShopID=0 begin
		if @p_CompanyID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'KT', null where not exists (select * from dbo.[RefreshInfo] where obj = 'KT' and [DatVal] is null)

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ

		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #KT(				
				[ID] [int] NULL,
				[MetalID] [int] NULL,
				[Description] [nvarchar](255) NULL
				)

			insert into #KT
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetKT] @p_CompanyID, @p_ShopID

			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran

					-- обновляем все строки для которых найдены [SyncID] в темповой таблице
					update dbo.KT
					set 
						[MetalID] = temp.[MetalID],
						[Description] = temp.[Description],
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID]=@p_AddUserID
					from dbo.KT kt
						inner join #KT temp on kt.[ID]=temp.[ID]

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.KT(
						[ID],
						[MetalID],
						[Description],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID])
					select 
						temp.[ID]
						,temp.[MetalID]
						,temp.[Description]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID
					from #KT temp
						left join dbo.KT kt on kt.[ID]=temp.[ID]
					where kt.id is null

					IF @@TRANCOUNT > 0 begin
												
						COMMIT TRANSACTION; 

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 

		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
				[UserID]= @p_AddUserID,
				Source=0				
			where [Obj]='KT'  

			print @@rowcount
		end
		--select * from #KT

END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_GetUpdLocation 17
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdLocation]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)  
		
		declare @n int =0
		declare @IsGood int = 0

		declare @dt_now datetime=getdate()
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdLocation ', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'Location', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Location' and [DatVal] is null)

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		--print '1'
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			--print '2'
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		--print '2.2'
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
		--print '3'
			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #Location(				
				[RefLocationID]  [int] NULL,
				[Description] [nvarchar](255) NULL,
				[CompanyID] int NULL
				)
				print '1'

			insert into #Location
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetLocation]  @p_CompanyID, @p_ShopID  --1,102--
			--select * from #Location
			--select * from Location
			--xp_GetUpdLocation
			select * from #Location

			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера

					-- обновляем все строки для которых найдены [SyncID] в темповой таблице
					update dbo.Location  --truncate table dbo.Location
					set 
						[Description] = s.[Description],
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID]=@p_AddUserID,
						[CompanyID] = s.CompanyID
					from dbo.Location l 
						inner join #Location s on l.[ID]=s.[RefLocationID]
						                          AND (l.[CompanyID]=s.[CompanyID] or isnull(l.[CompanyID],0)=0)

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.Location(
						[ID],
						[Description],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID],
						CompanyID)
					select 
						s.[RefLocationID]
						,s.[Description]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID
						,s.CompanyID
					from #Location s
						left join dbo.Location l on l.[ID]=s.[RefLocationID] and  l.[CompanyID]=s.[CompanyID]
					where l.id is null

					---- удаляем все строки для которых не найдено [SyncID] в темповой таблице
					--delete from dbo.Location 
					--where SyncID>0 and SyncID not in (select SyncID from #Location)

					---- вставляем все строки которые не найдены в локальной таблице
					--insert into dbo.Location(
					--	[SyncID],
					--	[Description])
					--select 
					--	s.[SyncID]
					--	,s.[Description]						
					--from #Location s
					--	left join dbo.Location l on s.SyncID=l.SyncID
					--where l.id is null

					---- обновляем все остальные строки
					--update dbo.Location
					--set 
					--	[SyncID] = s.[SyncID],
					--	[Description] = s.[Description]		
					--from dbo.Location l 
					--	inner join #Location s on l.SyncID=s.SyncID

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 

		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
			    [UserID]= @p_AddUserID,
				[Source]=0				
			where [Obj]='Location'  

			print @@rowcount
		end
		--select * from #Location

END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- xp_GetUpdMassRefreshInfo 66, 0, 0
-- xp_GetUpdMassRefreshInfo 66, 0, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdMassRefreshInfo]	
	@p_AddUserID int = null, 
	@p_DocumentID int, 
	@p_Command int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	if (@p_Command=0) begin
		-- отправляем данные на DataAdapter
		exec xp_UpdRegisterDocument @p_RegisterDocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID;
		exec xp_UpdRevaluationDocument @p_RevaluationDocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID;
		exec xp_UpdSaleDocument @p_SaleDocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID;
		exec xp_UpdDocument @p_DocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID;		
		exec xp_UpdRelatedProductDocument @p_RelatedProductDocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID;		
		exec xp_UpdScrapDocument @p_ScrapDocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID;
		exec xp_UpdTransferDocument @p_TransefDocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID;
		exec xp_UpdTransferRelatedDocument @p_TransferRelatedDocumentID=@p_DocumentID,  @p_AddUserID=@p_AddUserID; --'OLE DB provider "SQLNCLI11" for linked server "DataAdapter" returned message "Multiple-step OLE DB operation generated errors. Check each OLE DB status value, if available. No work was done.".'
		exec xp_UpdUserActiveHistory @p_AddUserID=@p_AddUserID, @p_DateFrom = null,@p_DateTo = null; 
		exec xp_UpdUsersWRK @p_AddUserID=@p_AddUserID, @p_DateFrom = null,@p_DateTo = null;  
			
	end

	if (@p_Command=1) begin
		-- получаем данные с DataAdapter
		exec xp_GetUpdAttributes @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdCurrency @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdDocument @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdKT @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdLocation @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdMetal @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdMetalPrice @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdRelatedProductDocument @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdRelatedProductGuide @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdRevaluationDocument @p_AddUserID=@p_AddUserID;
		exec xp_GetUpdTransferDocument @p_AddUserID=@p_AddUserID;
		-- exec xp_GetUpdRelatedProductTransferDocument @p_AddUserID=@p_AddUserID;
		-- exec xp_GetUpdSalePlan @p_AddUserID=@p_AddUserID;		
	end
	--select * from @p 
	-- select * from [RefreshInfo]
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_GetUpdMetal 66
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- xp_GetUpdMetal 66
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdMetal]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)  

		declare @n int =0
		declare @IsGood int = 0

		declare @dt_now datetime=getdate()
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdMetal ', CAST(getdate() as varchar))
		
		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID

			Return;
		end
		
		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'Metal', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Metal' and [DatVal] is null)
		
		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника

		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID

			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #Metal(				
				[ID] [int] NULL,
				[Description] [nvarchar](255) NULL
				)

			insert into #Metal
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetMetal] @p_CompanyID, @p_ShopID
		
			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran
					-- обновляем все строки для которых найдены [SyncID] в темповой таблице
					update dbo.Metal
					set 
						[Description] = s.[Description],
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID]=@p_AddUserID
					from dbo.Metal l 
						inner join #Metal s on l.[ID]=s.[ID]

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.Metal(
						[ID],
						[Description],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID])
					select 
						s.[ID]
						,s.[Description]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID
					from #Metal s
						left join dbo.Metal l on l.[ID]=s.[ID]
					where l.id is null

					IF @@TRANCOUNT > 0 begin
						COMMIT TRANSACTION; 
						set @IsGood=1
						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID
						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 

		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
				[UserID]= @p_AddUserID,
				Source=0				
			where [Obj]='Metal'  

			print @@rowcount
		end
		--select * from #Metal

END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- ===================================================================================================================
-- процедура для обновления справочника цен на металлы в базе POS (клиента).
-- все запросы к связанному серверу обёрнуты в конструкцию TRY-CATCH
-- на тот случай если связь будет прерванна в процессе выполнения
-- обновление происходит в два этапа 
--		клиент запрашивает данные с сервера о последней модификации справочника (с учётом идентификатора клиента)
--		сверяет эту дату с записями в локальной базе и если они более свежие выполняется запрос непосредственно 
--		на данные из справочника цен
--	перед первым запросом добавляется запись в локальную таблицу (лог начала процедуры синхронизации)
--  и аналогичная запись отправляется на удалённый сервер
--  по результатам выполнения процедуры в ту же запись лога добавляется информация с результатом выполнения
--  в таблицы на стороне клиента и сервера
-- ===================================================================================================================
-- [xp_GetUpdMetalPrice] '20211202', 15
-- [xp_GetUpdMetalPrice] '20200514', 15
-- [xp_GetUpdMetalPrice] '20201223', 66
-- ===================================================================================================================
CREATE PROCEDURE [dbo].[xp_GetUpdMetalPrice]
--declare	
@p_PriceDat date = null,
	@p_AddUserID int = null
/*set @p_AddUserID = 66
set @p_PriceDat = '20201223'*/
AS
BEGIN
	SET NOCOUNT ON;

	declare @UpdID int =0
	declare @LocDtMod datetime=null -- дата модификации в локальном журнале
	declare @ServDtMod datetime=null -- дата модификации в на сервере
	declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
	declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)  
	declare @nUpdMetalPrices int = 0 -- 
	declare @IsGood smallint=0
	declare @dt_now datetime
	set @dt_now = GETDATE()
   
	-- если дата на котурую мы хотим получить обновление не задана - принимается текущая дата --------------------------------------------- (и хорошо бы сверить часы на ссервере и клиенте)
	if @p_PriceDat is null set @p_PriceDat=cast(getdate() as date)

	-- примечание для логирования
	declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdMetalPrice ', CAST(@p_PriceDat as varchar)) -- например 'обновление справочника цен на лом металлов за [дата]'

	-- добавление объектов которых ещё нет в таблице
	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'MetalPrices', @p_PriceDat where not exists (select * from dbo.[RefreshInfo] where obj = 'MetalPrices' and [DatVal]=@p_PriceDat)

	-- инициализация запроса на сервер для получения общей сводки по обновлениям
		
	-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
	INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
	set @UpdID=SCOPE_IDENTITY() -- получили ключ 

	if @p_CompanyID=0 or @p_ShopID=0 begin
		set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
		update dbo.UpdID
		set res=@DescriptionUpd,
			DtRes=getdate()
		where ID=@UpdID
		Return;
	end

	declare @ServUpdID int=0

	BEGIN TRY --------------------------------- выполняем запрс к связанному серверу (посреднику)
		exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
				@p_PosID=@UpdID, 
				@p_CompanyID=@p_CompanyID, 
				@p_ShopID=@p_ShopID, 
				@p_Description=@DescriptionUpd, 
				@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор полученный уже на стороне посредника
	END TRY 
	BEGIN CATCH 
		update dbo.UpdID
		set res='Xp_SaveUpdID execution error, communication may be broken.',
			DtRes=getdate()
		where ID=@UpdID
		Return;
	END CATCH

	set @DescriptionUpd=''

	if @ServUpdID>0 begin -- сервер вернул ответ 		
		-- получаем информацию о последнем обновлении в локальной БД (на заданную дату)
		select @LocDtMod=[DtMod] 
		from [dbo].[RefreshInfo]
		where [Obj]='MetalPrices' and [DatVal]=@p_PriceDat

		set @LocDtMod = isnull(@LocDtMod, cast('19000101' as date))

		-- запрашиваем данные об обновлениях с сервера (ДатаАдаптера) --------------------------------------------------------------------
		BEGIN TRY
			exec [DataAdapter].[DataAdapter].[dbo].xp_GetMetalPriceRefreshInfo  
				@p_CompanyID=@p_CompanyID,
				@p_ShopID = @p_ShopID,
				@p_PriceDat = @p_PriceDat,	
				@p_DtMod = @ServDtMod output	
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='Error executing xp_GetMetalPriceRefreshInfo.',
				DtRes=getdate()
			where ID=@UpdID
			return
		END CATCH
			
		if @ServDtMod is null begin -- в базе ДатаАдаптера данных нет
			--print 'На сервере нет статистики по обновлениям.!'
			update dbo.UpdID
			set res='There are no statistics on updates on the server!',
				DtRes=getdate()
			where ID=@UpdID
			set @IsGood=1
			BEGIN TRY -- log on server
				exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
						@p_PosID=@UpdID, 
						@p_CompanyID=@p_CompanyID, 
						@p_ShopID=@p_ShopID, 
						@p_Description='There are no statistics on updates on the server!', 
						@p_ServID=@ServUpdID output 
				END TRY 
			BEGIN CATCH 
					update dbo.UpdID
					set res='Error while executing xp_GetUpdMetalPrice, possible connection breakage',
						DtRes=getdate()
					where ID=@UpdID
			END CATCH			
		end
		else begin
			--if @LocDtMod<@ServDtMod begin -- на удалённом Сервере есть более свежие данные на указанную дату
				--print 'на Сервере есть более свежие данные на указанную дату'
				BEGIN TRY -- загружаем эти данные во временную таблицу для дальнейшей синхронизацией с локальной таблицой
					CREATE TABLE #UpdMetalPrice(
						[PriceType] int NULL,
						[KT] int NULL,
						[PriceValue] float NULL,
						[PriceDat] date)
					insert into #UpdMetalPrice ([PriceType], [KT], [PriceValue], [PriceDat]) 
					exec [DataAdapter].[DataAdapter].[dbo].[xp_GetMetalPrice]  
							@p_CompanyID=@p_CompanyID,
							@p_ShopID=@p_ShopID,
							@p_PriceDat=@p_PriceDat
					set @nUpdMetalPrices=@@ROWCOUNT
				END TRY 
				BEGIN CATCH -- log local server
					update dbo.UpdID
					SET res='Error while executing xp_GetUpdMetalPrice, possible connection breakage',
						DtRes=getdate()
					WHERE ID=@UpdID
					return --------------------------------------------------------------------------
				END CATCH
				if @nUpdMetalPrices>0 begin -- свежие данные с сервера прилетели, обновляем прайс в локальной базе
					UPDATE [dbo].[MetalPricesN]
						SET [PriceValue]=upd.[PriceValue],LastModifiedDate = @dt_now, LastModifiedByUserID = @p_AddUserID
					FROM [dbo].[MetalPricesN] loc
						inner join #UpdMetalPrice upd ON loc.[PriceDat]=upd.[PriceDat]
														AND loc.[PriceType]=upd.[PriceType]
														AND loc.[KTID]=upd.[KT]
						-- вставляем в таблицу изменений котировок строки котировок которых нет
						
						INSERT INTO [dbo].[MetalPricesN]
							([PriceDat]
							,[PriceType]
							,[KTID]
							,[PriceValue]
							,[Source],CreatedDate, LastModifiedDate, CreatedByUserID, LastModifiedByUserID
							)
						SELECT 
							upd.[PriceDat]
							,upd.[PriceType]
							,upd.[KT]
							,upd.[PriceValue]
							,0,
							@dt_now as CreatedDate, @dt_now as LastModifiedDate , @p_AddUserID as CreatedByUserID, @p_AddUserID as LastModifiedDate
						FROM #UpdMetalPrice upd
						WHERE NOT EXISTS (
									SELECT NULL	FROM [dbo].[MetalPricesN] mp
									WHERE mp.[PriceDat]=upd.[PriceDat]
									AND mp.[PriceType]=upd.[PriceType] 
									AND mp.[KTID]=upd.[KT]
								)

						-- создаем таблицу для актуальных котировок
						CREATE TABLE #ActualMetalPrice(
							[ID] int IDENTITY(1,1) NOT NULL,
							[KTID] int NULL,
							[PriceType] int NULL,
							[PriceValue] float NULL,
							[Source] bit)

						-- формируем в темповой таблице данные актуальных котировок
						INSERT INTO #ActualMetalPrice
							(
								PriceType,
								KTID,
								PriceValue
							)
						SELECT iPriceType,
								iKT,
								iPriceValue
						FROM (SELECT PriceType AS iPriceType,
										KT AS iKT,
										PriceValue AS iPriceValue,
										PriceDat AS iPriceDat,
										row_number() OVER(PARTITION BY PriceType,KT ORDER BY PriceDat DESC) AS rn
								FROM #UpdMetalPrice) AS it
						WHERE rn = 1

						select * from #ActualMetalPrice

						-- обновлем строки таблицы актуальными данными если присутствуют
						UPDATE dbo.[MetalPrices]
							SET
								[PriceValue] = ump.[PriceValue],
								[Source] = 0,
								[LastModifiedDate] = @ServDtMod
						FROM #ActualMetalPrice ump
						WHERE
							dbo.[MetalPrices].[KTID] = ump.[KTID]
							AND dbo.[MetalPrices].[PriceType] = ump.[PriceType]

						-- вставляем строки актуальных данных если отсутствуют
						INSERT INTO dbo.[MetalPrices]
							([PriceType]
							,[KTID]
							,[PriceValue]
							,[Source]
							,[CreatedDate]
							,[LastModifiedDate]
							,[CreatedByUserID]
							,[LastModifiedByUserID]
							)
						SELECT 
							upd.[PriceType]
							,upd.[KTID]
							,upd.[PriceValue]
							,0
							,@ServDtMod
							,@ServDtMod
							,@p_AddUserID
							,@p_AddUserID
						FROM #ActualMetalPrice upd
						WHERE NOT EXISTS (
								SELECT * FROM dbo.[MetalPrices] mp
								WHERE mp.[PriceType] = upd.[PriceType]
									AND mp.[KTID] = upd.[KTID]									
							)
							
							select * from MetalPrices

					-- обновляем локальную сводную таблицу по обновлениям прайса на металлы
					update [dbo].[RefreshInfo]
						set [DtMod] =isnull(@ServDtMod, '1900101')
					where [Obj]='MetalPrices' and [DatVal]=@p_PriceDat
			
					update dbo.UpdID
					set res='ok',
						DtRes=getdate()
					where ID=@UpdID

					set @IsGood=1

					BEGIN TRY -- подтверждаем на удаленном сервере о благополучном завершении обновления
						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
							@p_PosID=0, 
							@p_CompanyID=@p_CompanyID, 
							@p_ShopID=@p_ShopID, 
							@p_Description=@DescriptionUpd, 
							@p_ServID=@ServUpdID output
					END TRY 
					BEGIN CATCH 
						update dbo.UpdID
						set res=res + '. Update confirmation error on the remote server, communication may be lost.',
							DtRes=getdate()
						where ID=@UpdID
					END CATCH

			end
			else begin
				update dbo.UpdID
				set res='up-to-date data, no need to update',
					DtRes=getdate()
				where ID=@UpdID	

				set @IsGood=1

				BEGIN TRY 
					exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
						@p_PosID=0, 
						@p_CompanyID=@p_CompanyID, 
						@p_ShopID=@p_ShopID, 
						@p_Description='up-to-date data, no need to update', 
						@p_ServID=@ServUpdID output
				END TRY 
				BEGIN CATCH 
					select @@ERROR
				END CATCH
			end
		end	
	end
	else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
		update dbo.UpdID
		set res='Server not return IdUpd',
			DtRes=getdate()
		where ID=@UpdID	
	end
	if @IsGood=1 begin
		update dbo.RefreshInfo
			set [DtRefresh]=getdate(),
			[UserID]= @p_AddUserID,
			Source=0
		where [Obj]='MetalPrices' and [DatVal]=@p_PriceDat

		print @@rowcount
	end

END

	



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_GetUpdDocument
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- xp_GetUpdRelatedProductDocument 63
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdRelatedProductDocument]
--declare	
@p_AddUserID int = null
--set @p_AddUserID=63
AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
		SET NOCOUNT ON;
		declare @UpdID int =0
		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере
		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)
		declare @p_LastModifiedDate datetime =  isnull((select top 1 DtRefresh from dbo.[RefreshInfo] a where Obj='RelatedProductDocument'),0)
		declare @n int =0
		declare @IsGood int = 0
		Declare @dt_now datetime=getdate()
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdRelatedProductDocument ', CAST(getdate() as varchar))
		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end
		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0
		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'RelatedProductDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'RelatedProductDocument' and [DatVal] is null)
		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH
	
		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			if OBJECT_ID(N'tempDB..#RelatedProductDocument','U') is not null
			drop table #RelatedProductDocument

			CREATE TABLE #RelatedProductDocument(
				[ID] [int] not null,					
				[ReffID] [bigint] NULL,
				[ReffDate] [datetime] NULL,
				[SenderID] [int] NULL,
				[Contract] [nvarchar](255) NULL
			)

			insert into #RelatedProductDocument
			select 
				[ID], 
				[TransferDocumentNumber],
				[CreatedDate],
				[SenderID],
				[Contract]
			from [DataAdapter].[DataAdapter].[dbo].TransferRelatedProductDocument
			where
				CompanyID = @p_CompanyID
				and ReceiverID = @p_ShopID
				and PublishedDate >= @p_LastModifiedDate				
			and Status = 2

			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran

					-- обновляем все строки для которых найдены [ID] в темповой таблице
					update dbo.RelatedProductDocument
					set 
					     [SenderID] = s.[SenderID],
						 [Contract] = s.[Contract],
						 [LastModifiedDate] = @dt_now,
						 [LastModifiedByUserID] = @p_AddUserID
					from dbo.RelatedProductDocument l 
						inner join #RelatedProductDocument s on l.[ReffID]=s.[ReffID]

					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.RelatedProductDocument(
						[ReffID],
						[ReffDate],
						[SenderID],
						[Contract],
						[DocumentID],
						[Status],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					select
						s.[ReffID],
						s.[ReffDate],
						s.[SenderID],
						s.[Contract],
						0,
						0,
						@dt_now,
						@dt_now,
						@p_AddUserID,
						@p_AddUserID					  
					from #RelatedProductDocument s
						left join dbo.RelatedProductDocument l on l.[ReffID]=s.[ReffID]
					where l.[ID] is null


					IF @@TRANCOUNT > 0 begin

						CREATE TABLE #RelatedProductDocumentDetails(	
							[ID] [int] NULL,		
							[DocumentID] [int] NULL,
							[ReffDate] [datetime] NULL,
							[LineDocument] [int] NULL,
							[PartNumber] [int] NULL,
							[Model] [nvarchar](255) NULL,
							[Quantity] [nchar](40) NULL,
							[TagPriceWithVat] [money] NULL,
							[TagPriceWithOutVat] [money] NULL,
							[Supplier]	[int] NULL,					
						)

						insert into #RelatedProductDocumentDetails
						select
							trpd.[LineDocument],
							trpd.[DocumentID],
							[CreatedDate],
							[LineDocument],
							PartNumber,  
							Model,
							Quantity,
							UnitPrice*Quantity,
							UnitPrice*Quantity,	
							trpd.[Supplier]				
						from [DataAdapter].[DataAdapter].[dbo].TransferRelatedProductDocumentDetails trpd
							inner join #RelatedProductDocument rpd on rpd.ID=trpd.DocumentID

						set @n=@@ROWCOUNT

						-- обновляем все строки для которых найдены [ID] в темповой таблице
						update dbo.RelatedProductDocumentDetails
						set 
							 [Quantity] = rpdd.[Quantity],
							 [TagPriceWithVat] = rpdd.[TagPriceWithVat],
							 [TagPriceWithOutVat] = rpdd.[TagPriceWithOutVat],
							 [LastModifiedDate] = @dt_now,
							 [LastModifiedByUserID] = @p_AddUserID
						from #RelatedProductDocumentDetails rpdd
							inner join #RelatedProductDocument rpd on rpd.[ID]=rpdd.[DocumentID]
							inner join dbo.[RelatedProductDocument] rpdl on rpdl.[ReffID]=rpd.[ReffID]
							inner join dbo.[RelatedProductDocumentDetails] rpddl on rpddl.[DocumentID]=rpdl.[ID] and rpddl.[Model] = rpdd.[Model] and rpddl.[PartNumber] = rpdd.[PartNumber]

						-- вставляем все строки которые не найдены в локальной таблице
						insert into dbo.RelatedProductDocumentDetails (
							[ID],
							[DocumentID],
							[ReffDate],
							[LineDocument],
							[PartNumber],
							[Model],
							[Quantity],
							[TagPriceWithVat],
							[TagPriceWithOutVat],
							[CreatedData],
							[LastModifiedDate],
							[CreatedByUserID],
							[LastModifiedByUserID],
							[Supplier]
						)
						select 
							rpdd.[ID],
							rpdl.[ID],
							rpdd.[ReffDate],
							rpdd.[LineDocument],
							rpdd.[PartNumber],
							rpdd.[Model],
							rpdd.[Quantity],
							rpdd.[TagPriceWithVat],
							rpdd.[TagPriceWithOutVat],
							@dt_now,
							@dt_now,
							@p_AddUserID,
							@p_AddUserID,
							rpdd.[Supplier]
						from #RelatedProductDocumentDetails rpdd
							inner join #RelatedProductDocument rpd on rpd.[ID]=rpdd.[DocumentID]
							inner join dbo.[RelatedProductDocument] rpdl on rpdl.ReffID=rpd.[ReffID]
							left join dbo.[RelatedProductDocumentDetails] rpddl on rpddl.[DocumentID]=rpdl.[ID] and rpddl.[Model] = rpdd.[Model] and rpddl.[PartNumber] = rpdd.[PartNumber]
						where rpddl.[Model] is null and rpddl.[PartNumber] is null

						--print '2'

						COMMIT TRANSACTION; 

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 
		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
				[UserID]= @p_AddUserID,
				Source=0				
			where [Obj]='RelatedProductDocument'  
			print @@rowcount
		end
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_GetUpdDocument
-- select * from updid order by id desc
-- select * from [DataAdapter].[DataAdapter].[dbo].[UpdID] order by id desc 
-- xp_GetUpdRelatedProductDocumentDetails 15
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdRelatedProductDocumentDetails]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)

		declare @n int =0
		declare @IsGood int = 0

		Declare @dt_now datetime=getdate()
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdRelatedProductDocument ', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ

		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #RelatedProductDocumentDetails(					
				[ReffID] [int] NULL,
				[ReffDate] [datetime] NULL,
				[LineDocument] [int] NULL,
				[PartNumber] [int] NULL,
				[Model] [nvarchar](255) NULL,
				[Quantity] [nchar](40) NULL,
				[TagPriceWithVat] [money] NULL,
				[TagPriceWithOutVat] [money] NULL,
				[Currency] [nvarchar](40) NULL
				)
			insert into #RelatedProductDocumentDetails
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetRelatedProductDocumentDetails] @p_CompanyID, @p_ShopID --создать хранику на сервер
						
			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran
					-- обновляем все строки для которых найдены [ID] в темповой таблице
					update dbo.RelatedProductDocumentDetails
					set 
						 [Quantity] = s.[Quantity],
						 [TagPriceWithVat] = s.[TagPriceWithVat],
						 [TagPriceWithOutVat] = s.[TagPriceWithOutVat],
						 [Currency] = s.[Currency],
						 [LastModifiedDate] = @dt_now,
						 [LastModifiedByUserID] = @p_AddUserID
					from dbo.RelatedProductDocumentDetails l 
						inner join #RelatedProductDocumentDetails s on 
						l.[ReffID] = s.[ReffID] 
						AND l.[ReffDate]=s.[ReffDate] 
						AND l.[LineDocument] = s.[LineDocument]
						AND l.[PartNumber] = s.[PartNumber]
						AND l.[Model] = s.[Model]
					
					-- вставляем все строки которые не найдены в локальной таблице
					--#RelatedProductDocumentDetails
					insert into dbo.RelatedProductDocumentDetails (
						   [ReffID]
						  ,[ReffDate]
						  ,[LineDocument]
						  ,[PartNumber]
						  ,[Model]
						  ,[Quantity]
						  ,[TagPriceWithVat]				
						  ,[TagPriceWithOutVat]
						  ,[Currency]
						  ,[CreatedData]						  
						  ,[LastModifiedDate]
						  ,[CreatedByUserID]
						  ,[LastModifiedByUserID]
					)
					select 
						   s.[ReffID]
						  ,s.[ReffDate]
						  ,s.[LineDocument]
						  ,s.[PartNumber]
						  ,s.[Model]
						  ,s.[Quantity]
						  ,s.[TagPriceWithVat]
						  ,s.[TagPriceWithOutVat]
						  ,s.[Currency]
						  ,@dt_now
						  ,@dt_now
						  ,@p_AddUserID
						  ,@p_AddUserID
					from #RelatedProductDocumentDetails s
						left join dbo.RelatedProductDocumentDetails l on 
						l.[ReffID]=s.[ReffID]
						AND l.[ReffDate]=s.[ReffDate] 
						AND l.[LineDocument] = s.[LineDocument]
						AND l.[PartNumber] = s.[PartNumber]
						AND l.[Model] = s.[Model]	
					where l.[ID] is null
					IF @@TRANCOUNT > 0 begin
						COMMIT TRANSACTION; 
						set @IsGood=1
						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID
						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_GetUpdRelatedProductGuide 1474
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdRelatedProductGuide]
	@p_AddUserID int = null
AS
BEGIN
	SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере
		 
		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)  

		declare @n int =0
		declare @IsGood int = 0
		
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdRelatedProductGuide', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'RelatedProductGuide', null where not exists (select * from dbo.[RefreshInfo] where obj = 'RelatedProductGuide' and [DatVal] is null)

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #RelatedProductGuide(				
				[Model] [nvarchar](40) NOT NULL,
				[Supplier] [nvarchar](40) NOT NULL,
				[Description] [nvarchar](255) NULL,
				[Price] [float] NULL,
				)
			insert into #RelatedProductGuide
			--exec [DataAdapter].[DataAdapter].[dbo].[xp_GetRelatedProductGuide]  
			SELECT [Model],[Supplier],[Description],[Price]  FROM [DataAdapter].[DataAdapter].[dbo].[RelatedProductGuide] where [CompanyID]=@p_CompanyID
		
			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran
				declare   @DateNow datetime
				--print '4'
				set @DateNow = getdate()
					-- обновляем все строки для которых найдены [SyncID] в темповой таблице
					update dbo.RelatedProductGuide  --truncate table dbo.Location
					set 
						[Description] = s.[Description],
						[Price] = s.[Price], 
						[LastModifiedDate] = @DateNow,
						[LastModifiedByUserID] = @p_AddUserID
					from dbo.RelatedProductGuide l 
						inner join #RelatedProductGuide s on l.[Model]=s.[Model] AND 
						l.[Supplier]=s.[Supplier]
					-- вставляем все строки которые не найдены в локальной таблице
					insert into dbo.RelatedProductGuide(
						[Model],
						[Supplier],
						[Description],
						[Price],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
						)
					select 
						s.[Model]
						,s.[Supplier]
						,s.[Description]
						,s.[Price]
						,@DateNow
						,@DateNow
						,@p_AddUserID
						,@p_AddUserID
					from #RelatedProductGuide s
						left join dbo.RelatedProductGuide l on l.[Model]=s.[Model] AND 
							l.[Supplier]=s.[Supplier]
					where l.id is null

					IF @@TRANCOUNT > 0 begin
						COMMIT TRANSACTION; 
						set @IsGood=1
						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID
						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 
		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
			    [UserID]= @p_AddUserID,
				[Source]=0				
			where [Obj]='RelatedProductGuide'  

			print @@rowcount
		end
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с переоценкой
-- =============================================
-- exec [dbo].[xp_GetUpdRevaluationDocument] 63
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdRevaluationDocument]
	@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		declare @UpdID int =0

		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере

		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)
		declare @p_LastModifiedDate datetime =  isnull((select top 1 DtRefresh from dbo.[RefreshInfo] a where Obj='RevaluationDocument'),0)
		declare @p_NDS money =isnull((select top 1 [Value] from dbo.Attributes a where Name='Налоговая ставка'),0)
		declare @n int =0
		declare @IsGood int = 0
		
		Declare @dt_now datetime=getdate()

		Declare @TempTableRevaluationProduct table(
			[Value] NVARCHAR(MAX)
		)
		Declare @p_StringValue nvarchar(MAX) = ''
		Declare @p_Numrows int = 0
		Declare @p_ProductIDString nvarchar(MAX) = ''

		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdRevaluationDocument ', CAST(getdate() as varchar))

		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'RevaluationDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'RevaluationDocument' and [DatVal] is null)

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)
		set @UpdID=SCOPE_IDENTITY() -- получили ключ

		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника

		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID

			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации

			CREATE TABLE #RevaluationDocument(
				[ReffID] [bigint],
				[ReffDate] [datetime],
				[Reason] nvarchar(255),
				[IDLocal] int			
				)
			
			CREATE TABLE #RevaluationDocumentDetails(
				[ProductID] [int],
				[ReffID] [bigint],
				[ReffDate] [datetime],
				[TagPriceWithVAT] [money],
				[TagPriceWithOutVAT] [money],
				[Currency] [int]
				)

			insert into #RevaluationDocument
			select 
				rd.[IDCenter],
				rd.[CreatedDate],							
				rd.[Reason],
				rd.[IDLocal]
			from [DataAdapter].[DataAdapter].[dbo].[RevaluationDocument] rd
				where rd.[CompanyID]=@p_CompanyID and rd.[ShopID]=@p_ShopID and rd.[PublishedDate] > @p_LastModifiedDate

			set @n=@@ROWCOUNT

			insert into #RevaluationDocumentDetails
			select 
				rdd.[ID],
				rd.[ReffID],
				rd.[ReffDate],
				rdd.[Price],
				rdd.[Price]/(1+@p_NDS/100),
				rdd.[Currency] 
			from [DataAdapter].[DataAdapter].[dbo].[RevaluationDocumentDetails] rdd
				inner join [#RevaluationDocument] rd on rdd.[RepriceRegisterID]=rd.[IDLocal]
			
						
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran	
					-- обновляем строки документов
					update dbo.RevaluationDocument
					set 
						[Reason] = s.Reason,
						[LastModifiedDate] = null,
						[LastModifiedByUserID] = null
					from #RevaluationDocument s
						inner join dbo.RevaluationDocument l 
						on l.[ReffID]=s.[ReffID] 
						and l.[ReffDate]=s.[ReffDate]
					-- вставляем строки документов
					insert into dbo.RevaluationDocument(
						[ReffID],
						[ReffDate],
						[Reason],
						[Status],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					select 
						s.[ReffID]
						,s.[ReffDate]
						,s.Reason
						,0
						,@dt_now
						,null
						,@p_AddUserID
						,null
					from #RevaluationDocument s
						left join dbo.RevaluationDocument l on l.[ReffID]=s.[ReffID] and l.[ReffDate]=s.[ReffDate]
					where l.[ReffID] is null and l.[ReffDate] is null
							
					-- вставляем строки деталей
					update dbo.RevaluationDocumentDetails 
					set
						[TagPriceWithVAT] = s.[TagPriceWithVAT],
						[TagPriceWithOutVAT] = s.[TagPriceWithOutVAT],
						[Currency] = s.[Currency],
						[CreatedDate] = @dt_now,
						[LastModifiedDate] = null,
						[CreatedByUserID] = @p_AddUserID,
						[LastModifiedByUserID] = null														
						from #RevaluationDocumentDetails s
							inner join dbo.RevaluationDocument rd on rd.[ReffID]=s.[ReffID] and rd.[ReffDate]=s.[ReffDate]	
							inner join dbo.RevaluationDocumentDetails rdd on rdd.[ProductID]= s.ProductID and rdd.DocumentID = rd.ID
					
					-- вставляем строки деталей
					insert into dbo.RevaluationDocumentDetails(
						[ProductID],
						[DocumentID],						
						[TagPriceWithVAT],
						[TagPriceWithOutVAT],
						[Currency],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					select s.[ProductID]
							,rd.ID
							,s.[TagPriceWithVAT]
							,s.[TagPriceWithOutVAT]
							,s.[Currency]
							,@dt_now
							,null
							,@p_AddUserID
							,null						
						from #RevaluationDocumentDetails s
							inner join dbo.RevaluationDocument rd on rd.[ReffID]=s.[ReffID] and rd.[ReffDate]=s.[ReffDate]	
							left join dbo.RevaluationDocumentDetails rdd on rdd.[ProductID]= s.ProductID and rdd.DocumentID = rd.ID	
						where rdd.[ProductID] is null 

					IF @@TRANCOUNT > 0 begin
												
						COMMIT TRANSACTION; 

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 

		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
				[UserID]= @p_AddUserID,
				Source=0				
			where [Obj]='RevaluationDocument'  

			--print @@rowcount
		end
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_GetUpdSalePlan 1474
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdSalePlan]
	@p_AddUserID int = null
AS
BEGIN
	SET NOCOUNT ON;
		declare @UpdID int =0
		declare @LocDtMod datetime=null -- дата модификации в локальном журнале
		declare @ServDtMod datetime=null -- дата модификации в на сервере
		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)  
		declare @n int =0
		declare @IsGood int = 0
		declare @dt_now datetime=getdate()
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdSalePlan', CAST(getdate() as varchar))
		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end
		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0
		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'SalePlan', null where not exists (select * from dbo.[RefreshInfo] where obj = 'SalePlan' and [DatVal] is null)
		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)	
		set @UpdID=SCOPE_IDENTITY() -- получили ключ
		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH
		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			CREATE TABLE #SalePlan(
						[ID] [int] NULL,
						[Category] [int] NULL,
						[AmountPlan] [money] NULL,
						[FromDate] [datetime] NULL,
						[ToDate] [datetime] NULL,
						[Status] [int] NULL		
				)
			insert into #SalePlan
			exec [DataAdapter].[DataAdapter].[dbo].[xp_GetSalePlan] @p_CompanyID, @p_ShopID
			
			set @n=@@ROWCOUNT
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran
					-- Обновляем все строки для которых найдены [SyncID] в темповой таблице
					update dbo.SalePlan
					set 
					    [Category]=spp.[Category],
						[AmountPlan]=spp.[AmountPlan],
						[FromDate]=spp.[FromDate],
						[ToDate]=spp.[ToDate],
						[Status]=spp.[Status],
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID] = @p_AddUserID
					from dbo.SalePlan sp 
						inner join #SalePlan spp on sp.[ID]=spp.[ID]
					-- Вставляем все строки которые не найдены в локальной таблице
					insert into dbo.SalePlan(
						[ID],
						[Category],
						[AmountPlan],
						[FromDate],
						[ToDate],				
						[Status],	
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
						)
					select 
						spp.[ID]
						,spp.[Category]
						,spp.[AmountPlan]
						,spp.[FromDate]
						,spp.[ToDate]
						,spp.[Status]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID
					from #SalePlan spp
						left join [dbo].[SalePlan] sp on sp.[ID]=spp.[ID]
					where sp.[ID] is null
					-- Создаем временную таблицу для аналитики продаж
					--CREATE TABLE #SaleProduct(
					--			[SalePlanID] [int] NULL,
					--			[UsersID] [int] NULL,
					--			[AmountPlan] [money] NULL,
					--			[AmountFact] [money] NULL,
					--			[CreatedByUserID] [int] NULL,
					--			[LastModifiedByUserID] [int] NULL,
					--			[CreatedDate] [datetime] NULL,
					--			[LastModifiedDate] [datetime] NULL
					--	)

					-- Модифицируем пользовательские продажи для продукции
					--INSERT INTO #SaleProduct
					--	(
					--		[SalePlanID],
					--		[UsersID],
					--		[AmountPlan],
					--		[AmountFact],
					--		[CreatedDate],
					--		[LastModifiedDate],
					--		[CreatedByUserID],
					--		[LastModifiedByUserID]
					--	)
					--SELECT
					--	sp.[ID]
					--	,sd.[LastModifiedByUserID]
					--	,sp.[AmountPlan]
					--	,SUM(CASE WHEN sdd.[IsIndividualDiscount]=0 THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0) ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0) END) as [SumPlan]
					--	,@dt_now
					--	,@dt_now
					--	,@p_AddUserID
					--	,sd.[LastModifiedByUserID]
					--FROM [dbo].[SaleDocumentDetails] AS sdd
					--	inner join [dbo].[SaleDocument] sd ON sd.[ID] = sdd.[DocumentID] AND sd.[DocumentNumber]>0
					--	inner join #SalePlan sp ON sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND sp.[ToDate]
					--WHERE 
					--	sdd.[PartNumber] IS NULL
					--	AND sp.[Сategory]=0
					--GROUP BY sp.[ID], sd.[LastModifiedByUserID], sp.[AmountPlan]

					--update [dbo].[SalePlanDetails]
					--set 
					--		[AmountPlan]=sp.[AmountPlan],
					--		[AmountFact]=sp.[AmountFact],
					--		[LastModifiedDate]=@dt_now,
					--		[LastModifiedByUserID]=@p_AddUserID
					--from #SaleProduct sp 
					--	inner join [dbo].[SalePlanDetails] spd ON spd.[SalePlanID]=sp.[SalePlanID] AND spd.[UsersID]=sp.[LastModifiedByUserID]

					--INSERT INTO [dbo].[SalePlanDetails]
					--	(
					--		[SalePlanID],
					--		[UsersID],
					--		[AmountPlan],
					--		[AmountFact],
					--		[CreatedDate],
					--		[LastModifiedDate],
					--		[CreatedByUserID],
					--		[LastModifiedByUserID]
					--	)
					--SELECT
					--		sp.[SalePlanID],
					--		sp.[UsersID],
					--		sp.[AmountPlan],
					--		sp.[AmountFact],
					--		@dt_now,
					--		@dt_now,
					--		@p_AddUserID,
					--		@p_AddUserID
					--FROM #SaleProduct sp
					--	left join [dbo].[SalePlanDetails] spd ON spd.[SalePlanID]=sp.[SalePlanID] AND spd.[UsersID]=sp.[LastModifiedByUserID]
					--WHERE spd.[ID] IS NULL
					
					--DELETE FROM #SaleProduct

					-- Модифицируем пользовательские продажи для сопутствующих
					--INSERT INTO #SaleProduct
					--	(
					--		[SalePlanID],
					--		[UsersID],
					--		[AmountPlan],
					--		[AmountFact],
					--		[CreatedDate],
					--		[LastModifiedDate],
					--		[CreatedByUserID],
					--		[LastModifiedByUserID]
					--	)
					--SELECT
					--	sp.[ID]
					--	,sd.[LastModifiedByUserID]
					--	,sp.[AmountPlan]
					--	,SUM(CASE WHEN sdd.[IsIndividualDiscount]=0 THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0) ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0) END) as [SumPlan]
					--	,@dt_now
					--	,@dt_now
					--	,@p_AddUserID
					--	,sd.[LastModifiedByUserID]
					--FROM [dbo].[SaleDocumentDetails] AS sdd
					--	inner join [dbo].[SaleDocument] sd ON sd.[ID] = sdd.[DocumentID] AND sd.[DocumentNumber]>0
					--	inner join #SalePlan sp ON sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND sp.[ToDate]
					--WHERE 
					--	sdd.[PartNumber] IS NOT NULL
					--	AND sp.[Сategory]=1
					--GROUP BY sp.[ID], sd.[LastModifiedByUserID], sp.[AmountPlan]

					--update [dbo].[SalePlanDetails]
					--set 
					--		[AmountPlan]=sp.[AmountPlan],
					--		[AmountFact]=sp.[AmountFact],
					--		[LastModifiedDate]=@dt_now,
					--		[LastModifiedByUserID]=@p_AddUserID
					--from #SaleProduct sp 
					--	inner join [dbo].[SalePlanDetails] spd ON spd.[SalePlanID]=sp.[SalePlanID] AND spd.[UsersID]=sp.[LastModifiedByUserID]

					--INSERT INTO [dbo].[SalePlanDetails]
					--	(
					--		[SalePlanID],
					--		[UsersID],
					--		[AmountPlan],
					--		[AmountFact],
					--		[CreatedDate],
					--		[LastModifiedDate],
					--		[CreatedByUserID],
					--		[LastModifiedByUserID]
					--	)
					--SELECT
					--		sp.[SalePlanID],
					--		sp.[UsersID],
					--		sp.[AmountPlan],
					--		sp.[AmountFact],
					--		@dt_now,
					--		@dt_now,
					--		@p_AddUserID,
					--		@p_AddUserID
					--FROM #SaleProduct sp
					--	left join [dbo].[SalePlanDetails] spd ON spd.[SalePlanID]=sp.[SalePlanID] AND spd.[UsersID]=sp.[LastModifiedByUserID]
					--WHERE spd.[ID] IS NULL

					-- Модифицируем общие продажи для продукции
					--update dbo.SalePlan
					--set 
					--    [AmountFact]=(
					--					SELECT Sum(IsNull([TagPriceWithVAT_In],0))-Sum(IsNull([DiscountSumm_In],0))
					--					FROM (
					--							SELECT
					--								[TagPriceWithVAT] as [TagPriceWithVAT_In],
					--								CASE WHEN [IsIndividualDiscount]=0 THEN IsNull([DiscountSumm],0) ELSE IsNull([IndividualDiscountSumm],0) END as [DiscountSumm_In]
					--							FROM [dbo].[SaleDocumentDetails] as sdd
					--							inner join [dbo].[SaleDocument] sd ON sd.ID=sdd.DocumentID AND sd.DocumentNumber>0
					--							AND sdd.PartNumber IS NULL
					--							AND sd.LastModifiedDate BETWEEN spp.[FromDate] AND spp.[ToDate]
					--						  ) as sumt
					--				 )
					--from dbo.SalePlan sp 
					--	inner join #SalePlan spp on sp.[ID]=spp.[ID]
					--WHERE spp.Сategory=0 -- продукт
					--	  AND sp.[AmountPlan]=spp.[AmountPlan]

					---- Модифицируем общие продажи для сопутствующих товаров
					--update dbo.SalePlan
					--set 
					--    [AmountFact]=(
					--					SELECT Sum(IsNull([TagPriceWithVAT_In],0))-Sum(IsNull([DiscountSumm_In],0))
					--					FROM (
					--							SELECT
					--								[TagPriceWithVAT] as [TagPriceWithVAT_In],
					--								CASE WHEN [IsIndividualDiscount]=0 THEN IsNull([DiscountSumm],0) ELSE IsNull([IndividualDiscountSumm],0) END as [DiscountSumm_In]
					--							FROM [dbo].[SaleDocumentDetails] as sdd
					--							inner join [dbo].[SaleDocument] sd ON sd.ID=sdd.DocumentID AND sd.DocumentNumber>0
					--							AND sdd.PartNumber IS NOT NULL
					--							AND sd.LastModifiedDate BETWEEN spp.[FromDate] AND spp.[ToDate]
					--						  ) as sumt
					--				 )
					--from dbo.SalePlan sp 
					--	inner join #SalePlan spp on sp.[ID]=spp.[ID]
					--WHERE spp.Сategory=1 -- сопутствующий товар
					--	  AND sp.[AmountPlan]=spp.[AmountPlan]
					
					IF @@TRANCOUNT > 0 begin
												
						COMMIT TRANSACTION; 

						set @IsGood=1

						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID

						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 
		print @IsGood
		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
			    [UserID]= @p_AddUserID, 
				[Source]=0				
			where [Obj]='SalePlan'  
			print @@rowcount
		end
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с переоценкой
-- =============================================
-- exec [dbo].[xp_GetUpdTransferDocument] 66
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUpdTransferDocument]
@p_AddUserID int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
		SET NOCOUNT ON;
		declare @UpdID int =0
		declare @p_CompanyID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер компании'),0)
		declare @p_ShopID int =isnull((select top 1 [Value] from dbo.Attributes a where Name='Номер магазина'),0)
		declare @p_LastModifiedDate datetime =  isnull((select top 1 DtRefresh from dbo.[RefreshInfo] a where Obj='TransferDocument'),0) 
		declare @n int =0
		declare @IsGood int = 0
		declare @dt_now datetime=getdate(),
				@p_DocumentID int,
				@p_Status int
		-- примечание для логирования
		declare @DescriptionUpd varchar(50) = CONCAT('xp_GetUpdTransferDocument ', CAST(getdate() as varchar))
		if @p_CompanyID=0 or @p_ShopID=0 begin
			set @DescriptionUpd = @DescriptionUpd + iif(@p_CompanyID=0, ' Не задана компания.','') + iif(@p_CompanyID=0, ' Не задан Магазин.','')
			update dbo.UpdID
			set res=@DescriptionUpd,
				DtRes=getdate()
			where ID=@UpdID
			Return;
		end

		-- отмечаем на сервере (дата адптере) начало процедуры синхронизации
		declare @ServUpdID int=0

		-- добавление объектов которых ещё нет в таблице
		insert into dbo.[RefreshInfo] ([Obj], [DatVal])
		select 'TransferDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'TransferDocument' and [DatVal] is null)

		-- генерируем локальный ключ, для идентификации факта отправки запроса на сервер
		INSERT INTO [dbo].[UpdID] ([Description]) VALUES (@DescriptionUpd)
		set @UpdID=SCOPE_IDENTITY() -- получили ключ

		BEGIN TRY --------------------------------- выполняем запрс к серверу (посреднику)
			exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
					@p_PosID=@UpdID, 
					@p_CompanyID=@p_CompanyID, 
					@p_ShopID=@p_ShopID, 
					@p_Description=@DescriptionUpd, 
					@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника
		END TRY 
		BEGIN CATCH 
			update dbo.UpdID
			set res='[DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] execution error, communication may be broken.',
				DtRes=getdate()
			where ID=@UpdID
			return-------------------------------------------------------------------
		END CATCH

		if @ServUpdID>0 begin -- сервер подтвердил начало процесса синхронизации
			IF OBJECT_ID(N'tempdb..#TransferDocument', N'U') IS NOT NULL   
			DROP TABLE #TransferDocument; 
			CREATE TABLE #TransferDocument(
					[id] [int],
					[SenderID] [int],
					[ReceiverID] [int],					
					[Contract] [nvarchar](255),
					[Status] [int],
					[TransferDocumentNumber] [bigint]
				)
			insert into #TransferDocument
			select	
					td.ID,
					td.[SenderID],
					td.[ReceiverID],
					td.[Contract],
					td.[Status],
					td.[TransferDocumentNumber]
			from [DataAdapter].[DataAdapter].[dbo].[TransferDocument] td
				inner join [dbo].[TransferDocument] as tdl on tdl.TransferDocumentNumber = td.TransferDocumentNumber
			where
				td.[CompanyID] = @p_CompanyID
				and td.[PublishedDate] > @p_LastModifiedDate
				and td.SenderID = @p_ShopID
				and td.Status in (2,3)

			set @n=@@ROWCOUNT

			IF OBJECT_ID(N'tempdb..#TransferDocumentDetails', N'U') IS NOT NULL   
			DROP TABLE #TransferDocumentDetails; 
			CREATE TABLE #TransferDocumentDetails(
					[DocumentID] [int],
					[LineDocument] [int],
					[Model] [nvarchar](30),
					[ProductID] [int],
					[Type] [nvarchar](50),
					[KtID] [int],
					[Size] [nvarchar](50),
					[Color] [nvarchar](50),
					[Gender] [nvarchar](30),
					[SupplierID] [int],
					[SupplierName] [nvarchar](255),
					[Country] [nvarchar](255),
					[ThemedCollection] [nvarchar](255),
					[Weight] [money],
					[CostWithoutVAT] [money],
					[CostCurrency] [nvarchar](30),
					[TagPriceWithVAT] [money],
					[TagPriceCurrency] [nvarchar](30),
					[TagPriceExtra] [money],
					[TagPriceWithOutVAT] [money],
					[DeclarationNumber] [nvarchar](40),
					[TnvedCode] [nvarchar](40),
					[TransferDocumentNumber] [bigint]
				)
			insert into #TransferDocumentDetails
			select 
					tdd.[DocumentID],
					tdd.[LineDocument],
					tdd.[Model],
					tdd.[ProductID],
					tdd.[Type],
					tdd.[KtID],
					tdd.[Size],
					tdd.[Color],
					tdd.[Gender],
					tdd.[SupplierID],
					tdd.[SupplierName],
					tdd.[Country],
					tdd.[ThemedCollection],
					tdd.[Weight] [money],
					tdd.[CostWithoutVAT],
					tdd.[CostCurrency],
					tdd.[TagPriceWithVAT],
					tdd.[TagPriceCurrency],
					tdd.[TagPriceExtra],
					tdd.[TagPriceWithOutVAT],
					tdd.[DeclarationNumber],
					tdd.[TnvedCode],
					td.[TransferDocumentNumber]
			from [DataAdapter].[DataAdapter].[dbo].[TransferDocumentDetails] tdd
				inner join #TransferDocument td on tdd.[DocumentID]=td.[ID]

			IF OBJECT_ID(N'tempdb..#TransferDocumentStonesDetails', N'U') IS NOT NULL   
			DROP TABLE #TransferDocumentStonesDetails; 
			CREATE TABLE #TransferDocumentStonesDetails(
					[ProductID] [int],
					[DocumentID] [int],
					[Stone] [nvarchar](50),
					[Shape] [nvarchar](50),
					[Size] [nvarchar](50),
					[Color] [nvarchar](50),
					[Clarity] [nvarchar](30),
					[Quantity] [int],
					[Weight] [money],
					[Setting] [nvarchar](50),
					[TransferDocumentNumber] [bigint]
				)
			insert into #TransferDocumentStonesDetails
			select 
					tdsd.[ProductID],
					tdsd.[DocumentID],
					tdsd.[Stone],
					tdsd.[Shape],
					tdsd.[Size],
					tdsd.[Color],
					tdsd.[Clarity],
					tdsd.[Quantity],
					tdsd.[Weight],
					tdsd.[Setting],
					td.[TransferDocumentNumber]
			from [DataAdapter].[DataAdapter].[dbo].[TransferDocumentStonesDetails] tdsd
				inner join #TransferDocument td on td.[ID]=tdsd.[DocumentID]
				inner join #TransferDocumentDetails tdd on tdd.ProductID=tdsd.[ProductID] and tdd.[DocumentID]=td.[ID]
			if @n = 0 begin
				set @IsGood = 1;
			end
			if @n>0 begin -- прилетели данные с адаптера
				begin tran	
					-- обновляем строки документов
					update dbo.[TransferDocument]
					set 
						[SenderID] = s.[SenderID],
						[ReceiverID] = s.[ReceiverID],
						[Status] = s.[Status],
						[Contract] = s.[Contract],
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID] = @p_AddUserID
					from #TransferDocument s
						inner join dbo.[TransferDocument] td on td.[TransferDocumentNumber]=s.[TransferDocumentNumber]
								
					-- вставляем строки документов
					insert into dbo.[TransferDocument](
						[SenderID],
						[ReceiverID],
						[Contract],
						[Status],
						[TransferDocumentNumber],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					select 
						s.[SenderID]
						,s.[ReceiverID]
						,s.[Contract]
						,s.Status
						,s.[TransferDocumentNumber]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID
					from #TransferDocument s
						left join dbo.[TransferDocument] td on td.[TransferDocumentNumber]=s.[TransferDocumentNumber]
					where td.[TransferDocumentNumber] is null					

					-- обновляем строки деталей
					update dbo.[TransferDocumentDetails] 
					set
						[LineDocument]=s.[LineDocument],
						[Model]=s.[Model],
						[ProductID]=s.[ProductID],
						[Type]=s.[Type],
						[KtID]=s.[KtID],
						[Size]=s.[Size],
						[Color]=s.[Color],
						[Gender]=s.[Gender],
						[SupplierID]=s.[SupplierID],
						[SupplierName]=s.[SupplierName],
						[Country]=s.[Country],
						[ThemedCollection]=s.[ThemedCollection],
						[Weight]=s.[Weight],
						[CostWithoutVAT]=s.[CostWithoutVAT],
						[CostCurrency]=s.[CostCurrency],
						[TagPriceWithVAT]=s.[TagPriceWithVAT],
						[TagPriceCurrency]=s.[TagPriceCurrency],
						[TagPriceExtra]=s.[TagPriceExtra],
						[TagPriceWithOutVAT]=s.[TagPriceWithOutVAT],
						[DeclarationNumber]=s.[DeclarationNumber],
						[TnvedCode]=s.[TnvedCode],
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID] = @p_AddUserID
					from #TransferDocumentDetails s
						inner join dbo.[TransferDocument] td on td.[TransferDocumentNumber]=s.[TransferDocumentNumber]	
						inner join dbo.[TransferDocumentDetails] tdd on tdd.[ProductID]= s.[ProductID] and tdd.[DocumentID] = td.[ID]
				
					-- вставляем строки деталей
					insert into dbo.[TransferDocumentDetails]
					(
						[DocumentID],
						[LineDocument],
						[Model],
						[ProductID],
						[Type],
						[KtID],
						[Size],
						[Color],
						[Gender],
						[SupplierID],
						[SupplierName],
						[Country],
						[ThemedCollection],
						[Weight],
						[CostWithoutVAT],
						[CostCurrency],
						[TagPriceWithVAT],
						[TagPriceCurrency],
						[TagPriceExtra],
						[IsChecked],
						[TagPriceWithOutVAT],
						[DeclarationNumber],
						[TnvedCode],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					select
						td.[ID]
						,s.[LineDocument]
						,s.[Model]
						,s.[ProductID]
						,s.[Type]
						,s.[KtID]
						,s.[Size]
						,s.[Color]
						,s.[Gender]
						,s.[SupplierID]
						,s.[SupplierName]
						,s.[Country]
						,s.[ThemedCollection]
						,s.[Weight]
						,s.[CostWithoutVAT]
						,s.[CostCurrency]
						,s.[TagPriceWithVAT]
						,s.[TagPriceCurrency]
						,s.[TagPriceExtra]
						,0
						,s.[TagPriceWithOutVAT]
						,s.[DeclarationNumber]
						,s.[TnvedCode]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID						
					from #TransferDocumentDetails s
						inner join dbo.[TransferDocument] td on td.[TransferDocumentNumber]=s.[TransferDocumentNumber]
						left join dbo.[TransferDocumentDetails] tdd on tdd.[ProductID]= s.[ProductID] and tdd.[DocumentID] = td.[ID]
					where tdd.[ProductID] is null
					-- обновляем строки камней
					update dbo.[TransferDocumentStonesDetails] 
					set
						[Stone]=tdsd.[Stone],
						[Shape]=tdsd.[Shape],
						[Size]=tdsd.[Size],
						[Color]=tdsd.[Color],
						[Clarity]=tdsd.[Clarity],
						[Quantity]=tdsd.[Quantity],
						[Weight]=tdsd.[Weight],
						[Setting]=tdsd.[Setting],
						[LastModifiedDate] = @dt_now,
						[LastModifiedByUserID] = @p_AddUserID
					from #TransferDocumentStonesDetails tdsd
						inner join dbo.[TransferDocument] td on td.[TransferDocumentNumber]=tdsd.[TransferDocumentNumber]
						inner join dbo.[TransferDocumentDetails] tdd on tdd.[ProductID]= tdsd.[ProductID] and tdd.[DocumentID] = td.[ID]
						inner join dbo.[TransferDocumentStonesDetails] tdsdt on tdsdt.[ProductID]= tdsd.[ProductID] and tdsdt.[DocumentID] = td.[ID]
					-- вставляем строки камней
					insert into dbo.[TransferDocumentStonesDetails]
					(
						[ProductID],
						[DocumentID],
						[Stone],
						[Shape],
						[Size],
						[Color],
						[Clarity],
						[Quantity],
						[Weight],
						[Setting],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					select
						tdd.[ProductID]
						,td.[ID]
						,tdsd.[Stone]
						,tdsd.[Shape]
						,tdsd.[Size]
						,tdsd.[Color]
						,tdsd.[Clarity]
						,tdsd.[Quantity]
						,tdsd.[Weight]
						,tdsd.[Setting]
						,@dt_now
						,@dt_now
						,@p_AddUserID
						,@p_AddUserID						
					from #TransferDocumentStonesDetails tdsd
						inner join dbo.[TransferDocument] td on td.[TransferDocumentNumber]=tdsd.[TransferDocumentNumber]
						inner join dbo.[TransferDocumentDetails] tdd on tdd.[ProductID]= tdsd.[ProductID] and tdd.[DocumentID] = td.[ID]
						left join dbo.[TransferDocumentStonesDetails] tdsdt on tdsdt.[ProductID]= tdsd.[ProductID] and tdsdt.[DocumentID] = td.[ID]
					where tdsdt.[ProductID] is null

					IF @@TRANCOUNT > 0 begin
						COMMIT TRANSACTION; 
						set @IsGood=1
						update dbo.UpdID
						set res='ok.',
							DtRes=getdate()
						where ID=@UpdID
						exec [DataAdapter].[DataAdapter].[dbo].[xp_SaveUpdID] 
								@p_PosID=@UpdID, 
								@p_CompanyID=@p_CompanyID, 
								@p_ShopID=@p_ShopID, 
								@p_Description='ok.', 
								@p_ServID=@ServUpdID output -- в качестве ответа процедура возвращает идентификатор сгенерированный уже на стороне посредника							
					end
					/*
					UPDATE P
					SET  
						 p.[Status] = case when td.Status = 2 then 3 else 0 end,
						 p.[LastModifiedByUserID] = @p_AddUserID,
						 p.[LastModifiedDate] = @dt_now
					FROM [dbo].[Product] p
						inner join #TransferDocumentDetails tdd on tdd.[ProductID] = p.[ID]			
						inner join #TransferDocument td on td.[TransferDocumentNumber]=tdd.[TransferDocumentNumber]
			
					-- фиксируем изменение статуса продукции в ProductTransfer
					INSERT INTO [dbo].[ProductTransfer] (
						[ProductID],
						[Status],
						[ExReffOperationType],
						[ExtReffID],
						[CreatedDate],
						[CreatedByUserID]
						)
					SELECT
						p.[ID],
						case when td.Status = 2 then 1 else 0 end,
						2,
						td.ID,
						@dt_now,
						@p_AddUserID
					FROM [dbo].[Product] p
						inner join #TransferDocumentDetails tdd on tdd.[ProductID] = p.[ID]
						inner join TransferDocument td on td.[TransferDocumentNumber]=tdd.[TransferDocumentNumber]*/
					DECLARE rep_cursor CURSOR FOR   
					select d.ID, d.Status from #TransferDocument d
					where d.Status in (2,3)
					OPEN rep_cursor  
					FETCH NEXT FROM rep_cursor INTO @p_DocumentID, @p_Status
					WHILE @@FETCH_STATUS = 0
					BEGIN 
						exec xp_SetTransferDocumentID @p_AddUserID,@p_DocumentID,@p_Status
						FETCH NEXT FROM rep_cursor INTO @p_DocumentID,@p_Status
					END  
					close rep_cursor
					DEALLOCATE rep_cursor

			end
			else begin -- данных на сервере нет
				update dbo.UpdID
				set res='There is no data on the server.',
					DtRes=getdate()
				where ID=@UpdID	
			end
		end
		else begin -- не получил ответ от серевера - пишем об  этом в локальный лог
			update dbo.UpdID
			set res='Server not return IdUpd',
				DtRes=getdate()
			where ID=@UpdID	
		end		 
		if @IsGood=1 begin
			update dbo.RefreshInfo
				set [DtRefresh]=getdate(),
				[UserID]= @p_AddUserID, 
				Source=0				
			where [Obj]='TransferDocument'

			--select * from #TransferDocument
			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_TransferDocument]
				select [ID]
							,@dt_now
							,[SenderID]
							,[ReceiverID]
							,[Contract]
							,[Status]
							,[TransferDocumentNumber]
							,@dt_now
							,@dt_now
							,@p_AddUserID
							,@p_AddUserID
							,@p_CompanyID
							,@p_ShopID
							,0
					from #TransferDocument
					update s
				set [TransComplited]=1
				from [DataAdapter].[DataAdapter].[dbo].[TEMP_TransferDocument] s 
				inner join #TransferDocument dl on s.ID=dl.ID 
				and s.[CompanyID]=@p_CompanyID 
				and s.ShopID=@p_ShopID	
		end		
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- WHERE ID = 15 or ID=1472
-- xp_GetUser 'Item', '', 15, 0, 1
-- xp_GetUser 'Grid', '', 0, 0, '', 1
-- xp_GetUser 'Child', '', 0, 0, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUser]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',
	@p_ID int=0,
	@p_RoleID tinyint=0,
	@p_Login nvarchar(40)='',
	@p_isActive bit = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)


	if @p_TypeScreen='Child' begin
		SELECT u.[ID]
			  ,u.[Number]
			  ,u.[FirstName]
			  ,u.[LastName]
			  ,u.[SecondName]
			  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
			  ,u.[INN]
			  ,u.[RoleID]
			  ,u.[Phone]
			  ,u.[Email]
			  ,u.[Active]
			  ,u.[Login]
			  ,u.[Password]
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
			  ,u.[Birthday]
			  ,u.[GenderID]
			  ,u.[ThemeID]
			  ,f.[Photo]
		  FROM [dbo].[Users] u
			left join dbo.Photo f on f.[Type]=1 and f.[ParentID]=u.ID
		where u.[RoleID]=@p_RoleID
	end

	else if @p_TypeScreen='item' begin
		SELECT u.[ID]
			  ,u.[Number]
			  ,u.[FirstName]
			  ,u.[LastName]
			  ,u.[SecondName]
			  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
			  ,u.[INN]
			  ,u.[RoleID]
			  ,u.[Phone]
			  ,u.[Email]
			  ,u.[Active]
			  ,u.[Login]
			  ,u.[Password]
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
			  ,u.[Birthday]
			  ,u.[GenderID]
			  ,u.[ThemeID]
			  ,f.[Photo]
		  FROM [dbo].[Users] u
			left join dbo.Photo f on f.[Type]=1 and f.[ParentID]=u.ID
		where u.ID=@p_ID 
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		if @p_Search='' begin
			SELECT u.[ID]
				  ,u.[Number]
				  ,u.[FirstName]
				  ,u.[LastName]
				  ,u.[SecondName]
				  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
				  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
				  ,u.[INN]
				  ,u.[RoleID]
				  ,u.[Phone]
				  ,u.[Email]
				  ,u.[Active]
				  ,u.[Login]
				  ,u.[Password]
				  ,u.[CreatedDate]
				  ,u.[LastModifiedDate]
				  ,u.[CreatedByUserID]
				  ,u.[LastModifiedByUserID]
				  ,u.[Birthday]
				  ,u.[GenderID]
				  ,u.[ThemeID]
				  ,f.[Photo]
			  FROM [dbo].[Users] u
					left join dbo.Photo f on f.[Type]=1 and f.[ParentID]=u.ID
			where (@p_RoleID=0 or [RoleID]=@p_RoleID) and
				  (@p_isActive is null or [Active]=@p_isActive) and ([RoleID]>0)
			order by u.[LastName]
		end
		else begin
			set @p_search='%' + @p_search + '%'
			SELECT u.[ID]
				  ,u.[Number]
				  ,u.[FirstName]
				  ,u.[LastName]
				  ,u.[SecondName]
				  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser
			      ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser
				  ,u.[INN]
				  ,u.[RoleID]
				  ,u.[Phone]
				  ,u.[Email]
				  ,u.[Active]
				  ,u.[Login]
				  ,u.[Password]
				  ,u.[CreatedDate]
				  ,u.[LastModifiedDate]
				  ,u.[CreatedByUserID]
				  ,u.[LastModifiedByUserID]
				  ,u.[Birthday]
				  ,u.[GenderID]
				  ,u.[ThemeID]
				  ,f.[Photo]
			  FROM [dbo].[Users] u
					left join dbo.Photo f on f.[Type]=1 and f.[ParentID]=u.ID
			where (@p_RoleID=0 or [RoleID]=@p_RoleID) and
				  (@p_isActive is null or [Active]=@p_isActive) and
				  ( 
					 (@p_Search='' or convert(varchar(10), u.ID) like @p_search) or
					 (@p_Search='' or u.[Login] like @p_search) or
					 (@p_Search='' or u.[Phone] like @p_search) or
					 (@p_Search='' or u.[Email] like @p_search) or
					 (@p_Search='' or u.[Number] like @p_search) or
					 (@p_Search='' or u.[INN] like @p_search) or
				     (@p_Search='' or CONCAT(u.[LastName],' ',u.[FirstName],' ',u.[SecondName]) like '%'+@p_search+'%')
				  )
			order by u.[LastName]
		end
	end
	else if @p_TypeScreen='name' begin
		SELECT u.[ID]
			  ,u.[Number]
			  ,u.[FirstName]
			  ,u.[LastName]
			  ,u.[SecondName]
			  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayNameUser	
			  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayNameUser			  
			  ,u.[INN]
			  ,u.[RoleID]
			  ,u.[Phone]
			  ,u.[Email]
			  ,u.[Active]
			  ,u.[Login]
			  ,u.[Password]
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
			  ,u.[Birthday]
			  ,u.[GenderID]
			  ,u.[ThemeID]
			  ,f.[Photo]
		  FROM [dbo].[Users] u
				left join dbo.Photo f on f.[Type]=1 and f.[ParentID]=u.ID
		where u.[Login]=@p_Login
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetUserActiveHistory 'Grid', '', 0, 0, 0, '-1', '1900-01-01 00:00:00', '2021-01-01 13:58:00'
-- xp_GetUserActiveHistory 'Grid', '', 0, 0, 0, '11|10|8|6|1|2|', '1900-01-01 00:00:00', '2021-01-01 13:58:00'
-- ============================================= 
CREATE PROCEDURE [dbo].[xp_GetUserActiveHistory]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(255)='',
	@p_ID int = 0,
	@p_UserID int = 0,
	@p_AttributeID int = 0,
	@p_Type nvarchar(MAX) = '',
	@p_DateFrom datetime,
	@p_DateTo datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT ua.[ID]
			  ,ua.[Path]
			  ,ua.[Type]
			  ,ua.[CreatedDate]
			  ,ua.[CreatedByUserID]
		FROM [dbo].[UserActiveHistory] ua
		where @p_ID=0 or ua.[ID]=@p_ID
		order by ua.[CreatedDate] desc
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		SELECT ua.[ID]
			  ,ua.[Path]
			  ,ua.[Type]
			  ,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayUserName
			  ,(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayUserName
			  ,ua.[CreatedDate]
			  ,ua.[CreatedByUserID]
			  ,ua.[AttributeID]			  
			  ,a.Value as CashDeskName
		FROM [dbo].[UserActiveHistory] ua
		left join dbo.Users u on u.[ID]=ua.[CreatedByUserID]
		left join dbo.Attributes a on a.[ID]=ua.[AttributeID]
		join (select * from dbo.tf_ParserStrTo1Varchar150(@p_Type,'|')) as ty ON (@p_Type='-1' or ty.Val1 = ua.[Type])
		where (@p_ID=0 or ua.[ID]=@p_ID) and
		      (@p_UserID=0 or ua.[CreatedByUserID]=@p_UserID) and 
			  (@p_AttributeID=0 or ua.AttributeID=@p_AttributeID) and 
			  (@p_Search='' or ua.[Path] like '%' + @p_search +'%') 
			  and
			  (CONVERT(date, ua.[CreatedDate]) between @p_DateFrom and @p_DateTo)	
			  order by ua.[CreatedDate] desc
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetUserActiveHistoryFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUserActiveHistoryFilters]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	DECLARE
		--Out Variables
		@p_UserID nvarchar(MAX) = '',
		@p_CashDesc nvarchar(MAX) = '',
		@p_Type nvarchar(MAX) = ''

	--CashDesc
-------------------------------------------------------------------
	SELECT
		@p_CashDesc = CONCAT(@p_CashDesc,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[AttributeID] as [ID]
					,u.[Value] as [Value]
				FROM [dbo].[UserActiveHistory] p
					inner join dbo.[Attributes] u on u.[ID] = p.[AttributeID]
		) as Temp
		ORDER by Temp.[ID],Temp.[Value]
	IF LEN(@p_CashDesc) > 2 SET @p_CashDesc = SUBSTRING(@p_CashDesc,1, LEN(@p_CashDesc)-1) ELSE SET @p_CashDesc = NULL

	--Type
-------------------------------------------------------------------
	SELECT
		@p_Type = CONCAT(@p_Type,LTRIM(RTRIM([Value])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[Type] as [Value]
				FROM [dbo].[UserActiveHistory] p
				WHERE p.[Type] IS NOT NULL
		) as Temp
	IF LEN(@p_Type) > 2 SET @p_Type = SUBSTRING(@p_Type,1, LEN(@p_Type)-1) ELSE SET @p_Type = NULL

	--UserID
-------------------------------------------------------------------
	SELECT
		@p_UserID = CONCAT(@p_UserID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					p.[CreatedByUserID] as [ID]
					,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
				FROM [dbo].[UserActiveHistory] p
					left join Users u on u.ID = p.[CreatedByUserID]
		) as Temp
		ORDER by Temp.[ID],Temp.[Value]
	IF LEN(@p_UserID) > 2 SET @p_UserID = SUBSTRING(@p_UserID,1, LEN(@p_UserID)-1) ELSE SET @p_UserID = NULL

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_CashDesc as [CashDesc],
			@p_Type as [Type],
			@p_UserID as [UserID]
END




--@p_KeyValue nvarchar(MAX) = '',
--@p_StringValue nvarchar(MAX) = '',
--@p_Numrows int = 0,
--DECLARE @TempTableUserActiveHistory table(
--	[Id] NVARCHAR(MAX),
--	[Value] NVARCHAR(MAX)
--)

----CashDesc
---------------------------------------------------------------------
--	INSERT INTO @TempTableUserActiveHistory
--	SELECT DISTINCT
--		ua.[AttributeID] as [Id]
--		,a.[Value] as [Value]
--	FROM [dbo].[UserActiveHistory] ua
--		left join dbo.Attributes a on ua.[AttributeID]=a.[ID]
--	SELECT @p_Numrows=COUNT(*) FROM @TempTableUserActiveHistory
--	WHILE @p_Numrows > 0
--	BEGIN
--		SELECT TOP 1 @p_KeyValue=Id, @p_StringValue=Value FROM @TempTableUserActiveHistory
--		IF @p_Numrows != 1
--			SET @p_CashDesc = CONCAT(@p_CashDesc,@p_KeyValue,':',@p_StringValue,'|')
--		ELSE
--			SET @p_CashDesc = CONCAT(@p_CashDesc,@p_KeyValue,':',@p_StringValue)
--		DELETE TOP (1) FROM @TempTableUserActiveHistory
--		SET @p_Numrows = @p_Numrows-1
--	END

----Type
---------------------------------------------------------------------
--	INSERT INTO @TempTableUserActiveHistory
--	SELECT DISTINCT
--		ua.[Type] as [Id]
--		,ua.[Type] as [Type]
--	FROM [dbo].[UserActiveHistory] ua
--	SELECT @p_Numrows=COUNT(*) FROM @TempTableUserActiveHistory
--	WHILE @p_Numrows > 0
--	BEGIN
--		SELECT TOP 1 @p_KeyValue=Id, @p_StringValue=Value FROM @TempTableUserActiveHistory
--		IF @p_Numrows != 1
--			SET @p_Type = CONCAT(@p_Type,@p_KeyValue,':',@p_KeyValue,'|')
--		ELSE
--			SET @p_Type = CONCAT(@p_Type,@p_KeyValue,':',@p_KeyValue)
--		DELETE TOP (1) FROM @TempTableUserActiveHistory
--		SET @p_Numrows = @p_Numrows-1
--	END

----UserID
---------------------------------------------------------------------
--	SELECT
--		@p_UserID = CONCAT(@p_UserID,[Id],':',[Value],'|')
--		FROM (
--				SELECT DISTINCT
--					ua.[CreatedByUserID] as [Id]
--					,Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as [Value]
--				FROM [dbo].[UserActiveHistory] ua
--					inner join dbo.Users u on u.[ID]=ua.[CreatedByUserID]
--		) as Temp
--	IF LEN(@p_UserID) > 0 SET @p_UserID = SUBSTRING(@p_UserID,1, LEN(@p_UserID)-1)

----Out Final Result
---------------------------------------------------------------------
--	SELECT @p_CashDesc as [CashDesc], @p_Type as [Type], @p_UserID as [UserID]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetUserActiveHistorySummary '', 'All', 'All', 'All', '03-03-2019 0:00:00', '03-03-2021 23:59:59', '00:00:00', '23:59:59'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUserActiveHistorySummary]
	@p_search nvarchar(40)='',

	@p_CreatedByUserID nvarchar(MAX)='',	
	@p_CashDesk nvarchar(MAX)='',
	@p_Type nvarchar(MAX)='',

	@p_DateFrom datetime,
	@p_DateTo datetime,

	@p_TimeFrom time,
	@p_TimeTo time
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	--SET STATISTICS TIME ON;

	if (@p_Type = '' or @p_CashDesk = '' or @p_CreatedByUserID = '')
		return

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;	

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)	

	declare @TimeFrom_string nvarchar(40) = CONVERT(nvarchar, @p_TimeFrom, 108)
	declare @TimeTo_string nvarchar(40) = CONVERT(nvarchar, @p_TimeTo, 108)	

	set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
	set @p_search_string='%' + @p_search + '%'

	declare @p_search_type nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''
	declare @p_search_cashdesk nvarchar(MAX) = ''

	declare @p_search_timeout nvarchar(MAX) = ''	
	declare @p_filter_request nvarchar(MAX) = ''			
		
	set @p_Type = REPLACE(@p_Type, '|', ',')
	set @p_CashDesk = REPLACE(@p_CashDesk, '|', ',')
	set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')

	if (@DateFrom_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
		set @p_filter_request =  		
			'(
				CONVERT(date, s.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
			)'
	end

	if (@TimeFrom_string != '00:00:00' OR @TimeTo_string != '23:59:59')
	begin
		if (@p_filter_request !='')
			set @p_filter_request =	@p_filter_request + ' AND '

		set @p_filter_request = @p_filter_request +
			'(
				CAST(s.[CreatedDate] as time(0)) between ''' + @TimeFrom_string  + ''' and ''' + @TimeTo_string + '''				
			)'
	end

	declare @p_search_request nvarchar(MAX) = ''
	if (@p_search != '')
		set @p_search_request = ' and 
		(
			(
				(
					CAST(s.[Path] as nvarchar(40)) like ''' + @p_search_string + '''
				)				
			)
		)'

	set @p_search_request = @p_filter_request + @p_search_request 

	if (@p_Type != 'All')
		set @p_search_type =  ' and s.[Type] in (' + @p_Type + ') ' ;
	if (@p_CashDesk != 'All')
		set @p_search_cashdesk = ' and s.[AttributeID] in (' + @p_CashDesk + ') ' ;
	if (@p_CreatedByUserID != 'All') 
		set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;

	set @p_search_request = @p_search_request  + @p_search_type + @p_search_cashdesk + @p_search_createdByUserID
		
	declare @end_request nvarchar(max) = ''	

	set @end_request =  'SELECT 
							COUNT(s.[ID]) as CountID
						from [dbo].[UserActiveHistory] as s where '
						+ @p_search_request		
	
	--print @end_request
	EXECUTE (@end_request);	
								
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetUserActiveHistoryTable 'Grid', '', 0, 'All', 'All', 'All', '03-31-2019 0:00:00', '03-31-2020 23:59:59', '10:10:07', '22:10:07', 0, 140000, 'ID', 0
-- xp_GetUserActiveHistoryTable 'Grid', '', 0, 'All', 'All', 'All', '03-03-1990 0:00:00', '03-03-2020 00:00:00', '00:00:00', '11:10:07', 0, 140000, 'ID', 0
-- xp_GetUserActiveHistoryTable 'Item', '', 15718, 1023, 'All', 'All', 'All', '01-01-1753 0:00:00', '05-05-2020 13:39:15', '12:00:00', '14:00:00' 0 , 14, 1, 88, 0.01, 8010, 10, 11098736, 'ID', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUserActiveHistoryTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_search nvarchar(40)='',

	@p_ID int,
	
	@p_CreatedByUserID nvarchar(MAX)='',	
	@p_CashDesk nvarchar(MAX)='',
	@p_Type nvarchar(MAX)='',

	@p_DateFrom datetime,
	@p_DateTo datetime,

	@p_TimeFrom time,
	@p_TimeTo time,

	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,

	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;

	declare @p_search_money nvarchar(40)
	declare @p_search_string nvarchar(40)
	declare @p_order nvarchar(40)='ASC';
	declare @delimeter nvarchar(10)= '''|''';
	declare @filter_all nvarchar(10)= '''All''';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)

	declare @TimeFrom_string nvarchar(40) = CONVERT(nvarchar, @p_TimeFrom, 108)
	declare @TimeTo_string nvarchar(40) = CONVERT(nvarchar, @p_TimeTo, 108)

	declare @p_search_type nvarchar(MAX) = ''
	declare @p_search_createdByUserID nvarchar(MAX) = ''
	declare @p_search_cashdesk nvarchar(MAX) = ''

	declare @p_filter_request nvarchar(MAX) = ''			

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='Item' begin
		SELECT ua.[ID]
			  ,ua.[Path]
			  ,ua.[Type]
			  ,ua.[CreatedDate]
			  ,ua.[CreatedByUserID]
		FROM [dbo].[UserActiveHistory] ua
		where @p_ID=0 or ua.[ID]=@p_ID
		order by ua.[CreatedDate] desc
	end

	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		
		if (@p_Type = '' or @p_CashDesk = '' or @p_CreatedByUserID = '')
			return
		
		set @p_search_money = '%' + REPLACE(@p_search,',','') +'%'
		set @p_search_string='%' + @p_search + '%'

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;	

		set @p_Type = REPLACE(@p_Type, '|', ',')
		set @p_CashDesk = REPLACE(@p_CashDesk, '|', ',')
		set @p_CreatedByUserID = REPLACE(@p_CreatedByUserID, '|', ',')

		if (@DateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_filter_request =  		
				'(
					CONVERT(date, s.CreatedDate) between ''' + @DateFrom_string  + ''' and ''' + @DateTo_string + '''				
				)'
		end

		if (@TimeFrom_string != '00:00:00' OR @TimeTo_string != '23:59:59')
		begin
			if (@p_filter_request !='')
				set @p_filter_request =	@p_filter_request + ' and '

			set @p_filter_request = @p_filter_request +
				'(
					CAST(s.[CreatedDate] as time(0)) between ''' + @TimeFrom_string  + ''' and ''' + @TimeTo_string + '''				
				)'
		end
										
		declare @p_search_request nvarchar(MAX) = ''
		if (@p_search != '')
			set @p_search_request = ' and 
			(
				(
					(
						CAST(s.[Path] as nvarchar(40)) like ''' + @p_search_string + '''
					)				
				)
			)'

		set @p_search_request = @p_filter_request + @p_search_request 

		if (@p_Type != 'All')
			set @p_search_type =  ' and s.[Type] in (' + @p_Type + ') ' ;
		if (@p_CashDesk != 'All')
			set @p_search_cashdesk = ' and s.[AttributeID] in (' + @p_CashDesk + ') ' ;
		if (@p_CreatedByUserID != 'All') 
			set @p_search_createdByUserID = ' and s.[CreatedByUserID] in (' + @p_CreatedByUserID + ') ' ;

		set @p_search_request = @p_search_request  + @p_search_type + @p_search_cashdesk + @p_search_createdByUserID
		
		if(@p_SortColumn='DisplayUserName')
			set  @p_SortColumn='(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END)'
		else if(@p_SortColumn='CreatedTime')
			set @p_SortColumn='CAST(s.[CreatedDate] as time(0))'
		else if(@p_SortColumn='AttributeIDString')
			set @p_SortColumn='s.[AttributeID]'
		else
			set @p_SortColumn='s.'+@p_SortColumn

		declare @end_request nvarchar(max) = ''
		set @end_request = 
		'SELECT *
					FROM (
							SELECT
							  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber
							  ,s.[ID]
							  ,s.[Path]
							  ,s.[Type]
							  ,s.[CreatedDate]
							  ,CAST(s.[CreatedDate] as time(0)) as CreatedTime
							  ,s.[CreatedByUserID]
							  ,s.[AttributeID]
							  ,u.ID as UserID
							  ,a.[Value] as CashDeskName
							  ,Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayNameUser
							  ,(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayUserName
							FROM [dbo].[UserActiveHistory] s
								left join dbo.Users u on u.[ID]=s.[CreatedByUserID]
								left join dbo.Attributes a on s.[AttributeID]=a.[ID] where '
								+ @p_search_request
					+') AS st
					where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)					
		--print @end_request
		EXECUTE (@end_request);
	end
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- xp_GetUsersWRKFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUsersWRKFilters]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare
		@p_Users nvarchar(MAX)=''

	--Users
-------------------------------------------------------------------
		SELECT
			@p_Users = CONCAT(@p_Users,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
			FROM (
					SELECT DISTINCT
						p.[UserID] as [ID]
						,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
					FROM [dbo].[UsersWRK] p
						inner join Users u on u.ID = p.[UserID]
			) as Temp
			ORDER by Temp.[ID],Temp.[Value]
		IF LEN(@p_Users) > 2 SET @p_Users = SUBSTRING(@p_Users,1, LEN(@p_Users)-1) ELSE SET @p_Users = NULL

		--Out Final Result
-------------------------------------------------------------------
		SELECT @p_Users as [UserID]

	--select (select STUFF ((select '|'+CAST([UserID] AS nvarchar)+':'+Concat(u.LastName,' ',u.FirstName,' ',u.SecondName)
	--				from [dbo].[UsersWRK] WVRR 
	--				inner join dbo.[Users] u on u.ID=WVRR.[UserID]
	--				group by [UserID], u.LastName,u.FirstName,u.SecondName
	--				FOR XML PATH ('')
	--			),1,1,'')) as UserID
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetUserWRK 15, '20200315', '20200318'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUserWRK]
	@p_UserID int,
	@p_FromDate date,
	@p_ToDate date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	;with cteZ
	as (
		select 
			w.UserID,
			DtAdd, 
			w.[Type]
		from dbo.UsersWRK w
		where (@p_UserID = 0 or w.UserID = @p_UserID) and
			CONVERT(date, w.DtAdd) between @p_FromDate and @p_ToDate
	)
	select
		zz.id,
		zz.UserID,
		zz.RoleID,
		zz.DisplayUserName,
		zz.ShortDisplayUserName,		
		zz.DtAdd,
		zz.MinDtAdd,
		zz.MaxDtAdd,
		datediff(MINUTE, zz.MinDtAdd, zz.MaxDtAdd) diff

	from (  select 
				u.id,
				z.UserID,
				u.RoleID,
				Concat(u.LastName,' ',u.FirstName,' ',u.SecondName) as DisplayUserName,
				(SELECT CASE WHEN isnull(u.LastName,'') = '' THEN '' ELSE case when isnull(u.FirstName,'') = '' then u.LastName else u.LastName + ' ' + SUBSTRING(u.FirstName, 1, 1) + '.' + SUBSTRING(u.SecondName, 1, 1) + '.' END END) as ShortDisplayUserName,
				z.DtAdd,
				(select min(m.DtAdd) from cteZ m where m.[Type]=1 and m.UserID=z.UserID and convert(date,m.DtAdd)=z.DtAdd)  MinDtAdd ,
				(select max(m.DtAdd) from cteZ M where M.[Type]=2 and M.UserID=z.UserID and convert(date,M.DtAdd)=z.DtAdd)  MaxDtAdd 
			from (select distinct convert(date,DtAdd) DtAdd, UserID from cteZ) z
				inner join dbo.Users u on z.UserID=u.ID) zz
	order by zz.DtAdd DESC, zz.id


	--select 
	--	u.id,
	--	u.RoleID,
	--	u.FirstName + case when isnull(u.LastName,'')!='' then ', ' + u.LastName else '' end as  DisplayName,
	--	G.DtAdd,
	--	G.MinDtAdd,
	--	G.MaxDtAdd,
	--	G.diff
	--from dbo.Users u
	--	inner join (select 
	--					w.UserID,
	--					convert(date,DtAdd) DtAdd, 
	--					min(w.DtAdd) MinDtAdd,
	--					max(w.DtAdd) MaxDtAdd,
	--					datediff(MINUTE, min(w.DtAdd), max(w.DtAdd)) diff
	--				from dbo.UsersWRK w
	--				where (@p_UserID = 0 or w.UserID = @p_UserID) and
	--				CONVERT(date, w.DtAdd) between @p_FromDate and @p_ToDate
	--				group by w.UserID, convert(date,DtAdd)) G on G.UserID = u.ID

	--order by G.DtAdd, u.id
END


--select * from UsersWRK 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [xp_GetUserWrkDetails] 15,'20190927 00:00:00','20190928 00:00:00'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUserWrkDetails]
	@p_UserID int,
	@p_DtStart datetime,
	@p_DtEnd datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select 
		z.ID,
		ROW_NUMBER() over (order by z.dt) RowNumber,
		z.dt,
		case when z.[Type]=z.Type_Next then null else z.dt_Next end dt_Next,
		case when z.[Type]=z.Type_Next then null else datediff(minute, z.dt, z.dt_Next) end diff
		--,z.[Type], z.Type_Next
	from (
			select 
				w.ID,
				w.[DtAdd] dt,
				w.[Type],
				LEAD(w.[DtAdd],1, null) over (ORDER BY w.[DtAdd]) dt_Next,
				LEAD(w.[Type], 1, null) over (ORDER BY w.[DtAdd]) Type_Next
			from dbo.UsersWRK w
			where w.UserID=@p_UserID and w.DtAdd between @p_DtStart and @p_DtEnd) Z
	where z.[Type]=1 --and (z.Type_Next is null or z.Type_Next=2)  
	order by z.dt

END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetUserWRKSummary '15', '10-23-2008 15:13:39', '10-23-2020 15:13:39'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUserWRKSummary]
	-- Add the parameters for the stored procedure here
	@p_UserID nvarchar(MAX)='',
	@p_FromDate date,
	@p_ToDate date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from

	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @p_filter_request nvarchar(MAX) = '',
			@p_search_User	nvarchar(MAX) = '',
			@end_request nvarchar(max) = ''	,
			@p_search_request nvarchar(MAX) = ''

	if (@p_UserID = '')
		return

	declare @delimeter nvarchar(10)= '''|''';

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_FromDate, 120)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_ToDate, 102)
	
	declare @p_request_Date nvarchar(MAX)=''
	declare @p_search_UserID nvarchar(MAX) = ''
	
	set @p_UserID = REPLACE(@p_UserID, '|', ',')		

	if (@p_UserID != 'All')
		set @p_search_UserID = ' and w.[UserID] in (' + @p_UserID + ') ' ;

	if (@DateFrom_string!='1753-01-01 00:00:10')	
	begin
		set	@DateFrom_string = CONVERT(nvarchar, @p_FromDate, 102)
		set @p_request_Date =  		
			'(
				CONVERT(date, w.DtAdd) between ''' + CAST(CONVERT(date, @p_FromDate) AS nvarchar) + ''' and ''' + CAST(CONVERT(date, @p_ToDate) AS nvarchar) + '''
			)'
	end
		
	set @p_search_request = ' where ' + @p_request_Date + @p_search_UserID

	set @end_request = '
		with cteZ as (
			select 
				w.UserID,
				DtAdd, 
				w.[Type]
			from dbo.UsersWRK w ' 
				+ @p_search_request +
		')
		SELECT *
					FROM (
							SELECT
									COUNT(*) as CountID
								from (
										select 
											u.ID,
											z.UserID,
											u.RoleID,
											Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayUserName,
											(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayUserName,
											z.DtAdd,
											(select min(m.DtAdd) from cteZ m where m.[Type]=1 and m.UserID=z.UserID and convert(date,m.DtAdd)=z.DtAdd)  MinDtAdd ,
											(select max(m.DtAdd) from cteZ M where M.[Type]=2 and M.UserID=z.UserID and convert(date,M.DtAdd)=z.DtAdd)  MaxDtAdd 
										from (
												select distinct
													convert(date,DtAdd) DtAdd,
													UserID
												from cteZ
												) z
											inner join dbo.Users u on z.UserID=u.ID
									) zz'
					+') AS st'


	--print @end_request
	EXECUTE (@end_request);	
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_GetUserWRKTable 'grid', '15|1472|1471|1470|', '2014-03-10 00:00:00.000', '2020-03-22 22:22:22.000', 0, 20, 'DtAdd', 1
-- xp_GetUserWRKTable 'grid', 'All', '2014-03-15 00:00:00.000', '2020-03-22 22:22:22.000', 0, 20, 'DtAdd', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetUserWRKTable] 
	@p_TypeScreen varchar(40), --Item, Grid, InGrid, Filter
	@p_UserID nvarchar(MAX)='',
	@p_DateFrom datetime,
	@p_DateTo datetime,
	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @delimeter varchar(40)= '''|''';
	declare @p_order nvarchar(40)='ASC';
	declare @p_MaxValue int = 0;
	declare @p_MinValue int = 0;

	declare @DateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_DateFrom, 120)
	declare @DateTo_string nvarchar(40) = CONVERT(nvarchar, @p_DateTo, 102)
	declare @p_request_Date nvarchar(MAX)=''
	declare @p_search_request nvarchar(MAX) = ''

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

		if (@p_UserID = '')
			return		

		if @p_Sort=1 begin
			set @p_order='DESC';
		end

		set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1;
		set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount;
		
		set @p_UserID = REPLACE(@p_UserID, '|', ',')

		declare @p_search_UserID nvarchar(MAX) = ''

		if (@p_UserID != 'All')
			set @p_search_UserID = ' and w.[UserID] in (' + @p_UserID + ') ' 
		
		set @p_SortColumn='zz.'+@p_SortColumn

		if (@DateFrom_string!='1753-01-01 00:00:10')	
		begin
			set	@DateFrom_string = CONVERT(nvarchar, @p_DateFrom, 102)
			set @p_request_Date =  		
				'(
					CONVERT(date, w.DtAdd) between ''' + CAST(CONVERT(date, @p_DateFrom) AS nvarchar) + ''' and ''' + CAST(CONVERT(date, @p_DateTo) AS nvarchar) + '''
				)'
		end

		set @p_search_request = ' where ' + @p_request_Date + @p_search_UserID

		declare @end_request nvarchar(max) = ''
		set @end_request = '
			with cteZ as (
				select 
					w.UserID,
					DtAdd, 
					w.[Type]
				from dbo.UsersWRK w '
					+ @p_search_request +
			')

			SELECT *
						FROM (
							   SELECT
								   ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' ' + @p_order + ') AS RowNumber,
										zz.ID,
										zz.UserID,
										zz.RoleID,
										zz.DisplayUserName,
										zz.ShortDisplayUserName,		
										zz.DtAdd,
										zz.MinDtAdd,
										zz.MaxDtAdd,
										datediff(MINUTE, zz.MinDtAdd, zz.MaxDtAdd) diff
									from (
											select 
												u.id,
												z.UserID,
												u.RoleID,
												Concat(u.LastName,'' '',u.FirstName,'' '',u.SecondName) as DisplayUserName,
												(SELECT CASE WHEN isnull(u.LastName,'''') = '''' THEN '''' ELSE case when isnull(u.FirstName,'''') = '''' then u.LastName else u.LastName + '' '' + SUBSTRING(u.FirstName, 1, 1) + ''.'' + SUBSTRING(u.SecondName, 1, 1) + ''.'' END END) as ShortDisplayUserName,
												z.DtAdd,
												(select min(m.DtAdd) from cteZ m where m.[Type]=1 and m.UserID=z.UserID and convert(date,m.DtAdd)=z.DtAdd)  MinDtAdd ,
												(select max(m.DtAdd) from cteZ M where M.[Type]=2 and M.UserID=z.UserID and convert(date,M.DtAdd)=z.DtAdd)  MaxDtAdd 
											from (
													select distinct
														convert(date,DtAdd) DtAdd,
														UserID
													from cteZ
												 ) z
												inner join dbo.Users u on z.UserID=u.ID
										) zz'
						+') AS st
						where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'			

		--print @end_request
		EXECUTE (@end_request);
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetVendor 'Item', 0
-- xp_GetVendor 'Grid', 0
-- xp_GetVendor 'Name', 0, '555', '55555'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetVendor]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_ID int=0,
	@p_Serial nvarchar(40) = '',
	@p_Number nvarchar(40) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT u.[ID]
			  ,u.[Name]
			  ,u.[Address]
			  ,u.[Serial]
			  ,u.[Number]
			  ,u.[Issue]
			  ,u.[IssueDate]
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[Vendor] u
		WHERE u.ID=@p_ID 
	end
	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------
		SELECT u.[ID]
			  ,u.[Name]
			  ,u.[Address]
			  ,u.[Serial]
			  ,u.[Number]
			  ,u.[Issue]
			  ,u.[IssueDate]
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[Vendor] u
		ORDER BY u.[ID]
	end
	else if @p_TypeScreen in ('name') begin ---------------------------------------------------------------------
		SELECT TOP 1
			   u.[ID]
			  ,u.[Name]
			  ,u.[Address]
			  ,u.[Serial]
			  ,u.[Number]
			  ,u.[Issue]
			  ,u.[IssueDate]
			  ,u.[CreatedDate]
			  ,u.[LastModifiedDate]
			  ,u.[CreatedByUserID]
			  ,u.[LastModifiedByUserID]
		  FROM [dbo].[Vendor] u
		 WHERE u.[Serial]=@p_Serial and u.[Number]=@p_Number
		 ORDER BY u.[LastModifiedDate] DESC
	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

CREATE proc [dbo].[xp_GetVersions]
	@p_ID int
as begin
select * from Versions
order by id desc
end



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetWorkPinPadSummary 'All', 'All', 'All', 'All', '10.29.2020 0:00:10', '10.29.2020 17:17:31', '01.01.1783 0:00:10', '10.29.2020 17:17:07'
-- xp_GetWorkPinPadSummary '0'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetWorkPinPadSummary]
		@p_PosID nvarchar(MAX)=''
AS
BEGIN
	declare @end_request nvarchar(Max)
	declare @p_search_PosID nvarchar(MAX) = ''
	
	if (@p_PosID != 'All')
			set @p_search_PosID = ' where wpp.[PosID] = ''' + @p_PosID + '''' ;
	set @end_request = 'SELECT 
							COUNT(wpp.[ID]) as CountID
						from [dbo].[WorkPinPad] wpp '
						+ @p_search_PosID
	--select @end_request
	execute	sp_EXECUTEsql @end_request										
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, результирующая грида
-- =============================================
-- xp_GetWorkPinPadTable 0,'BFEBFBFF000906EAIntel(R) Core(TM) i7-8700 CPU @ 3.20GHzIntel64 Family 6 Model 158 Stepping 101073741824/GRQYKV2/CNWS2008BC00S0/',100000,'CreatedDate',1

-- =============================================
CREATE PROCEDURE [dbo].[xp_GetWorkPinPadTable]	
	@p_PageNumber int = 0,
	@p_PosID nvarchar(MAX)='',
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;		

	declare @p_order nvarchar(40)='ASC'

	declare @p_MinValue int
	declare @p_MaxValue int
		
	declare @end_request nvarchar(max) = ''		
	declare @p_search_PosID nvarchar(MAX) = ''
	if @p_Sort=1 
	begin
			set @p_order='DESC'
	end	
	
	if (@p_PosID != 'All')	
			set @p_search_PosID = ' where wpp.[PosID] = ''' + @p_PosID + ''''
	if(@p_SortColumn='ShortNameOpeningUser')
			set  @p_SortColumn='(Concat(ou.LastName,'' '',ou.FirstName,'' '',ou.SecondName)) '

	set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1
	set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount

	set @end_request = ' Select *  from  (SELECT 
										  ROW_NUMBER() OVER (order by wpp.'+ @p_SortColumn + ' '+@p_order+') AS RowNumber
										  ,wpp.[ID]
										  ,wpp.[PosID]
										  ,wpp.[Status]
										  ,wpp.[CreatedDate]
										  ,wpp.[CreatedByUserID]			  
										   ,(SELECT CASE WHEN isnull(ou.LastName,'''') = '''' THEN '''' ELSE case when isnull(ou.FirstName,'''') = '''' then ou.LastName else ou.LastName + '' '' + SUBSTRING(ou.FirstName, 1, 1) + ''.'' + SUBSTRING(ou.SecondName, 1, 1) + ''.'' END END) as ShortNameOpeningUser														 			  
									  FROM [dbo].[WorkPinPad] wpp
									  left join dbo.Users ou on ou.[ID]=wpp.[CreatedByUserID]  '
								+ @p_search_PosID +') AS st
									 where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'	
		    --select @end_request
			EXECUTE (@end_request);		
		
END
--select * from [dbo].[WorkShift] 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Переоценка продукции, сборка фильтров
-- =============================================
-- xp_GetWorkShiftFilters
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetWorkShiftFilters]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SET STATISTICS TIME ON;
	declare
		--Out Variables
		@p_OpeningUserID nvarchar(MAX) = '',
		@p_ClosingUserID nvarchar(MAX) = '',
		@p_DisplayPosName nvarchar(MAX) = ''

	--OpeningUserID
-------------------------------------------------------------------
	SELECT
		@p_OpeningUserID = CONCAT(@p_OpeningUserID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ws.[OpeningUser] as [ID]
					,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
				FROM [dbo].[WorkShift] ws
					left join Users u on u.ID = ws.OpeningUser
		) as Temp
		ORDER by Temp.[ID],Temp.[Value]
	IF LEN(@p_OpeningUserID) > 2 SET @p_OpeningUserID = SUBSTRING(@p_OpeningUserID,1, LEN(@p_OpeningUserID)-1) ELSE SET @p_OpeningUserID = NULL


	--ClosingUserID
-------------------------------------------------------------------
	SELECT
		@p_ClosingUserID = CONCAT(@p_ClosingUserID,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ws.[ClosingUser] as [ID]
					,u.[LastName]+' '+u.[FirstName]+' '+u.[SecondName] as [Value]
				FROM [dbo].[WorkShift] ws
					left join Users u on u.ID = ws.ClosingUser
		) as Temp
		ORDER by Temp.[ID],Temp.[Value]
	IF LEN(@p_ClosingUserID) > 2 SET @p_ClosingUserID = SUBSTRING(@p_ClosingUserID,1, LEN(@p_ClosingUserID)-1) ELSE SET @p_ClosingUserID = NULL


	--DisplayPosName
-------------------------------------------------------------------
	SELECT
		@p_DisplayPosName = CONCAT(@p_DisplayPosName,LTRIM(RTRIM([ID])),':',LTRIM(RTRIM([Value])),'|')
		FROM (
				SELECT DISTINCT
					ws.[PosID] as [ID]
					,at.[Value] as [Value]
				FROM [dbo].[WorkShift] ws
					left join dbo.[Attributes] at on at.[ID]=ws.[PosID]
		) as Temp
		ORDER by Temp.[ID],Temp.[Value]
	IF LEN(@p_DisplayPosName) > 2 SET @p_DisplayPosName = SUBSTRING(@p_DisplayPosName,1, LEN(@p_DisplayPosName)-1) ELSE SET @p_DisplayPosName = NULL

	--Out Final Result
-------------------------------------------------------------------
	SELECT
			@p_OpeningUserID as [OpeningUsersID],
			@p_ClosingUserID as [ClosingUsersID],
			@p_DisplayPosName as [DisplayPosName]
			
END
--select * from [dbo].[WorkShift]
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_GetWorkShiftSummary 'All', 'All', 'All', 'All', '01.01.1753 0:00:10', '10.29.2020 17:17:31', '01.01.1753 0:00:10', '10.29.2020 17:17:07'
-- xp_GetWorkShiftSummary '2467', 'All', 'All', 'All', '10.01.2020 0:00:10', '10.28.2021 17:17:31', '01.01.1753 0:00:10', '10.28.2021 17:17:07'
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetWorkShiftSummary]
	@p_PosID  nvarchar(MAX)='',
	@p_WorkShiftID  nvarchar(MAX)='',
	@p_OpeningUser  nvarchar(MAX)='',
	@p_ClosingUser  nvarchar(MAX)='',
	@p_OpeningDateFrom datetime,
	@p_OpeningDateTo datetime,
	@p_ClosingDateFrom datetime = null,
	@p_ClosingDateTo datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	--SET STATISTICS TIME ON;
	declare @p_search_PosID nvarchar(40)=''
	declare @p_search_WorkShiftID nvarchar(40)=''
	declare @p_search_OpeningUser nvarchar(40)=''
	declare @p_search_ClosingUser nvarchar(40)=''
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''
	declare @p_MaxValue int = 0
	declare @p_MinValue int = 0

	declare @OpeningDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_OpeningDateFrom, 120)
	declare @OpeningDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_OpeningDateTo, 120)
	declare @ClosingDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_ClosingDateFrom, 120)
	declare @ClosingDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_ClosingDateTo, 120)

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_DateFrom nvarchar(MAX) = ''	
	declare @p_filter_request_ClosingDate nvarchar(MAX) = ''
	declare @end_requestDeclare nvarchar(max) = ''		
	declare @end_request nvarchar(max) = ''	

	set @p_PosID = REPLACE(@p_PosID, '|', ',')
	set @p_WorkShiftID = REPLACE(@p_WorkShiftID, '|', ',')
	set @p_OpeningUser = REPLACE(@p_OpeningUser, '|', ',')
	set @p_ClosingUser = REPLACE(@p_ClosingUser, '|', ',')

	if (@p_OpeningUser = '' or @p_ClosingUser= '' or @p_OpeningDateFrom= ''or @p_OpeningDateTo= ''or @p_ClosingDateFrom= ''or @p_ClosingDateTo= '') begin				
				return
	end

	if (@OpeningDateFrom_string!='1753-01-01 00:00:10')begin
		set @p_filter_request_DateFrom = 
							'(					
								  CONVERT(nvarchar, ws.[OpeningDate], 23)  between '''+ CONVERT(nvarchar, @p_OpeningDateFrom, 23) + ''' and ''' + @OpeningDateTo_string + '''
							 )'	
		end
	if (@ClosingDateFrom_string!='1753-01-01 00:00:10')begin
		set @p_filter_request_ClosingDate = 
						'(							
								( CONVERT(nvarchar, ws.[ClosingDate], 23) is null ) or
								(CONVERT(nvarchar, ws.[ClosingDate], 23) between '''+CONVERT(nvarchar, @p_ClosingDateFrom, 23)+''' and '''+@ClosingDateTo_string+''') 							
						)'	
	end
	if (@p_filter_request_DateFrom!='' and @p_filter_request_ClosingDate!='')begin
			set @p_filter_request = @p_filter_request_DateFrom +' and '+ @p_filter_request_ClosingDate
		end
		if (@p_filter_request_DateFrom!='' and @p_filter_request_ClosingDate='')begin
			set @p_filter_request = @p_filter_request_DateFrom
		end
		if (@p_filter_request_DateFrom='' and @p_filter_request_ClosingDate!='')begin
			set @p_filter_request = @p_filter_request_ClosingDate
		end
	declare @p_search_request nvarchar(MAX) = ''

	if (@p_PosID != 'All')begin						
		set @p_search_PosID = ' and ws.[PosID] in (' + @p_PosID + ')'	
	end

	if (@p_WorkShiftID != 'All') begin			
		set @p_search_WorkShiftID = ' and ws.[WorkShiftID] in (' + @p_WorkShiftID + ')'		
	end	

	if (@p_OpeningUser != 'All') begin 			
		set @p_search_OpeningUser = ' and ws.[OpeningUser] in (' + @p_OpeningUser + ')'				
	end

	if (@p_ClosingUser != 'All') begin			
		set @p_search_ClosingUser = ' and ws.[ClosingUser] in (' + @p_ClosingUser + ')'
	end

	set @p_filter_request = @p_filter_request + @p_search_PosID + @p_search_WorkShiftID + @p_search_OpeningUser+@p_search_ClosingUser

	if(@p_filter_request != '')
		set @p_filter_request = ' where ' + @p_filter_request
   
	set @end_requestDeclare = '
						Declare 
						@p_SummaryQuantityLine int =0,
						--Приход
						@p_ComingSummaryCash money = 0,
						@p_ComingSummaryNonCash money = 0,
						@p_ComingSummaryCertificate money = 0,
						@p_ComingSummaryPrepayment money = 0,
						@p_ComingSummaryGold money = 0,
						@p_ComingSummaryCredit money = 0,
						@p_ComingSummaryTotal money = 0,
						--Расход					
						@p_ExpenditureSummaryCash money = 0,
						@p_ExpenditureSummaryNonCash money = 0,
						@p_ExpenditureSummaryCertificate money = 0,
						@p_ExpenditureSummaryPrepayment money = 0,
						@p_ExpenditureSummaryGold money = 0,
						@p_ExpenditureSummaryCredit money = 0,
						@p_ExpenditureSummaryTotal money = 0,	
						--Покупка					
						@p_BuySummaryCash money = 0,
						@p_BuySummaryNonCash money = 0,
						@p_BuySummaryCertificate money = 0,
						@p_BuySummaryPrepayment money = 0,
						@p_BuySummaryGold money = 0,
						@p_BuySummaryCredit money = 0,
						@p_BuySummaryTotal money = 0,						
						--Возврат					
						@p_ReturnSummaryCash money = 0,
						@p_ReturnSummaryNonCash money = 0,
						@p_ReturnSummaryCertificate money = 0,
						@p_ReturnSummaryPrepayment money = 0,
						@p_ReturnSummaryGold money = 0,
						@p_ReturnSummaryCredit money = 0,
						@p_ReturnSummaryTotal money = 0,	
					
						--Выручка				
						@p_ProceedsSummaryCash money = 0,
						@p_ProceedsSummaryNonCash money = 0,
						@p_ProceedsSummaryCertificate money = 0,
						@p_ProceedsSummaryPrepayment money = 0,
						@p_ProceedsSummaryGold money = 0,
						@p_ProceedsSummaryCredit money = 0,
						@p_ProceedsSummaryTotal money = 0,	
						--Работа с кассой				
						@p_SummarychangeFund money = 0,
						@p_SummaryEncashment money = 0,	
						--ИТОГО ИТОГО								
						@p_SummaryTotal money = 0
							
							CREATE TABLE #WorkShift(								
								[ID] int,
								[Amount] money,
								[OperationType] int,
								[PaymentType] int
							)
							
							INSERT INTO #WorkShift(
								[ID],
								[Amount],
								[OperationType],
								[PaymentType]
							)
							SELECT
								ws.[ID],
								pd.Amount,
								pd.OperationType,
								pd.PaymentType
							FROM [dbo].[WorkShift] ws
								inner join [PaymentsDetails] pd on pd.WorkShiftID = ws.ID  and pd.PosID=ws.PosID
							'+ @p_filter_request

		set @end_request = 'Select @p_SummaryQuantityLine = COUNT(Distinct ID) from #WorkShift						
							
							SELECT @p_ComingSummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 0 and OperationType = 4				
							SELECT @p_ComingSummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 1 and OperationType = 4
							SELECT @p_ComingSummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 2 and OperationType = 4				
							SELECT @p_ComingSummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 3 and OperationType = 4				
							SELECT @p_ComingSummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 4 and OperationType = 4				
							SELECT @p_ComingSummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 5 and OperationType = 4
							SELECT @p_ComingSummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE OperationType = 4												
				
							SELECT @p_ExpenditureSummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 0 and OperationType in (3,5)				
							SELECT @p_ExpenditureSummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 1 and OperationType in (3,5)				
							SELECT @p_ExpenditureSummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 2 and OperationType in (3,5)				
							SELECT @p_ExpenditureSummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 3 and OperationType in (3,5)			
							SELECT @p_ExpenditureSummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 4 and OperationType in (3,5)				
							SELECT @p_ExpenditureSummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 5 and OperationType in (3,5)				
							SELECT @p_ExpenditureSummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE  OperationType in (3,5)								
				
							SELECT @p_BuySummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 0 and OperationType in (3)				
							SELECT @p_BuySummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 1 and OperationType in (3)				
							SELECT @p_BuySummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 2 and OperationType in (3)				
							SELECT @p_BuySummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 3 and OperationType in (3)			
							SELECT @p_BuySummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 4 and OperationType in (3)				
							SELECT @p_BuySummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 5 and OperationType in (3)				
							SELECT @p_BuySummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE  OperationType in (3)
				
							SELECT @p_ReturnSummaryCash =IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 0 and OperationType in (5)				
							SELECT @p_ReturnSummaryNonCash = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 1 and OperationType in (5)				
							SELECT @p_ReturnSummaryCertificate = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 2 and OperationType in (5)				
							SELECT @p_ReturnSummaryPrepayment = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 3 and OperationType in (5)			
							SELECT @p_ReturnSummaryGold = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 4 and OperationType in (5)				
							SELECT @p_ReturnSummaryCredit = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE PaymentType = 5 and OperationType in (5)				
							SELECT @p_ReturnSummaryTotal = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE  OperationType in (5)			

							set @p_ProceedsSummaryCash =@p_ComingSummaryCash + @p_ExpenditureSummaryCash
							set @p_ProceedsSummaryNonCash =@p_ComingSummaryNonCash + @p_ExpenditureSummaryNonCash
							set @p_ProceedsSummaryCertificate =@p_ComingSummaryCertificate + @p_ExpenditureSummaryCertificate
							set @p_ProceedsSummaryPrepayment =@p_ComingSummaryPrepayment + @p_ExpenditureSummaryPrepayment
							set @p_ProceedsSummaryGold =@p_ComingSummaryGold + @p_ExpenditureSummaryGold
							set @p_ProceedsSummaryCredit =@p_ComingSummaryCredit + @p_ExpenditureSummaryCredit			
							set @p_ProceedsSummaryTotal =ABS(@p_ComingSummaryTotal) - ABS(@p_ExpenditureSummaryTotal) - ABS(@p_ComingSummaryCertificate)-ABS(@p_ComingSummaryPrepayment)- ABS(@p_ComingSummaryCredit)							
				
							--РАБОТА С КАССОЙ
							--Работа с кассой (внесение разменного фонда)
							SELECT @p_SummarychangeFund = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE OperationType = 1
							-- Работа с кассой (инкассация)
							SELECT @p_SummaryEncashment = IsNull(Sum(IsNull([Amount],0)),0)
							FROM #WorkShift WHERE OperationType = 2								
							--ИТОГО ИТОГО
							set @p_SummaryTotal=ABS(@p_ProceedsSummaryCash)+ABS(@p_SummarychangeFund)-ABS(@p_SummaryEncashment)

							SELECT	
								@p_SummaryQuantityLine as SummaryQuantityLine,					
								@p_ComingSummaryCash as ComingSummaryCash,
								@p_ComingSummaryNonCash as ComingSummaryNonCash,
								@p_ComingSummaryCertificate as ComingSummaryCertificate,
								@p_ComingSummaryPrepayment as ComingSummaryPrepayment,
								@p_ComingSummaryGold as ComingSummaryGold,	
								@p_ComingSummaryCredit as ComingSummaryCredit,	
								@p_ComingSummaryTotal as ComingSummaryTotal,
					
								@p_ExpenditureSummaryCash as ExpenditureSummaryCash,
								@p_ExpenditureSummaryNonCash as ExpenditureSummaryNonCash,
								@p_ExpenditureSummaryCertificate as ExpenditureSummaryCertificate,
								@p_ExpenditureSummaryPrepayment as ExpenditureSummaryPrepayment,
								@p_ExpenditureSummaryGold as ExpenditureSummaryGold,
								@p_ExpenditureSummaryCredit as ExpenditureSummaryCredit,
								@p_ExpenditureSummaryTotal as ExpenditureSummaryTotal,
					
								@p_BuySummaryCash as BuySummaryCash,
								@p_BuySummaryNonCash as BuySummaryNonCash,
								@p_BuySummaryCertificate as EBuySummaryCertificate,
								@p_BuySummaryPrepayment as BuySummaryPrepayment,
								@p_BuySummaryGold as BuySummaryGold,
								@p_BuySummaryCredit as BuySummaryCredit,
								@p_BuySummaryTotal as BuySummaryTotal,
					
								@p_ReturnSummaryCash as ReturnSummaryCash,
								@p_ReturnSummaryNonCash as ReturnSummaryNonCash,
								@p_ReturnSummaryCertificate as ReturnSummaryCertificate,
								@p_ReturnSummaryPrepayment as ReturnSummaryPrepayment,
								@p_ReturnSummaryGold as ReturnSummaryGold,
								@p_ReturnSummaryCredit as ReturnSummaryCredit,
								@p_ReturnSummaryTotal as ReturnSummaryTotal,
					
								@p_ProceedsSummaryCash as ProceedsSummaryCash,
								@p_ProceedsSummaryNonCash as ProceedsSummaryNonCash,
								@p_ProceedsSummaryCertificate as ProceedsSummaryCertificate,	
								@p_ProceedsSummaryPrepayment as ProceedsSummaryPrepayment,
								@p_ProceedsSummaryGold as ProceedsSummaryGold,
								@p_ProceedsSummaryCredit as ProceedsSummaryCredit,
								@p_ProceedsSummaryTotal as ProceedsSummaryTotal,
					
								@p_SummarychangeFund as CashBoxSummarychangeFund,
								@p_SummaryEncashment as CashBoxSummaryEncashment,
								@p_SummaryTotal as SummaryTotal
							
							
							
							
							'
	
	-- Select * FROM [PaymentsDetails] WHERE PaymentType=4 ORDER BY CreatedDate DESC 
	-- xp_GetWorkShiftSummary 'All', 'All', 'All', 'All', '10.30.2020 0:00:00', '10.30.2020 22:17:31', '01.01.1753 0:00:10', '10.30.2020 22:17:07'
	-- xp_GetWorkShiftSummary 'All', 'All', 'All', 'All', '10.28.2020 0:00:10', '10.30.2020 22:17:31', '01.01.1783 0:00:10', '10.29.2020 22:17:07'
	-- xp_GetWorkShiftSummary 'All', 'All', 'All', 'All', '10.29.2020 0:00:10', '10.29.2020 22:17:31', '01.01.1783 0:00:10', '10.29.2020 22:17:07'
	-- xp_GetWorkShiftSummary 'All', 'All', 'All', 'All', '10.28.2020 0:00:10', '10.28.2020 17:17:31', '01.01.1783 0:00:10', '10.28.2020 17:17:07'
	-- xp_GetWorkShiftSummary 'All', 'All', 'All', 'All', '10.01.2020 0:00:10', '10.29.2020 17:17:31', '10.01.2020 0:00:10', '10.29.2020 17:17:07'
	-- xp_GetWorkShiftSummary 'All', 'All', 'All', 'All', '01.01.1783 0:00:10', '10.29.2020 17:17:31', '01.01.1783 0:00:10', '10.29.2020 17:17:07'
	-- Select @end_requestDeclare+@end_request
	EXECUTE (@end_requestDeclare+@end_request);
	-- execute	sp_EXECUTEsql @end_request
										
END


--SELECT 
							--	(Select COUNT(Distinct ID) from #WorkShift) as SummaryQuantityLine,																								 
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE OperationType=1) as SummarychangeFund,
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE OperationType=2) as SummaryEncashment,
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE OperationType=3) as SummaryReturn,
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE OperationType=4) as SummarySales,
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE PaymentType=0) as SummaryCash,
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE PaymentType=1 or PaymentType=2) as SummaryNonCash,
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE PaymentType=3) as SummaryGold,
							--	(SELECT IsNull(Sum([Amount]),0) FROM #WorkShift WHERE PaymentType=4) as SummaryCredit 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,> Поставки, результирующая грида
-- =============================================
-- xp_GetWorkShiftTable 'Grid', 0, 'All', 'All', 'All', 'All','01.01.1753 0:00:10', '10.21.2020 15:49:47', '01.01.1753 0:00:10', '10.21.2020 15:49:47',0,100000,'OpeningUser',1
-- xp_GetWorkShiftTable 'Grid',  0,'304', 'All', 'All', 'All', '01.01.1753 0:00:10', '10.20.2020 9:56:14', '01.01.1753 0:00:10', '10.20.2020 15:04:42',0,100,'OpeningDate',1
-- xp_GetWorkShiftTable 'Grid', 0, '304', 'All', 'All', 'All','10.01.2020 0:00:00', '10.21.2020 9:56:14', '01.01.1753 0:00:10', '10.21.2020 15:04:42',0,100000,'OpeningDate',1
-- xp_GetWorkShiftTable 'Grid',  0, 'All', 'All', '64|1470|1472|1474|1483|1529', 'All','01.01.1753 0:00:00', '10.20.2020 15:04:42', '01.01.1753 0:00:00', '10.20.2020 15:04:42',0,10000,'PosID',1
-- xp_GetWorkShiftTable 'Grid', 0, 'All', 'All', '15|1472', 'All','01.01.1753 0:00:10', '06.04.2020 11:53:41', '01.01.1753 0:00:10', '06.04.2020 11:53:41',1,10000,'PosID',1
-- xp_GetWorkShiftTable 'Grid', 0, 'All', 'All', 'All', 'All','10.21.2020 0:00:00', '10.21.2020 15:18:37', '01.01.1753 0:00:10', '10.21.2020 15:18:37',0,20,'OpeningDate',1
-- xp_GetWorkShiftTable 'Grid', 0, 'All', '19', 'All', 'All','10.21.2020 0:00:00', '10.21.2020 15:18:37', '01.01.1753 0:00:10', '10.21.2020 15:18:37',0,20,'OpeningDate',1

-- xp_GetWorkShiftTable 'child', 0, '2377', '19', 'All', 'All','10.21.2020 0:00:00', '10.21.2020 15:18:37', '01.01.1753 0:00:10', '10.21.2020 15:18:37',0,20,'OpeningDate',1
-- =============================================
CREATE PROCEDURE [dbo].[xp_GetWorkShiftTable]
	@p_TypeScreen varchar(10), --Item, Grid, InGrid
	@p_ID int=0,
	@p_PosID  nvarchar(MAX)='',
	@p_WorkShiftID  nvarchar(MAX)='',
	@p_OpeningUser  nvarchar(MAX)='',
	@p_ClosingUser  nvarchar(MAX)='',
	@p_OpeningDateFrom datetime,
	@p_OpeningDateTo datetime,
	@p_ClosingDateFrom datetime = null,
	@p_ClosingDateTo datetime,
	@p_PageNumber int = 0,
	@p_PagerowCount int = 0,
	@p_SortColumn nvarchar(MAX)='',
	@p_Sort bit = 0 -- 0=ASC, 1=DESC
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		

	declare @p_search_PosID nvarchar(MAX)=''
	declare @p_search_WorkShiftID nvarchar(MAX)=''
	declare @p_search_OpeningUser nvarchar(MAX)=''
	declare @p_search_ClosingUser nvarchar(MAX)=''
	declare @p_order nvarchar(40)='ASC'
	declare @delimeter nvarchar(10)= '''|'''
	declare @filter_all nvarchar(10)= '''All'''
	declare @p_MaxValue int = 0
	declare @p_MinValue int = 0

	declare @OpeningDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_OpeningDateFrom, 120)
	declare @OpeningDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_OpeningDateTo, 120)
	declare @ClosingDateFrom_string nvarchar(40) = CONVERT(nvarchar, @p_ClosingDateFrom, 120)
	declare @ClosingDateTo_string nvarchar(40) = CONVERT(nvarchar, @p_ClosingDateTo, 120)

	declare @p_filter_request nvarchar(MAX) = ''			
	declare @p_filter_request_DateFrom nvarchar(MAX) = ''	
	declare @p_filter_request_ClosingDate nvarchar(MAX) = ''		
	declare @end_request nvarchar(max) = ''	

	set @p_PosID = REPLACE(@p_PosID, '|', ',')
	set @p_WorkShiftID = REPLACE(@p_WorkShiftID, '|', ',')
	set @p_OpeningUser = REPLACE(@p_OpeningUser, '|', ',')
	set @p_ClosingUser = REPLACE(@p_ClosingUser, '|', ',')

	set @p_TypeScreen = LOWER(@p_TypeScreen)

	if @p_TypeScreen='item' begin
		SELECT ws.[ID]
			  ,ws.[PosID]
			  ,ws.[WorkShiftID]
			  ,ws.[OpeningDate]
			  ,ws.[OpeningUser]
			  ,ws.[ClosingDate]
			  ,ws.[ClosingUser]
			  ,at.[Value] as DisplayPosName
			  ,Concat(ou.LastName,' ',ou.FirstName,' ',ou.SecondName) as DisplayNameOpeningUser
			  ,Concat(cu.LastName,' ',cu.FirstName,' ',cu.SecondName) as DisplayNameClosingUser
		  FROM [dbo].[WorkShift] ws
		  left join dbo.Users ou on ou.[ID]=ws.[OpeningUser]
		  left join dbo.Users cu on cu.[ID]=ws.[ClosingUser]
		  left join dbo.[Attributes] at on at.[ID]=ws.[PosID]
		  where ws.[ID]=@p_ID
	end


	if @p_TypeScreen='child' begin	
		SELECT TOP 1 ws.[ID]
			  ,ws.[PosID]
			  ,ws.[WorkShiftID]
			  ,ws.[OpeningDate]
			  ,ws.[OpeningUser]
			  ,ws.[ClosingDate]
			  ,ws.[ClosingUser]			  
		  FROM [dbo].[WorkShift] ws
		  where ws.[PosID]=@p_PosID and ws.[ClosingDate] is null
		  order by ID DESC
	end


	else if @p_TypeScreen in ('grid', 'ingrid') begin ---------------------------------------------------------------------

	if (@p_OpeningUser = '' or @p_ClosingUser= '' or @p_OpeningDateFrom= ''or @p_OpeningDateTo= ''or @p_ClosingDateFrom= ''or @p_ClosingDateTo= '')begin
				return
	end
	
	if @p_Sort=1 begin
			set @p_order='DESC'
	end
	if (@OpeningDateFrom_string!='1753-01-01 00:00:10')begin
		set @p_filter_request_DateFrom = 
							'(					
								  CONVERT(nvarchar, ws.[OpeningDate], 23)  between '''+ CONVERT(nvarchar, @p_OpeningDateFrom, 23) + ''' and ''' + @OpeningDateTo_string + '''
							 )'	
		end
	if (@ClosingDateFrom_string!='1753-01-01 00:00:10')begin
		set @p_filter_request_ClosingDate = 
						'(							
								( CONVERT(nvarchar, ws.[ClosingDate], 23) is null ) or
								(CONVERT(nvarchar, ws.[ClosingDate], 23) between '''+CONVERT(nvarchar, @p_ClosingDateFrom, 23)+''' and '''+@ClosingDateTo_string+''') 									
						)'	
	end
		if (@p_filter_request_DateFrom!='' and @p_filter_request_ClosingDate!='')begin
			set @p_filter_request = @p_filter_request_DateFrom +' and '+ @p_filter_request_ClosingDate
		end
		if (@p_filter_request_DateFrom!='' and @p_filter_request_ClosingDate='')begin
			set @p_filter_request = @p_filter_request_DateFrom
		end
		if (@p_filter_request_DateFrom='' and @p_filter_request_ClosingDate!='')begin
			set @p_filter_request = @p_filter_request_ClosingDate
		end

		declare @p_search_request nvarchar(MAX) = ''

		if (@p_PosID != 'All')begin	
			if (@p_filter_request!='')					
				set @p_search_PosID = ' and ws.[PosID] in (' + @p_PosID + ')'
			if (@p_filter_request='')
				set @p_search_PosID = ' ws.[PosID] in (' + @p_PosID + ')'
			end
		if (@p_WorkShiftID != 'All') begin		
			if (@p_filter_request!='')	
				set @p_search_WorkShiftID = ' and ws.[WorkShiftID] in (' + @p_WorkShiftID + ')'		
			if (@p_filter_request='')
				set @p_search_WorkShiftID = ' ws.[WorkShiftID] in (' + @p_WorkShiftID + ')'
			end	
		if (@p_OpeningUser != 'All') begin 
			if (@p_filter_request!='')				
				set @p_search_OpeningUser = ' and ws.[OpeningUser] in (' + @p_OpeningUser + ')'
			if (@p_filter_request='')	
				set @p_search_OpeningUser = ' ws.[OpeningUser] in (' + @p_OpeningUser + ')'			
			end
		if (@p_ClosingUser != 'All') begin	
			if (@p_filter_request!='')			
				set @p_search_ClosingUser = ' and ws.[ClosingUser] in (' + @p_ClosingUser + ')'
			if (@p_filter_request='')
				set @p_search_ClosingUser = ' ws.[ClosingUser] in (' + @p_ClosingUser + ')'
			end

	if(@p_SortColumn='DisplayNameOpeningUser')
			set  @p_SortColumn='(Concat(ou.LastName,'' '',ou.FirstName,'' '',ou.SecondName)) '

	if(@p_SortColumn='DisplayNameClosingUser')
			set  @p_SortColumn='(Concat(cu.LastName,'' '',cu.FirstName,'' '',cu.SecondName)) '
	
	if(@p_SortColumn='DisplayPosName')
			set @p_SortColumn='at.[Value]'

	set @p_MinValue=@p_PageNumber*@p_PagerowCount + 1
	set @p_MaxValue=(@p_PageNumber+1)*@p_PagerowCount

	set @p_filter_request = @p_filter_request + @p_search_PosID + @p_search_WorkShiftID + @p_search_OpeningUser+ @p_search_ClosingUser
	
	if(@p_filter_request != '')
		set @p_filter_request = ' where ' + @p_filter_request

	set @end_request = ' Select *  from  (SELECT 
										  ROW_NUMBER() OVER (order by '+ @p_SortColumn + ' '+@p_order+') AS RowNumber
										  ,ws.[ID]
										  ,ws.[PosID]
										  ,ws.[WorkShiftID]
										  ,ws.[OpeningDate]
										  ,ws.[OpeningUser]
										  ,ws.[ClosingDate]
										  ,ws.[ClosingUser]
										  ,at.[Value] as DisplayPosName
										  ,Concat(ou.LastName,'' '',ou.FirstName,'' '',ou.SecondName) as DisplayNameOpeningUser
										  ,Concat(cu.LastName,'' '',cu.FirstName,'' '',cu.SecondName) as DisplayNameClosingUser				
										  ,(SELECT CASE WHEN isnull(ou.LastName,'''') = '''' THEN '''' ELSE case when isnull(ou.FirstName,'''') = '''' then ou.LastName else ou.LastName + '' '' + SUBSTRING(ou.FirstName, 1, 1) + ''.'' + SUBSTRING(ou.SecondName, 1, 1) + ''.'' END END) as ShortNameOpeningUser
										  ,(SELECT CASE WHEN isnull(cu.LastName,'''') = '''' THEN '''' ELSE case when isnull(cu.FirstName,'''') = '''' then cu.LastName else cu.LastName + '' '' + SUBSTRING(cu.FirstName, 1, 1) + ''.'' + SUBSTRING(cu.SecondName, 1, 1) + ''.'' END END) as ShortNameClosingUser
			  
									  FROM [dbo].[WorkShift] ws
									  left join dbo.Users ou on ou.[ID]=ws.[OpeningUser]
									  left join dbo.Users cu on cu.[ID]=ws.[ClosingUser]
									  left join dbo.[Attributes] at on at.[ID]=ws.[PosID]
									 '+ @p_filter_request+') AS st
									 where RowNumber BETWEEN ' + CAST(@p_MinValue AS nvarchar)  + ' AND ' + CAST(@p_MaxValue AS nvarchar)+' order by st.RowNumber asc'	

			--print @end_request
			--SELECT @end_request
			execute	sp_EXECUTEsql @end_request
			--EXECUTE (@end_request);				
		end
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>

-- xp_PreSetSaleDocumentID 1, 'Номер квитанции покупки лома'
-- =============================================
CREATE PROCEDURE [dbo].[xp_PreSetSaleDocumentID]
	@p_AddUserID int,
	@p_documentNumberType nvarchar(40)
AS
BEGIN
	SET NOCOUNT ON;
	declare @string_number NVARCHAR(255)
	declare @dt_now datetime=getdate()

    --print @p_namedocument
	
	SELECT @string_number = (SELECT Top 1 CAST(CONVERT(bigInt, [Value])+1 as nvarchar(MAX)) FROM [dbo].[Attributes] WHERE Name=''+ @p_documentNumberType+ '')

	-- Устанавливаем увеличенный на 1 нумератор в аттрибутах
			UPDATE a
			SET  a.[Value] = CONVERT(bigInt,@string_number),
					a.[LastModifiedByUserID] = @p_AddUserID,
					a.[LastModifiedDate] = @dt_now
			FROM [dbo].[Attributes] a
			WHERE Name=@p_documentNumberType

	select @string_number as ID
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
/*
select * from SaleDocument
order by id desc*/

--exec [dbo].[xp_UpdRemovedCashBoxSaleDocument] 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xp_RemoteCashBoxSaleDocumentUpdate] 
	-- Add the parameters for the stored procedure here
	@p_SaleDocumentID int,
    @p_DateTimeSaleDocument datetime,
	@p_WorkShift int	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @Error int=0

	Begin try
		
			UPDATE [dbo].[SaleDocument]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where ID=@p_SaleDocumentID
	
			UPDATE [dbo].[SaleDocumentAdditionalDiscount]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where DocumentID=@p_SaleDocumentID

			UPDATE [dbo].[SaleDocumentCoupon]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where DocumentID=@p_SaleDocumentID

			UPDATE [dbo].[SaleDocumentPayment]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
							 ,[WorkShiftID] = @p_WorkShift
							 ,[IsRemotePayment] = 1
			where DocumentID=@p_SaleDocumentID

			UPDATE [dbo].[SaleDocumentPrepayment]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where DocumentID=@p_SaleDocumentID

			UPDATE [dbo].[SaleDocumentProduct]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where DocumentID=@p_SaleDocumentID

			UPDATE [dbo].[SaleDocumentRelatedProduct]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where DocumentID=@p_SaleDocumentID

			UPDATE [dbo].[SaleDocumentScrapDocument]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where DocumentID=@p_SaleDocumentID

			UPDATE [dbo].[SaleDocumentServices]
						  set [CreatedDate] = @p_DateTimeSaleDocument
							 ,[LastModifiedDate] = @p_DateTimeSaleDocument
			where DocumentID=@p_SaleDocumentID
			
			End try
			Begin catch
			set @Error=1
			End catch

	--if @Error=0
	--	begin
	--		if @p_SaleDocumentID != 0
	--	 	begin
	--		 	declare @sqlUpd nvarchar(max)
	--			set @sqlUpd = ' 
	--			update [DataAdapter].[dbo].[TEMP_SaleDocument]
	--			set TransComplited=1
	--			where ID= '+CAST(@p_SaleDocumentID as varchar(50))+'  
	--			and [CompanyID]= '+CAST(@CompNum as varchar(50))+'  
	--			and ShopID= '+CAST(@ShopNum as varchar(50))
	--			execute (@sqlUpd) at [DataAdapter]
	--		end else
	--		begin
	--			update s
	--			set TransComplited=1
	--			from [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocument] s 
	--			inner join #DocList on s.ID=DocNum 
	--			and s.[CompanyID]=@CompNum 
	--			and s.ShopID=@ShopNum
	--		end
	--		update s
	--		set s.SyncDate = GETDATE()
	--		from [dbo].[SaleDocument] s inner join #DocList on s.ID=DocNum

	--		if @p_SaleDocumentID=0
	--			begin
	--			 Update dbo.[RefreshInfo]
	--			 set [Source]=0, DtRefresh=Getdate(), UserID=@p_AddUserID
	--			 where obj = 'SaleDocument'
	--			end

	--	end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      <Kulikov A.K.>
-- Create date: <19.08.2020>
-- Description: <Replace Text in All Procedures>
-- =============================================
-- exec xp_ReplaceProcedureText '', ''
-- =============================================
CREATE PROCEDURE [dbo].[xp_ReplaceProcedureText]
    @p_SearchText nvarchar(MAX)='',
    @p_ReplaceText nvarchar(MAX)=''
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
    DECLARE
            @p_CursorNames CURSOR,
            @p_CursorName nvarchar(MAX),
            @p_ModifyProc nvarchar(MAX),
            @dt_now datetime=getdate(),
            @mktime_string nvarchar(MAX),
            @counter int
    SET @mktime_string = REPLACE(CONVERT(nvarchar(MAX),@dt_now, 120),'-','')
    SET @mktime_string = REPLACE(@mktime_string,':','')
    SET @mktime_string = CONCAT('_',REPLACE(@mktime_string,' ',''))
    SET @counter=1
    print('Replace Start')
    print('Search text: '+@p_SearchText)
    print('Replace text: '+@p_ReplaceText)
    SET @p_CursorNames = CURSOR FOR
                   SELECT DISTINCT object_name(c.id)
                   FROM syscomments c, sysobjects o
                   WHERE
                        c.text like '%'+@p_SearchText+'%'
                        AND c.id = o.id
                        AND o.type = 'P'
    OPEN @p_CursorNames
    FETCH NEXT
    FROM @p_CursorNames INTO @p_CursorName
    WHILE @@FETCH_STATUS = 0
    BEGIN
	begin try
        SET @p_ModifyProc =
			    (
                    SELECT REPLACE(
                                REPLACE(
                                        REPLACE(definition,@p_SearchText,@p_ReplaceText),'ALTER','CREATE')
                                        ,@p_CursorName,@p_CursorName+@mktime_string
                                        )
                    FROM sys.sql_modules a
                    JOIN (SELECT type, name, object_id FROM sys.objects b WHERE TYPE in ('p') and is_ms_shipped = 0) b
                    ON a.object_id=b.object_id WHERE b.name = @p_CursorName
                )
        print(CONVERT(nvarchar, @counter)+') [dbo].['+@p_CursorName+'] - [dbo].['+@p_CursorName+@mktime_string+']')
        SET @counter=@counter+1       
       EXECUTE sp_executesql @p_ModifyProc
	   --print @p_cursorname
	    end try
		begin catch
		print @p_CursorName
		end catch
        FETCH NEXT FROM @p_CursorNames INTO @p_CursorName
    END
    print('Replace End')
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-12-18 12:44
-- Description: Добавление/обновление/удаление записи в таблице dbo.Attributes
-- =============================================
-- xp_SaveAttributes p_AddUserID, p_ID, p_Type, p_Name, p_Value, p_AttributeGroup, p_AttributeSort, p_Visibility, p_SyncID, p_IsEnable
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveAttributes]
	@p_AddUserID int,
	@p_ID smallint,
	@p_Type tinyint = null,
	@p_Name nvarchar(255) = null,
	@p_Description nvarchar(255) = null,
	@p_Value nvarchar(max) = null,
	@p_AttributeGroup nvarchar(50) = null,
	@p_AttributeSort int = null,
	@p_Visibility bit = null,
	@p_SyncID int = null,
	@p_IsEnable bit = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Attributes] :
--	1 	[ID] smallint
--	2 	[Type] tinyint
--	3 	[Name] nvarchar(255)
--	4 	[Value] nvarchar(255)
--	5 	[AttributeGroup] nvarchar(50)
--	6 	[AttributeSort] int
--	7 	[Visibility] bit
--	8 	[SyncID] int
--	9 	[IsEnable] bit
--	10 	[CreatedDate] datetime
--	11 	[LastModifiedDate] datetime
--	12	[CreatedByUserID] int
--	13	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()	

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Attributes] (
					[Type],
					[Name],
					[Description],
					[Value],
					[AttributeGroup],
					[AttributeSort],
					[Visibility],
					[SyncID],
					[IsEnable],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_Type,
					@p_Name,
					@p_Description,
					@p_Value,
					@p_AttributeGroup,
					@p_AttributeSort,
					@p_Visibility,
					@p_SyncID,
					@p_IsEnable,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Attributes]
				set 
					[Type]=@p_Type,
					[Name]=@p_Name,
					[Description]=@p_Description,
					[Value]=@p_Value,
					[AttributeGroup]=@p_AttributeGroup,
					[AttributeSort]=@p_AttributeSort,
					[Visibility]=@p_Visibility,
					[SyncID]=@p_SyncID,
					[IsEnable]=@p_IsEnable,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Attributes]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end	
	if @p_ShowRes = 1 select @res  as res
END















--USE [JDB_POS]
--GO
--/****** Object:  StoredProcedure [dbo].[xp_SaveAttributes]    Script Date: 18.12.2019 12:30:09 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
---- =============================================
---- Author:      MJF\Shilin
---- Create date: 2019-09-24 13:57
---- Description: Добавление/обновление/удаление записи в таблице dbo.Attributes
---- =============================================
---- xp_SaveAttributes @p_AddUserID=5, @p_ID=0, @p_Type=2, @p_Name='Номер компании', @p_Value='4'
---- =============================================
--ALTER PROCEDURE [dbo].[xp_SaveAttributes]
--	@p_AddUserID int,
--	@p_ID smallint,
--	@p_Type tinyint = null,
--	@p_Name varchar(255) = null,
--	@p_Value nvarchar(255) = null,
--	@p_AttributeGroup varchar(50) = null,
--	@p_AttributeSort int = null,
--	@p_Visibility bit = null
--	,@p_ShowRes bit = 1 
--AS
--BEGIN
--	SET NOCOUNT ON

--/*   структура таблицы [dbo].[Attributes] :
----	1 	[ID] smallint
----	2 	[Type] tinyint
----	3 	[Name] varchar(255)
----	4 	[Value] nvarchar(255)
----	5 	[CreatedDate] datetime
----	6 	[LastModifiedDate] datetime
----	7 	[CreatedByUserID] int
----	8 	[LastModifiedByUserID] int
--*/

--	Declare @res int=0
--	Declare @StrErr nvarchar(max)
--	Declare @dt_now datetime=getdate()
--	declare @MinId int=0
--	declare @p_SearchID int =0

--	if @p_ID=0 begin
--		set @MinId = isnull((select min(id) from dbo.Attributes where id<0),0)-1
--		set @p_SearchID = (SELECT COUNT(id) FROM [dbo].[Attributes] where Name = @p_Name);
--		if @p_SearchID > 0 begin
--				Update [dbo].[Attributes]
--				set 
--					[Type]=@p_Type,
--					[Name]=@p_Name,
--					[Value]=@p_Value,
--					[AttributeGroup]=@p_AttributeGroup,
--					[AttributeSort]=@p_AttributeSort,
--					[Visibility]=@p_Visibility,
--					[LastModifiedDate]=@dt_now,
--					[LastModifiedByUserID]=@p_AddUserID
--				where Name = @p_Name
--		end
--		else if @p_SearchID = 0 begin
--			Insert into [dbo].[Attributes] (
--					[ID],
--					[Type],
--					[Name],
--					[Value],
--					[AttributeGroup],
--					[AttributeSort],
--					[Visibility],
--					[CreatedDate],
--					[LastModifiedDate],
--					[CreatedByUserID],
--					[LastModifiedByUserID])
--				values (
--					@MinId,
--					@p_Type,
--					@p_Name,
--					@p_Value,
--					@p_AttributeGroup,
--					@p_AttributeSort,
--					@p_Visibility,
--					@dt_now,
--					@dt_now,
--					@p_AddUserID,
--					@p_AddUserID)
--		end
--	end
--	else if @p_ID!=0 begin
--		set @p_SearchID = (SELECT COUNT(id) FROM [dbo].[Attributes] where Name = @p_Name);
--		if @p_SearchID > 0 begin
--			DELETE FROM [dbo].[Attributes] where Name = @p_Name
--		end
--	end
--END

--USE [JDB_POS]
--GO
--/****** Object:  StoredProcedure [dbo].[xp_SaveAttributes]    Script Date: 17.12.2019 15:05:12 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
---- =============================================
---- Author:      MJF\Shilin
---- Create date: 2019-09-24 13:57
---- Description: Добавление/обновление/удаление записи в таблице dbo.Attributes
---- =============================================
---- xp_SaveAttributes @p_AddUserID=5, @p_ID=-1, @p_Type=2, @p_Name='Номер компании', @p_Value='4'
---- =============================================
--ALTER PROCEDURE [dbo].[xp_SaveAttributes]
--	@p_AddUserID int,
--	@p_ID smallint,
--	@p_Type tinyint = null,
--	@p_Name varchar(255) = null,
--	@p_Value nvarchar(255) = null,
--	@p_AttributeGroup varchar(50) = null,
--	@p_AttributeSort int = null,
--	@p_Visibility bit = null
--	,@p_ShowRes bit = 1 
--AS
--BEGIN
--	SET NOCOUNT ON

--/*   структура таблицы [dbo].[Attributes] :
----	1 	[ID] smallint
----	2 	[Type] tinyint
----	3 	[Name] varchar(255)
----	4 	[Value] nvarchar(255)
----	5 	[CreatedDate] datetime
----	6 	[LastModifiedDate] datetime
----	7 	[CreatedByUserID] int
----	8 	[LastModifiedByUserID] int
--*/

--	Declare @res int=0
--	Declare @StrErr nvarchar(max)
--	Declare @dt_now datetime=getdate()
--	declare @MinId int=0

--	if @p_ID=0 begin
--		set @MinId = isnull((select min(id) from dbo.Attributes where id<0),0)-1

--		BEGIN TRANSACTION tr_insert
--			BEGIN TRY
--				Insert into [dbo].[Attributes] (
--					[ID],
--					[Type],
--					[Name],
--					[Value],
--					[AttributeGroup],
--					[AttributeSort],
--					[Visibility],
--					[CreatedDate],
--					[LastModifiedDate],
--					[CreatedByUserID],
--					[LastModifiedByUserID])
--				values (
--					@MinId,
--					@p_Type,
--					@p_Name,
--					@p_Value,
--					@p_AttributeGroup,
--					@p_AttributeSort,
--					@p_Visibility,
--					@dt_now,
--					@dt_now,
--					@p_AddUserID,
--					@p_AddUserID)

--				set @res=@MinId
--			END TRY 
--			BEGIN CATCH   
--				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
--								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
--								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
--								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
--								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
--								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
--				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
--				IF @@TRANCOUNT > 0 
--				begin
--					ROLLBACK TRANSACTION;
--					set @res=0;
--				end
--			END CATCH; 
--			IF @@TRANCOUNT > 0 
--				COMMIT TRANSACTION tr_insert; 

--	end
--	else if  @p_ID>0 begin
--		begin tran tr_update
--			BEGIN TRY
--				Update [dbo].[Attributes]
--				set 
--					[Type]=@p_Type,
--					[Name]=@p_Name,
--					[Value]=@p_Value,
--					[AttributeGroup]=@p_AttributeGroup,
--					[AttributeSort]=@p_AttributeSort,
--					[Visibility]=@p_Visibility,
--					[LastModifiedDate]=@dt_now,
--					[LastModifiedByUserID]=@p_AddUserID
--				where ID = @p_ID

--				set @res = case when @@rowcount=1 then @p_ID else 0 end
--			END TRY 
--			BEGIN CATCH   
--				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
--								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
--								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
--								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
--								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
--								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
--				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
--				IF @@TRANCOUNT > 0 
--				begin
--					ROLLBACK TRANSACTION;
--					set @res=0;
--				end
--			END CATCH; 
--			IF @@TRANCOUNT > 0 
--				COMMIT TRANSACTION tr_update; 

--	end
--	else if  @p_ID<0 begin
--		begin tran tr_update
--			BEGIN TRY
--				Update [dbo].[Attributes]
--				set 
--					[Type]=@p_Type,
--					[Name]=@p_Name,
--					[Value]=@p_Value,
--					[AttributeGroup]=@p_AttributeGroup,
--					[AttributeSort]=@p_AttributeSort,
--					[Visibility]=@p_Visibility,
--					[LastModifiedDate]=@dt_now,
--					[LastModifiedByUserID]=@p_AddUserID
--				where ID = @p_ID

--				set @res = case when @@rowcount=1 then -@p_ID else 0 end
--			END TRY 
--			BEGIN CATCH   
--				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
--								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
--								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
--								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
--								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
--								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
--				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
--				IF @@TRANCOUNT > 0 
--				begin
--					ROLLBACK TRANSACTION;
--					set @res=0;
--				end
--			END CATCH; 
--			IF @@TRANCOUNT > 0 
--				COMMIT TRANSACTION tr_update; 
--	end
--	if @p_ShowRes = 1 select @res  as res
--END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Shilin
-- Create date: 2019-09-16 18:17
-- Description: Добавление/обновление/удаление записи в таблице dbo.CashDesc
-- =============================================
-- xp_SaveCashDesc p_AddUserID, p_ID, p_Description, p_TerminalID, p_ShopID
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveCashDesc]
	@p_AddUserID int,
	@p_ID int,
	@p_Description nvarchar(150) = null,
	@p_TerminalID int = null,
	@p_ShopID int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[CashDesc] :
--	1 	[ID] int
--	2 	[Description] nvarchar(150)
--	3 	[TerminalID] int
--	4 	[ShopID] int
--	5 	[CreatedDate] datetime
--	6 	[LastModifiedDate] datetime
--	7 	[CreatedByUserID] int
--	8 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[CashDesc] (
					[Description],
					[TerminalID],
					[ShopID],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_Description,
					@p_TerminalID,
					@p_ShopID,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[CashDesc]
				set 
					[Description]=@p_Description,
					[TerminalID]=@p_TerminalID,
					[ShopID]=@p_ShopID,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[CashDesc]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya.A
-- Create date: 15.05.2020 15:21:07
-- Description: Добавление/обновление/удаление записи в таблице dbo.Coupon
-- =============================================
-- xp_SaveCoupon p_AddUserID, p_ID, p_Description, p_Discount, p_Quantity, p_CouponDateFrom, p_CouponDateTo
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveCoupon]
	@p_AddUserID int,
	@p_ID int,
	@p_Description nvarchar(255),
	@p_Discount money,
	@p_Quantity int,
	@p_CouponDateFrom datetime,
	@p_CouponDateTo datetime
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #Coupon(	
			[ID]  [int] NULL,	
			[Description] [nvarchar](255) NULL,		
			[Discount] [money] NULL,
			[Quantity] [int] NULL,
			[CouponDateFrom] [datetime] NULL,
			[CouponDateTo] [datetime] NULL,
		)

		insert into #Coupon
		(
			[ID],	
			[Description],	
			[Discount],
			[Quantity],
			[CouponDateFrom],
			[CouponDateTo])
		values 
		(
			@p_ID,
			@p_Description,
			@p_Discount,
			@p_Quantity,
			@p_CouponDateFrom,
			@p_CouponDateTo
		)

		update c
		set 
			[Description] = @p_Description,
			[Discount] = @p_Discount,
			[Quantity] = @p_Quantity, 
			[CouponDateFrom] = @p_CouponDateFrom,
			[CouponDateTo] = @p_CouponDateTo,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #Coupon temp 
			inner join [dbo].[Coupon] c on temp.ID=c.ID
			
		insert into [dbo].[Coupon](
			[ID],	
			[Description],
			[Discount],
			[Quantity],
			[CouponDateFrom],
			[CouponDateTo],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ID
			,@p_Description
			,@p_Discount
			,@p_Quantity
			,@p_CouponDateFrom
			,@p_CouponDateTo
			,@dt_now
			,@dt_now
			,@p_AddUserID
			,@p_AddUserID		
		from #Coupon temp 
			left join dbo.Coupon c on temp.ID=c.ID
		where c.ID is null
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya.A
-- Create date: 2020-04-30 14:38
-- Description: Добавление/обновление/удаление записи в таблице dbo.Currency
-- =============================================
-- xp_SaveCurrency p_AddUserID, p_Code, @p_ShortDescription, @p_LongDescription
-- xp_SaveCurrency 1472, 398, 'KZTф', 'Тенге'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveCurrency]
	@p_AddUserID int,
	@p_Code int,
	@p_ShortDescription nvarchar(40),
	@p_LongDescription nvarchar(40)
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #Currency(	
			[Code]  [int] NULL,			
			[ShortDescription] [nvarchar](40) NULL,
			[LongDescription] [nvarchar](40) NULL,
		)

		insert into #Currency
		(
			[Code],
			[ShortDescription],
			[LongDescription])
		values 
		(
			@p_Code,
			@p_ShortDescription,
			@p_LongDescription
		)			
			
		update s
		set 
			[ShortDescription] = @p_ShortDescription,
			[LongDescription]=@p_LongDescription,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #Currency l 
			inner join dbo.[Currency] s on l.Code=s.Code

		insert into [dbo].[Currency] (
			[Code],
			[ShortDescription],
			[LongDescription],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			 @p_Code
			,@p_ShortDescription
			,@p_LongDescription
			,@dt_now
			,@dt_now
			,@p_AddUserID
			,@p_AddUserID		
		from #Currency l 
			left join dbo.Currency s on s.Code=l.Code
		where s.Code is null

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2020-05-28 14:09
-- Description: Добавление/обновление/удаление записи в таблице dbo.Document
-- =============================================
-- xp_SaveDocument p_AddUserID, p_ID, p_ReffID, p_ReffDate, p_SenderID, p_ReceiverID, p_Type, p_Contract, p_Status, p_DocumentID
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveDocument]
	@p_AddUserID int,
	@p_ID int,
	@p_ReffID int = null,
	@p_ReffDate datetime = null,
	@p_SenderID int = null,
	@p_ReceiverID int = null,
	@p_Type int = null,
	@p_Contract nvarchar(255) = null,
	@p_Status int = null,
	@p_DocumentID bigint = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Document] :
--	1 	[ID] int
--	2 	[ReffID] int
--	3 	[ReffDate] datetime
--	4 	[SenderID] int
--	5 	[ReceiverID] int
--	6 	[Type] int
--	7 	[Contract] nvarchar(255)
--	8 	[Status] int
--	9 	[DocumentID] bigint
--	10	[CreatedDate] datetime
--	11	[LastModifiedDate] datetime
--	12	[CreatedByUserID] int
--	13	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #Document(	
			[ID] [int] NOT NULL,
			[ReffID] [int] NULL,
			[ReffDate] [datetime] NULL,
			[SenderID] [int] NULL,
			[ReceiverID] [int] NULL,
			[Type] [int] NULL,
			[Contract] [nvarchar](255) NULL,
			[Status] [int] NULL,
			[DocumentID] [bigint] NULL,
		)

		insert into #Document
		(
			[ID],	
			[ReffID],
			[ReffDate],
			[SenderID],
			[ReceiverID],
			[Type],
			[Contract],
			[Status],
			[DocumentID])
		values 
		(
			@p_ID,
			@p_ReffID,
			@p_ReffDate,
			@p_SenderID,
			@p_ReceiverID,
			@p_Type,
			@p_Contract,
			@p_Status,
			@p_DocumentID		
		)

		update d
		set 
			[ReffID]=@p_ReffID,
			[ReffDate]=@p_ReffDate,
			[SenderID]=@p_SenderID,
			[ReceiverID]=@p_ReceiverID,
			[Type]=@p_Type,
			[Contract]=@p_Contract,
			[Status]=@p_Status,
			[DocumentID]=@p_DocumentID,
			[LastModifiedDate]=@dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #Document temp 
			inner join [dbo].[Document] d on temp.ID=d.ID
			
		insert into [dbo].[Document](
			[ID],	
			[ReffID],
			[ReffDate],
			[SenderID],
			[ReceiverID],
			[Type],
			[Contract],
			[Status],
			[DocumentID],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ID,
			@p_ReffID,
			@p_ReffDate,
			@p_SenderID,
			@p_ReceiverID,
			@p_Type,
			@p_Contract,
			@p_Status,
			@p_DocumentID,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID		
		from #Document temp 
			left join dbo.Document d on temp.ID=d.ID
		where d.ID is null
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2020-05-26 16:17
-- Description: Добавление/обновление/удаление записи в таблице dbo.DocumentDetails
-- =============================================
-- xp_SaveDocumentDetails p_AddUserID, p_ID, p_DocumentID, p_LineDocument, p_Model, p_ModelID, p_Type, p_KtID, p_Size, p_Color, p_Gender, p_SupplierID, p_SupplierName, p_Country, p_ThemedCollection, p_Weight, p_CostWithoutVAT, p_CostCurrency, p_TagPriceWithVAT, p_TagPriceCurrency, p_TagPriceExtra, p_IsChecked, p_ShowcaseID, p_TagPriceWithOutVAT, p_DeclarationNumber, p_TnvedCode
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveDocumentDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_DocumentID int = null,
	@p_LineDocument int = null,
	@p_Model nvarchar(30) = null,
	@p_ModelID int = null,
	@p_Type nvarchar(50) = null,
	@p_KtID int = null,
	@p_Size nvarchar(50) = null,
	@p_Color nvarchar(50) = null,
	@p_Gender nvarchar(30) = null,
	@p_SupplierID int = null,
	@p_SupplierName nvarchar(255) = null,
	@p_Country nvarchar(255) = null,
	@p_ThemedCollection nvarchar(255) = null,
	@p_Weight money = null,
	@p_CostWithoutVAT money = null,
	@p_CostCurrency nvarchar(30) = null,
	@p_TagPriceWithVAT money = null,
	@p_TagPriceCurrency nvarchar(30) = null,
	@p_TagPriceExtra money = null,
	@p_IsChecked bit = null,
	@p_ShowcaseID int = null,
	@p_TagPriceWithOutVAT money = null,
	@p_DeclarationNumber nvarchar(40) = null,
	@p_TnvedCode nvarchar(40) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[DocumentDetails] :
--	1 	[ID] int
--	2 	[DocumentID] int
--	3 	[LineDocument] int
--	4 	[Model] nvarchar(30)
--	5 	[ModelID] int
--	6 	[Type] nvarchar(50)
--	7 	[KtID] int
--	8 	[Size] nvarchar(50)
--	9 	[Color] nvarchar(50)
--	10	[Gender] nvarchar(30)
--	11	[SupplierID] int
--	12	[SupplierName] nvarchar(255)
--	13	[Country] nvarchar(255)
--	14	[ThemedCollection] nvarchar(255)
--	15	[Weight] money
--	16	[CostWithoutVAT] money
--	17	[CostCurrency] nvarchar(30)
--	18	[TagPriceWithVAT] money
--	19	[TagPriceCurrency] nvarchar(30)
--	20	[TagPriceExtra] money
--	21	[IsChecked] bit
--	22	[ShowcaseID] int
--	23	[TagPriceWithOutVAT] money
--	24	[DeclarationNumber] nvarchar(40)
--	25	[TnvedCode] nvarchar(40)
--	26	[CreatedDate] datetime
--	27	[LastModifiedDate] datetime
--	28	[CreatedByUserID] int
--	29	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #DocumentDetails(	
			[ID] [int] NOT NULL,
			[DocumentID] [int] NULL,
			[LineDocument] [int] NULL,
			[Model] [nvarchar](30) NULL,
			[ModelID] [int] NULL,
			[Type] [nvarchar](50) NULL,
			[KtID] [int] NULL,
			[Size] [nvarchar](50) NULL,
			[Color] [nvarchar](50) NULL,
			[Gender] [nvarchar](30) NULL,
			[SupplierID] [int] NULL,
			[SupplierName] [nvarchar](255) NULL,
			[Country] [nvarchar](255) NULL,
			[ThemedCollection] [nvarchar](255) NULL,
			[Weight] [money] NULL,
			[CostWithoutVAT] [money] NULL,
			[CostCurrency] [nvarchar](30) NULL,
			[TagPriceWithVAT] [money] NULL,
			[TagPriceCurrency] [nvarchar](30) NULL,
			[TagPriceExtra] [money] NULL,
			[IsChecked] [bit] NULL,
			[ShowcaseID] [int] NULL,
			[TagPriceWithOutVAT] [money] NULL,
			[DeclarationNumber] [nvarchar](40) NULL,
			[TnvedCode] [nvarchar](40) NULL,
		)

		insert into #DocumentDetails
		(
			[ID],	
			[DocumentID],
			[LineDocument],
			[Model],
			[ModelID],
			[Type],
			[KtID],
			[Size],
			[Color],
			[Gender],
			[SupplierID],
			[SupplierName],
			[Country],
			[ThemedCollection],
			[Weight],
			[CostWithoutVAT],
			[CostCurrency],
			[TagPriceWithVAT],
			[TagPriceCurrency],
			[TagPriceExtra],
			[IsChecked],
			[ShowcaseID],
			[TagPriceWithOutVAT],
			[DeclarationNumber],
			[TnvedCode])
		values 
		(
			@p_ID,
			@p_DocumentID,
			@p_LineDocument,
			@p_Model,
			@p_ModelID,
			@p_Type,
			@p_KtID,
			@p_Size,
			@p_Color,
			@p_Gender,
			@p_SupplierID,
			@p_SupplierName,
			@p_Country,
			@p_ThemedCollection,
			@p_Weight,
			@p_CostWithoutVAT,
			@p_CostCurrency,
			@p_TagPriceWithVAT,
			@p_TagPriceCurrency,
			@p_TagPriceExtra,
			@p_IsChecked,
			@p_ShowcaseID,
			@p_TagPriceWithOutVAT,
			@p_DeclarationNumber,
			@p_TnvedCode
		)

		update dd
		set 
			[DocumentID]=@p_DocumentID,
			[LineDocument]=@p_LineDocument,
			[Model]=@p_Model,
			[ModelID]=@p_ModelID,
			[Type]=@p_Type,
			[KtID]=@p_KtID,
			[Size]=@p_Size,
			[Color]=@p_Color,
			[Gender]=@p_Gender,
			[SupplierID]=@p_SupplierID,
			[SupplierName]=@p_SupplierName,
			[Country]=@p_Country,
			[ThemedCollection]=@p_ThemedCollection,
			[Weight]=@p_Weight,
			[CostWithoutVAT]=@p_CostWithoutVAT,
			[CostCurrency]=@p_CostCurrency,
			[TagPriceWithVAT]=@p_TagPriceWithVAT,
			[TagPriceCurrency]=@p_TagPriceCurrency,
			[TagPriceExtra]=@p_TagPriceExtra,
			[IsChecked]=@p_IsChecked,
			[ShowcaseID]=@p_ShowcaseID,
			[TagPriceWithOutVAT]=@p_TagPriceWithOutVAT,
			[DeclarationNumber]=@p_DeclarationNumber,
			[TnvedCode]=@p_TnvedCode,
			[LastModifiedDate]=@dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #DocumentDetails temp 
			inner join [dbo].[DocumentDetails] dd on temp.ID=dd.ID

		insert into [dbo].[DocumentDetails](
			[ID],	
			[DocumentID],
			[LineDocument],
			[Model],
			[ModelID],
			[Type],
			[KtID],
			[Size],
			[Color],
			[Gender],
			[SupplierID],
			[SupplierName],
			[Country],
			[ThemedCollection],
			[Weight],
			[CostWithoutVAT],
			[CostCurrency],
			[TagPriceWithVAT],
			[TagPriceCurrency],
			[TagPriceExtra],
			[IsChecked],
			[ShowcaseID],
			[TagPriceWithOutVAT],
			[DeclarationNumber],
			[TnvedCode],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ID,
			@p_DocumentID,
			@p_LineDocument,
			@p_Model,
			@p_ModelID,
			@p_Type,
			@p_KtID,
			@p_Size,
			@p_Color,
			@p_Gender,
			@p_SupplierID,
			@p_SupplierName,
			@p_Country,
			@p_ThemedCollection,
			@p_Weight,
			@p_CostWithoutVAT,
			@p_CostCurrency,
			@p_TagPriceWithVAT,
			@p_TagPriceCurrency,
			@p_TagPriceExtra,
			@p_IsChecked,
			@p_ShowcaseID,
			@p_TagPriceWithOutVAT,
			@p_DeclarationNumber,
			@p_TnvedCode,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID		
		from #DocumentDetails temp 
			left join dbo.DocumentDetails dd on temp.ID=dd.ID
		where dd.ID is null
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2020-05-27 13:13
-- Description: Добавление/обновление/удаление записи в таблице dbo.DocumentStonesDetails
-- =============================================
-- xp_SaveDocumentStonesDetails p_AddUserID, p_ID, p_ProductID, p_DocumentID, p_Stone, p_Shape, p_Size, p_Color, p_Clarity, p_Quantity, p_Weight, p_Setting
-- xp_SaveDocumentStonesDetails 1, 78698, 61552000, 18, 'Бр.', 'Кр-57', '0.01', '2', '5А', 3, 0.04, 'Alesya'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveDocumentStonesDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_ProductID int = null,
	@p_DocumentID int = null,
	@p_Stone nvarchar(50) = null,
	@p_Shape nvarchar(50) = null,
	@p_Size nvarchar(50) = null,
	@p_Color nvarchar(50) = null,
	@p_Clarity nvarchar(30) = null,
	@p_Quantity int = null,
	@p_Weight money = null,
	@p_Setting nvarchar(50) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[DocumentStonesDetails] :
--	1 	[ID] int
--	2 	[ProductID] int
--	3 	[DocumentID] int
--	4 	[Stone] nvarchar(50)
--	5 	[Shape] nvarchar(50)
--	6 	[Size] nvarchar(50)
--	7 	[Color] nvarchar(50)
--	8 	[Clarity] nvarchar(30)
--	9 	[Quantity] int
--	10	[Weight] money
--	11	[Setting] nvarchar(50)
--	12	[CreatedDate] datetime
--	13	[LastModifiedDate] datetime
--	14	[CreatedByUserID] int
--	15	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #DocumentStonesDetails(	
			[ID] [int] NOT NULL,
			[ProductID] [int] NOT NULL,
			[DocumentID] [int] NULL,
			[Stone] [nvarchar](50) NULL,
			[Shape] [nvarchar](50) NULL,
			[Size] [nvarchar](50) NULL,
			[Color] [nvarchar](50) NULL,
			[Clarity] [nvarchar](30) NULL,
			[Quantity] [int] NULL,
			[Weight] [money] NULL,
			[Setting] [nvarchar](50) NULL,
		)

		insert into #DocumentStonesDetails
		(
			[ID],	
			[ProductID],
			[DocumentID],
			[Stone],
			[Shape],
			[Size],
			[Color],
			[Clarity],
			[Quantity],
			[Weight],
			[Setting])
		values 
		(
			@p_ID,
			@p_ProductID,
			@p_DocumentID,
			@p_Stone,
			@p_Shape,
			@p_Size,
			@p_Color,
			@p_Clarity,
			@p_Quantity,
			@p_Weight,
			@p_Setting
		)

		update dsd
		set 
			[ProductID]=@p_ProductID,
			[DocumentID]=@p_DocumentID,
			[Stone]=@p_Stone,
			[Shape]=@p_Shape,
			[Size]=@p_Size,
			[Color]=@p_Color,
			[Clarity]=@p_Clarity,
			[Quantity]=@p_Quantity,
			[Weight]=@p_Weight,
			[Setting]=@p_Setting,
			[LastModifiedDate]=@dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #DocumentStonesDetails temp 
			inner join [dbo].[DocumentStonesDetails] dsd on temp.ID=dsd.ID

		insert into [dbo].[DocumentStonesDetails](
			[ID],	
			[ProductID],
			[DocumentID],
			[Stone],
			[Shape],
			[Size],
			[Color],
			[Clarity],
			[Quantity],
			[Weight],
			[Setting],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ID,
			@p_ProductID,
			@p_DocumentID,
			@p_Stone,
			@p_Shape,
			@p_Size,
			@p_Color,
			@p_Clarity,
			@p_Quantity,
			@p_Weight,
			@p_Setting,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID		
		from #DocumentStonesDetails temp 
			left join dbo.DocumentStonesDetails dsd on temp.ID=dsd.ID
		where dsd.ID is null
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya.A
-- Create date: 19.05.2020 14:48:07
-- Description: Добавление/обновление/удаление записи в таблице dbo.KT
-- =============================================
-- xp_SaveKT p_AddUserID, p_ID, p_MetalID, p_Description
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveKT]
	@p_AddUserID int,
	@p_ID int,
	@p_MetalID int,
	@p_Description nvarchar(255)
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #KT(	
			[ID]  [int] NULL,
			[MetalID]  [int] NULL,	
			[Description] [nvarchar](255) NULL,		
		)

		insert into #KT
		(
			[ID],	
			[MetalID],
			[Description])
		values 
		(
			@p_ID,
			@p_MetalID,
			@p_Description
		)

		update kt
		set 
			[MetalID] = @p_MetalID,
			[Description] = @p_Description,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #KT temp 
			inner join [dbo].[KT] kt on temp.ID=kt.ID
			
		insert into [dbo].[KT](
			[ID],
			[MetalID],	
			[Description],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ID
			,@p_MetalID
			,@p_Description
			,@dt_now
			,@dt_now
			,@p_AddUserID
			,@p_AddUserID		
		from #KT temp 
			left join dbo.KT kt on temp.ID=kt.ID
		where kt.ID is null

END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2020-01-23 17:28
-- Description: Добавление/обновление/удаление записи в таблице dbo.Location
-- =============================================
-- xp_SaveLocation p_AddUserID, p_ID, p_Description
-- xp_SaveLocation 1472, 617, 'Москва, ТЦ "БУМ" тест'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveLocation]
	@p_AddUserID int,
	@p_ID int,
	@p_Description nvarchar(255),
	@p_CompanyID int
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON


	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #Location(	
			[ID]  [int] NULL,			
			[Description] [nvarchar](255) NULL,
			[CompanyID] [int] NULL
		)

		insert into #Location
		(
			[ID],
			[Description],
			[CompanyID])
		values 
		(
			@p_ID,
			@p_Description,
			@p_CompanyID
		)	
					
		update l
		set 
			[Description] = @p_Description,
			[CompanyID] = @p_CompanyID,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #Location temp
			inner join dbo.[Location] l on temp.ID=l.ID

		insert into [dbo].[Location]  (
			[ID],
			[CompanyID],
			[Description],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])
		select 
			@p_ID
			,@p_CompanyID
			,@p_Description
			,@dt_now
			,@dt_now
			,@p_AddUserID
			,@p_AddUserID				
		from #Location temp 
			left join dbo.Location l on l.ID=temp.ID
		where l.ID is null
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Shilin
-- Create date: 2019-02-04 13:47
-- Description: Добавление записи в таблице dbo.LogErr
-- =============================================
-- xp_SaveLogErr 1, 'ERROR_NUMBER=2601 ERROR_SEVERITY=14 ERROR_STATE=1 ERROR_PROCEDURE=xp_SaveJewelryGroup ERROR_LINE=39 ERROR_MESSAGE=Cannot insert duplicate key row in object ''dbo.JewelryGroup'' with unique index ''IX_JewelryGroup''. The duplicate key value is (1                                       ).'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveLogErr]
	@p_UserID int,
	@p_ErrorMessage nvarchar(4000)
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[LogErr] :
--	1 	[LogErrID] int
--	2 	[UserID] int
--	3 	[DtErr] datetime
--	4	[ERROR_MESSAGE] nvarchar(4000)
*/

	Insert into [dbo].[LogErr] (
		[UserID],
		[DtErr],
		[ERROR_MESSAGE])
	values (
		@p_UserID,
		GETDATE(),
		@p_ErrorMessage)

	--select SCOPE_IDENTITY() as res
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya.A
-- Create date: 2020-04-30 14:38
-- Description: Добавление/обновление/удаление записи в таблице dbo.Metal
-- =============================================
-- xp_SaveMetal p_AddUserID, p_ID, p_Description
-- xp_SaveMetal 1, 101, 'Золото2'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveMetal]
	@p_AddUserID int,
	@p_ID int,
	@p_Description nvarchar(255)
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #Metal(	
			[ID]  [int] NULL,			
			[Description] [nvarchar](255) NULL,
		)

		insert into #Metal
		(
			[ID],
			[Description])
		values 
		(
			@p_ID,
			@p_Description
		)

		update m
		set 
			[Description]=@p_Description,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #Metal temp 
			inner join dbo.[Metal] m on temp.ID=m.ID
			
		insert into [dbo].[Metal] (
			[ID],
			[Description],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ID
			,@p_Description
			,@dt_now
			,@dt_now
			,@p_AddUserID
			,@p_AddUserID		
		from #Metal temp 
			left join dbo.Metal m on m.ID=temp.ID
		where m.ID is null

END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2019-10-24 11:56
-- Description: Добавление/обновление/удаление записи в таблице dbo.MetalPrices
-- =============================================
-- xp_SaveMetalPrices p_AddUserID, p_ID, p_KTID, p_PriceType, p_PriceValue, p_Source
-- xp_SaveMetalPrices 1, 285, 19, 0, 0, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveMetalPrices]
	@p_AddUserID int,
	@p_ID int,
	@p_KTID int = null,
	@p_PriceType tinyint = null,
	@p_PriceValue money = null,
	@p_Source bit = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	CREATE TABLE #MetalPrices(	
		[ID] [int] NULL,
		[KTID] [int] NULL,
		[PriceType] [int] NULL,
		[PriceValue] [money] NULL,
		[Source] [bit] NULL,
		)	
		
	insert into #MetalPrices
		(
			[ID],
			[KTID],
			[PriceType],
			[PriceValue],
			[Source])
		values 
		(
			@p_ID,
			@p_KTID,
			@p_PriceType,
			@p_PriceValue,
			@p_Source
		)
	
	update mp
		set 
			[KTID] = @p_KTID,
			[PriceType] = @p_PriceType,
			[PriceValue] = @p_PriceValue,
			[Source] = @p_Source,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #MetalPrices temp 
			inner join dbo.[MetalPrices] mp on temp.[PriceType]=mp.[PriceType] AND temp.[KTID]=mp.[KTID]
	
	insert into [dbo].[MetalPrices] (
			[KTID],
			[PriceType],
			[PriceValue],
			[Source],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_KTID
			,@p_PriceType
			,@p_PriceValue
			,@p_Source
			,@dt_now
			,@dt_now
			,@p_AddUserID
			,@p_AddUserID		
		from #MetalPrices temp 
			left join dbo.MetalPrices mp on temp.[PriceType]=mp.[PriceType] AND temp.[KTID]=mp.[KTID]
		where mp.ID is null

END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-11-26 13:31
-- Description: Добавление/обновление/удаление записи в таблице dbo.PaymentsDetails
-- =============================================
-- xp_SavePaymentsDetails p_AddUserID, p_ID, p_WorkShiftID, p_OperationType, p_ExtRefOperationTypeID, p_PaymentType, p_ExtRefPaymentTypeID, p_Amount
-- xp_SavePaymentsDetails 17, 0, 1, 1, 1, 1, 1, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_SavePaymentsDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_PosID int=null,
	@p_WorkShiftID int = null,
	@p_OperationType tinyint = null,
	@p_ExtRefOperationTypeID int = null,
	@p_PaymentType tinyint = null,
	@p_ExtRefPaymentTypeID int = null,
	@p_Amount money = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[PaymentsDetails] :
--	1 	[ID] int
--	2 	[WorkShiftID] int
--	3 	[OperationType] int
--	4 	[ExtRefOperationTypeID] int
--	5 	[PaymentType] tinyint
--	6 	[ExtRefPaymentTypeID] int
--	7 	[Amount] money
--	8 	[CreatedByUserID] int
--	9 	[CreatedDate] datetime
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[PaymentsDetails] (
					[PosID],
					[WorkShiftID],
					[OperationType],
					[ExtRefOperationTypeID],
					[PaymentType],
					[ExtRefPaymentTypeID],
					[Amount],
					[CreatedByUserID],
					[CreatedDate])
				values (
					@p_PosID,
					@p_WorkShiftID,
					@p_OperationType,
					@p_ExtRefOperationTypeID,
					@p_PaymentType,
					@p_ExtRefPaymentTypeID,
					@p_Amount,
					@p_AddUserID,
					@dt_now)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[PaymentsDetails]
				set 
					[PosId]=@p_PosID,
					[WorkShiftID]=@p_WorkShiftID,
					[OperationType]=@p_OperationType,
					[ExtRefOperationTypeID]=@p_ExtRefOperationTypeID,
					[PaymentType]=@p_PaymentType,
					[ExtRefPaymentTypeID]=@p_ExtRefPaymentTypeID,
					[Amount]=@p_Amount
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
/*
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[PaymentsDetails]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
*/
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:      MJF\Shilin
-- Create date: 2019-09-19 12:18
-- Description: Добавление/обновление/удаление записи в таблице dbo.Photo
-- =============================================
-- xp_SavePhoto 49, 1, 1, 
-- =============================================
--select * from dbo.Photo 
CREATE PROCEDURE [dbo].[xp_SavePhoto]
	@p_AddUserID int,
	@p_Type tinyint = null,
	@p_ParentID int = null,
	@p_Photo varbinary(max) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Photo] :
--	1 	[ID] int
--	2 	[Type] tinyint
--	3 	[ParentID] int
--	4 	[Photo] varbinary(max)
--	5 	[CreatedDate] datetime
--	6 	[LastModifiedDate] datetime
--	7 	[CreatedByUserID] int
--	8 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()
	declare @ID int =isnull((select id from dbo.Photo where ParentID=abs(@p_ParentID) and [Type]=@p_Type),0)

	--print @p_ParentID

	if  @p_ParentID<0 and @ID>0 begin
		begin tran tr_delete
			delete from [dbo].[Photo]
			where ID=@ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	else if @ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Photo] (
					[Type],
					[ParentID],
					[Photo],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_Type,
					@p_ParentID,
					@p_Photo,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Photo]
				set 
					[Photo]=@p_Photo,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ParentID=@p_ParentID and [Type]=@p_Type

				set @res = case when @@rowcount=1 then @p_ParentID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	if @p_ShowRes = 1 select @res  as res
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Igor.Rodionov
-- Create date: 2021-03-03 16:19
-- Description: Добавление/обновление/удаление записи в таблице dbo.POSObjects
-- =============================================
-- xp_SavePOSObjects p_AddUserID, p_id, p_Name, p_SyncType, p_Description
-- =============================================
CREATE PROCEDURE [dbo].[xp_SavePOSObjects]
	@p_AddUserID int,
	@p_id int,
	@p_Name nvarchar(max) = null,
	@p_SyncType int = null,
	@p_Description nvarchar(max) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[POSObjects] :
--	1 	[id] int
--	2 	[Name] nvarchar(max)
--	3 	[SyncType] int
--	4 	[Description] nvarchar(max)
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_id=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
		
		if exists (select 1 from [dbo].[POSObjects] where name = @p_Name)
			begin
				update [dbo].[POSObjects]
				set [SyncType] = @p_SyncType,
					[Description] = @p_Description
					where name = @p_Name
			end
		else 
			begin
				Insert into [dbo].[POSObjects] ([Name],[SyncType],[Description])
				values (@p_Name, @p_SyncType,@p_Description)
				set @res=SCOPE_IDENTITY()
			end

			END TRY 

			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_id>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[POSObjects]
				set 
					[Name]=@p_Name,
					[SyncType]=@p_SyncType,
					[Description]=@p_Description
				where id = @p_id

				set @res = case when @@rowcount=1 then @p_id else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_id<0 begin
		begin tran tr_delete
			delete from [dbo].[POSObjects]
			where id= -@p_id

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2020-01-21 12:07
-- Description: Добавление/обновление/удаление записи в таблице dbo.Product
-- =============================================
-- xp_SaveProduct p_AddUserID, p_ID, p_Model, p_ModelID, p_Type, p_KtID, p_Size, p_Color, p_Gender, p_SupplierID, p_SupplierName, p_Country, p_ThemedCollection, p_Weight, p_CostWithoutVAT, p_CostCurrency, p_TagPriceWithVAT, p_TagPriceCurrency, p_TagPriceExtra, p_Status, p_ShowcaseID

-- xp_SaveProduct1 1, 11111113, 'Sasha1', 0, '', 1, '', '', '', 1, '', '', '', 0, 0, '', 0, '', 0, 0, 1,0,'',''


-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveProduct]
	@p_AddUserID int,
	@p_ID int,
	@p_Model nvarchar(30) = null,
	@p_ModelID int = null,
	@p_Type nvarchar(50) = null,
	@p_KtID int = null,
	@p_Size nvarchar(50) = null,
	@p_Color nvarchar(50) = null,
	@p_Gender nvarchar(30) = null,
	@p_SupplierID int = null,
	@p_SupplierName nvarchar(255) = null,
	@p_Country nvarchar(255) = null,
	@p_ThemedCollection nvarchar(255) = null,
	@p_Weight money = null,
	@p_CostWithoutVAT money = null,
	@p_CostCurrency nvarchar(30) = null,
	@p_TagPriceWithVAT money = null,
	@p_TagPriceCurrency nvarchar(30) = null,
	@p_TagPriceExtra money = null,
	@p_Status int = null,
	@p_ShowcaseID int = null,	
	@p_TagPriceWithOutVAT money= null,
	@p_DeclarationNumber nVARCHAR(40)= null,
	@p_TnvedCode nVARCHAR(40) = null,
	@p_FromDatePrice datetime = null,
	@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Product] :
--	1 	[ID] int
--	3 	[Model] nvarchar(30)
--	4 	[ModelID] int
--	5 	[Type] nvarchar(50)
--	6 	[KtID] int
--	7 	[Size] nvarchar(50)
--	8 	[Color] nvarchar(50)
--	9 	[Gender] nvarchar(30)
--	10	[SupplierID] int
--	11	[SupplierName] nvarchar(255)
--	12	[Country] nvarchar(255)
--	13	[ThemedCollection] nvarchar(255)
--	14	[Weight] money
--	15	[CostWithoutVAT] money
--	16	[CostCurrency] nvarchar(30)
--	17	[TagPriceWithVAT] money
--	18	[TagPriceCurrency] nvarchar(30)
--	19	[TagPriceExtra] money
--	20	[Status] int
--	21	[ShowcaseID] int
--	22	[CreatedDate] datetime
--	23	[LastModifiedDate] datetime
--	24	[CreatedByUserID] int
--	25	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Product] (
					[Model],
					[ModelID],
					[Type],
					[KtID],
					[Size],
					[Color],
					[Gender],
					[SupplierID],
					[SupplierName],
					[Country],
					[ThemedCollection],
					[Weight],
					[CostWithoutVAT],
					[CostCurrency],
				 	[TagPriceWithVAT],
					[TagPriceCurrency],
					[TagPriceExtra],
					[Status],
					[ShowcaseID],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID],
					TagPriceWithOutVAT,
					DeclarationNumber,
					TnvedCode,
					FromDatePrice
					)
				values (
					@p_Model,
					@p_ModelID,
					@p_Type,
					@p_KtID,
					@p_Size,
					@p_Color,
					@p_Gender,
					@p_SupplierID,
					@p_SupplierName,
					@p_Country,
					@p_ThemedCollection,
					@p_Weight,
					@p_CostWithoutVAT,
					@p_CostCurrency,
				 	@p_TagPriceWithVAT,
					@p_TagPriceCurrency,
					@p_TagPriceExtra,
					@p_Status,
					@p_ShowcaseID,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID,
					@p_TagPriceWithOutVAT,
					@p_DeclarationNumber,
					@p_TnvedCode,
					@p_FromDatePrice)

				set @res=SCOPE_IDENTITY()

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin

	BEGIN TRANSACTION tr_update
			BEGIN TRY
				declare @res1 TABLE(id int);
				          merge dbo.Product as target
                           using (select @p_ID,@p_Model,@p_ModelID,@p_Type,@p_KtID,@p_Size,@p_Color,@p_Gender,@p_SupplierID,@p_SupplierName,@p_Country,@p_ThemedCollection,@p_Weight,@p_CostWithoutVAT,@p_CostCurrency,
                                                     @p_TagPriceWithVAT,@p_TagPriceCurrency,@p_TagPriceExtra,@p_Status,@p_ShowcaseID,@dt_now,@dt_now,@p_AddUserID,@p_AddUserID,@p_TagPriceWithOutVAT,@p_DeclarationNumber,@p_TnvedCode,@p_FromDatePrice)
                           as source (ID,Model,ModelID,Type,KtID,Size,Color,Gender,SupplierID,SupplierName,Country,ThemedCollection,Weight,CostWithoutVAT,CostCurrency,TagPriceWithVAT,TagPriceCurrency,TagPriceExtra,
                                               Status,ShowcaseID,CreatedDate,LastModifiedDate,CreatedByUserID,LastModifiedByUserID,TagPriceWithOutVAT,DeclarationNumber,TnvedCode,FromDatePrice)
                           on (target.ID=source.ID)
                           WHEN MATCHED THEN
                           UPDATE 
                           SET Model = source.Model,
                           [ModelID] = source.[ModelID],
                           [Type] = source.[Type],
                           [KtID] = source.[KtID],
                           [Size] = source.[Size],
                           [Color] = source.[Color],
                           [Gender] = source.[Gender],
                           [SupplierID] = source.[SupplierID],
                           [SupplierName] = source.[SupplierName],
                           [Country] = source.[Country],
                           [ThemedCollection] = source.[ThemedCollection],
                           [Weight] = source.[Weight],
                           [CostWithoutVAT] = source.[CostWithoutVAT],
                           [CostCurrency] = source.[CostCurrency],
                           [TagPriceWithVAT] = source.[TagPriceWithVAT],
                           [TagPriceCurrency] = source.[TagPriceCurrency],
                           [TagPriceExtra] = source.[TagPriceExtra],
                           [Status] = source.[Status],
                           [ShowcaseID] = source.[ShowcaseID],
                           [CreatedDate] = source.[CreatedDate],
                           [LastModifiedDate] = source.[LastModifiedDate],
                           [CreatedByUserID] = source.[CreatedByUserID],
                           [LastModifiedByUserID] = source.[LastModifiedByUserID],
                           TagPriceWithOutVAT = source.TagPriceWithOutVAT,
                           DeclarationNumber = source.DeclarationNumber,
                           TnvedCode = source.TnvedCode,
						   FromDatePrice = source.FromDatePrice	

                           WHEN NOT MATCHED THEN
                           Insert ([ID],[Model],[ModelID],[Type],[KtID],[Size],[Color],[Gender],[SupplierID],[SupplierName],[Country],[ThemedCollection],[Weight],[CostWithoutVAT],[CostCurrency],
                                                                         [TagPriceWithVAT],[TagPriceCurrency],[TagPriceExtra],[Status],[ShowcaseID],[CreatedDate],[LastModifiedDate],[CreatedByUserID],[LastModifiedByUserID],
                                                                          TagPriceWithOutVAT,DeclarationNumber,TnvedCode,FromDatePrice)

                           values (source.[ID],source.[Model],source.[ModelID],source.[Type],source.[KtID],source.[Size],source.[Color],source.[Gender],source.[SupplierID],source.[SupplierName],source.[Country],
                           source.[ThemedCollection],source.[Weight],source.[CostWithoutVAT],source.[CostCurrency],source.[TagPriceWithVAT],source.[TagPriceCurrency],source.[TagPriceExtra],source.[Status],
                           source.[ShowcaseID],source.[CreatedDate],source.[LastModifiedDate],source.[CreatedByUserID],source.[LastModifiedByUserID],source.TagPriceWithOutVAT,source.DeclarationNumber,source.TnvedCode,source.FromDatePrice)
						   output inserted.id into @res1(id);


--			set @res=SCOPE_IDENTITY()
			set @res = (select id from @res1)

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 
	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Product]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1
	begin
		select @res as res
	end
	-- exec [dbo].[xp_SaveProductTransfer] @p_AddUserID,0,@res,@p_Status
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	обновление на клиенте таблицы с атрибутами
-- =============================================
-- exec xp_SaveProductFromDocument 63, 3001020000002

-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveProductFromDocument]
	@p_AddUserID int,
	@p_DocumentID bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;

	DECLARE
		@p_ID int = NULL,
		@dt_now datetime=getdate(),
		@p_ShowRes bit = 1

	SELECT @p_ID = [ID]  FROM [dbo].[Document] WHERE [DocumentID] = @p_DocumentID
	
	CREATE TABLE #DocumentDetails(
			[ID] int,
			[DocumentID] int NULL,
			[LineDocument] int NULL,
			[Model] nvarchar(30) NULL,
			[ModelID] int NULL,
			[Type] nvarchar(50) NULL,
			[KtID] int NULL,
			[Size] nvarchar(50) NULL,
			[Color] nvarchar(50) NULL,
			[Gender] nvarchar(30) NULL,
			[SupplierID] int NULL,
			[SupplierName] nvarchar(255) NULL,
			[Country] nvarchar(255) NULL,
			[ThemedCollection] nvarchar(255) NULL,
			[Weight] float NULL,
			[CostWithoutVAT] float,
			[CostCurrency] nvarchar(30) NULL,
			[TagPriceWithVAT] float NULL,
			[TagPriceCurrency] nvarchar(30) NULL,
			[TagPriceExtra] float NULL,
			[ShowcaseID] int NULL,
			TagPriceWithOutVAT  float NULL,
			DeclarationNumber nVARCHAR(40) null,
			TnvedCode nVARCHAR(40)  null
		)
--смотрим что там с обновлением цен

CREATE TABLE #RevaluationDocumentDetails(ProductID int
										,DocumentID int
										,TagPriceWithVAT float
										,TagPriceWithOutVAT float )
--получил документы по ценам и товары
	insert into #RevaluationDocumentDetails         
	SELECT			distinct (dd.[ID])
					,dd.[DocumentID]
					,dd.[TagPriceWithVAT] AS [TagPriceWithVAT]
					,dd.[TagPriceWithOutVAT] AS [TagPriceWithOutVAT]							
				FROM [dbo].[DocumentDetails] dd
					inner join [dbo].[RevaluationDocumentDetails] rdd on rdd.[ProductID]=dd.[ID]
					inner join [dbo].[RevaluationDocument] rd on  rd.[CreatedDate] = (SELECT MAX(rd.[CreatedDate]) FROM [dbo].[RevaluationDocumentDetails] drv1																													
																							inner join [dbo].[RevaluationDocument] rd on rd.[ID]=drv1.[DocumentID] 
																					 where drv1.[ProductID]=dd.[ID] group by drv1.ProductID)		
--заполнение деталей
	insert into #DocumentDetails
		SELECT [ID],
				dd.[DocumentID],
				[LineDocument],
				[Model],
				[ModelID],
				[Type],
				[KtID],
				[Size],
				[Color],
				[Gender],
				[SupplierID],
				[SupplierName],
				[Country],
				[ThemedCollection],
				[Weight],
				[CostWithoutVAT],
				[CostCurrency],
				case when  rdd.[TagPriceWithVAT] is not null then rdd.[TagPriceWithVAT] else dd.[TagPriceWithVAT] end,
				[TagPriceCurrency],
				[TagPriceExtra],
				[ShowcaseID],
				case when  rdd.[TagPriceWithOutVAT] is not null then  rdd.[TagPriceWithOutVAT] else dd.[TagPriceWithOutVAT] end,
				DeclarationNumber ,
			   TnvedCode 
		FROM [dbo].[DocumentDetails] as dd
			left join #RevaluationDocumentDetails rdd on rdd.[DocumentID]=dd.[DocumentID] and rdd.ProductID=dd.ID
		WHERE dd.[DocumentID] = @p_ID

	CREATE TABLE #DocumentStonesDetails(
			[ID] int,
			[ProductID] int,
			[Stone] nvarchar(50) NULL,
			[Shape] nvarchar(50) NULL,
			[Size] nvarchar(50) NULL,
			[Color] nvarchar(50) NULL,
			[Clarity] nvarchar(30) NULL,
			[Quantity] int NULL,
			[Weight] float NULL,
			[Setting] nvarchar(50) NULL
		)

	insert into #DocumentStonesDetails
		SELECT  ds.[ID],
				ds.[ProductID],
				ds.[Stone],
				ds.[Shape],
				ds.[Size],
				ds.[Color],
				ds.[Clarity],
				ds.[Quantity],
				ds.[Weight],
				ds.[Setting]
		FROM [dbo].[DocumentStonesDetails] as ds
			inner join #DocumentDetails as dd on ds.ProductID = dd.ID

	BEGIN TRANSACTION tr_transfer	
		-- обновляем все строки продукции для которых найдены [ID] в темповой таблице
		update [dbo].[Product]
		set 
			[Model] = s.[Model],
			[ModelID] = s.[ModelID],
			[Type] = s.[Type],
			[KtID] = s.[KtID],
			[Size] = s.[Size],
			[Color] = s.[Color],
			[Gender] = s.[Gender],
			[SupplierID] = s.[SupplierID],
			[SupplierName] = s.[SupplierName],
			[Country] = s.[Country],
			[ThemedCollection] = s.[ThemedCollection],
			[Weight] = s.[Weight],
			[CostWithoutVAT] = s.[CostWithoutVAT],
			[CostCurrency] = s.[CostCurrency],
			[TagPriceWithVAT] = s.[TagPriceWithVAT],
			[TagPriceCurrency] = s.[TagPriceCurrency],
			[TagPriceExtra] = s.[TagPriceExtra],
			[ShowcaseID] = s.[ShowcaseID],
			[Status] = 0,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID] = @p_AddUserID,
			TagPriceWithOutVAT = s.TagPriceWithOutVAT,
			DeclarationNumber =s.DeclarationNumber,
			TnvedCode = s.TnvedCode,
			[FromDatePrice] = @dt_now	
		from [dbo].[Product] l 
			inner join #DocumentDetails s on l.[ID]=s.[ID]

		---- вставляем все строки продукции которые не найдены в локальной таблице
		insert into [dbo].[Product](
			[ID],
			[Model],
			[ModelID],
			[Type],
			[KtID],
			[Size],
			[Color],
			[Gender],
			[SupplierID],
			[SupplierName],
			[Country],
			[ThemedCollection],
			[Weight],
			[CostWithoutVAT],
			[CostCurrency],
			[TagPriceWithVAT],
			[TagPriceCurrency],
			[TagPriceExtra],
			[ShowcaseID],
			[Status],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID],
			TagPriceWithOutVAT,
			DeclarationNumber ,
			TnvedCode,
			[FromDatePrice]
		)
		select
			s.[ID],
			s.[Model],
			s.[ModelID],
			s.[Type],
			s.[KtID],
			s.[Size],
			s.[Color],
			s.[Gender],
			s.[SupplierID],
			s.[SupplierName],
			s.[Country],
			s.[ThemedCollection],
			s.[Weight],
			s.[CostWithoutVAT],
			s.[CostCurrency],
			s.[TagPriceWithVAT],
			s.[TagPriceCurrency],
			s.[TagPriceExtra],
			s.[ShowcaseID],
			0,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID,
			s.TagPriceWithOutVAT,
			s.DeclarationNumber ,
			s.TnvedCode,
			@dt_now
		from #DocumentDetails s
			left join [dbo].[Product] l on l.[ID]=s.[ID]
		where l.[ID] is null

		-- обновляем все строки камней для которых найдены [ID] в темповой таблице
		update [dbo].[Stones]
		set 
			--[ID] = s.[ID],
			[ProductID] = s.[ProductID],
			[Stone] = s.[Stone],
			[Shape] = s.[Shape],
			[Size] = s.[Size],
			[Color] = s.[Color],
			[Clarity] = s.[Clarity],
			[Quantity] = s.[Quantity],
			[Weight] = s.[Weight],
			[Setting] = s.[Setting],
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID] = @p_AddUserID
		from [dbo].[Stones] l 
			inner join #DocumentStonesDetails s on l.[ID]=s.[ID]

		-- вставляем все строки камней которые не найдены в локальной таблице
		insert into [dbo].[Stones](
			--[ID],
			[ProductID],
			[Stone],
			[Shape],
			[Size],
			[Color],
			[Clarity],
			[Quantity],
			[Weight],
			[Setting],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID]
		)
		select
			--s.[ID],
			s.[ProductID],
			s.[Stone],
			s.[Shape],
			s.[Size],
			s.[Color],
			s.[Clarity],
			s.[Quantity],
			s.[Weight],
			s.[Setting],
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID
		from #DocumentStonesDetails s
			left join [dbo].[Stones] l on l.[ID]=s.[ID]
		where l.[ID] is null


		-- добавляем продукцию в таблицу перемещений
		insert into [dbo].[ProductTransfer](
			[ProductID],
			[Status],
			[ExReffOperationType],
			[ExtReffID],
			[CreatedDate],
			[CreatedByUserID]
		)
		select
			s.[ID],
			0,
			1,
			s.DocumentID,
			@dt_now,
			@p_AddUserID
		from #DocumentDetails s

		set @p_ShowRes = @@rowcount

	COMMIT TRANSACTION tr_transfer;
	--if @p_ShowRes = 1 select 1

END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2020-01-21 17:02
-- Description: Добавление/обновление/удаление записи в таблице dbo.ProductTransfer
-- =============================================
-- xp_SaveProductTransfer p_AddUserID, p_ID, p_ProductID, p_ExReffOperationType, p_ExtReffID
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveProductTransfer]
	@p_AddUserID int,
	@p_ID int,
	@p_ProductID int = null,
	@p_ExReffOperationType int = null,
	@p_ExtReffID int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[ProductTransfer] :
--	1 	[ID] int
--	2 	[ProductID] int
--	3 	[ExReffOperationType] int
--	4 	[ExtReffID] int
--	5 	[CreatedDate] datetime
--	6 	[LastModifiedDate] datetime
--	7 	[CreatedByUserID] int
--	8 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[ProductTransfer] (
					[ProductID],
					[ExReffOperationType],
					[ExtReffID],
					[CreatedDate],
					[CreatedByUserID])
				values (
					@p_ProductID,
					@p_ExReffOperationType,
					@p_ExtReffID,
					@dt_now,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[ProductTransfer]
				set 
					[ProductID]=@p_ProductID,
					[ExReffOperationType]=@p_ExReffOperationType,
					[ExtReffID]=@p_ExtReffID,
					[CreatedDate]=@dt_now,
					[CreatedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[ProductTransfer]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Postika
-- Create date: 2020-10-09 14:13
-- Description: Добавление/обновление/удаление записи в таблице dbo.RefreshInfo
-- =============================================
-- xp_SaveRefreshInfo p_AddUserID, p_ID, p_Obj, p_DatVal, p_DtMod, p_Source, p_DtRefresh, p_UserID
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveRefreshInfo]
	@p_AddUserID int,
	@p_ID int,
	@p_Obj varchar(255) = null,
	@p_DatVal date = null,
	@p_DtMod datetime = null,
	@p_Source bit = null,
	@p_DtRefresh datetime = null,
	@p_UserID int = null,
	@p_InvalidAttempts int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[RefreshInfo] :
--	1 	[ID] int
--	2 	[Obj] varchar(255)
--	3 	[DatVal] date
--	4 	[DtMod] datetime
--	5 	[Source] bit
--	6 	[DtRefresh] datetime
--	7 	[UserID] int

*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[RefreshInfo] (
					[Obj],
					[DatVal],
					[DtMod],
					[Source],
					[DtRefresh],
					[UserID],
					[InvalidAttempts])
				values (
					@p_Obj,
					@p_DatVal,
					@p_DtMod,
					@p_Source,
					@p_DtRefresh,
					@p_UserID,
					@p_InvalidAttempts)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				if @p_InvalidAttempts != null begin
					Update [dbo].[RefreshInfo]
					set 
						[Obj]=@p_Obj,
						[DatVal]=@p_DatVal,
						[DtMod]=@p_DtMod,
						[Source]=@p_Source,
						[DtRefresh]=@p_DtRefresh,
						[UserID]=@p_UserID,
						[InvalidAttempts]=@p_InvalidAttempts
					where ID = @p_ID
				end
				else begin
					Update [dbo].[RefreshInfo]
					set 
						[Obj]=@p_Obj,
						[DatVal]=@p_DatVal,
						[DtMod]=@p_DtMod,
						[Source]=@p_Source,
						[DtRefresh]=@p_DtRefresh,
						[UserID]=@p_UserID
					where ID = @p_ID
				end
				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[RefreshInfo]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Pazynich
-- Create date: 2020-10-01 16:15
-- Description: Добавление/обновление/удаление записи в таблице dbo.Register
-- =============================================
-- xp_SaveRegister p_AddUserID, p_ID, p_ScrapRegisterNumber, p_Status, p_SyncDate, p_MassScrapDocumentID
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveRegister]
	@p_AddUserID int,
	@p_ID int,
	@p_ScrapRegisterNumber bigint = null,
	@p_Status tinyint = null,
	@p_SyncDate datetime = null,	
	@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Register] :
--	1 	[ID] int
--	2 	[ScrapRegisterNumber] bigint
--	3 	[Status] tinyint
--	4 	[SyncDate] datetime
--	5 	[CreatedByUserID] int
--	6 	[LastModifiedByUserID] int
--	7 	[CreatedDate] datetime
--	8 	[LastModifiedDate] datetime
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Register] (
					[ScrapRegisterNumber],
					[Status],
					[SyncDate],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[CreatedDate],
					[LastModifiedDate])
				values (
					@p_ScrapRegisterNumber,
					@p_Status,
					@p_SyncDate,
					@p_AddUserID,
					@p_AddUserID,
					@dt_now,
					@dt_now)

				set @res=SCOPE_IDENTITY()

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Register]
				set 
					[ScrapRegisterNumber]=@p_ScrapRegisterNumber,
					[Status]=@p_Status,
					[SyncDate]=@p_SyncDate,
					[LastModifiedByUserID]=@p_AddUserID,
					[LastModifiedDate]=@dt_now
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Register]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2020-05-28 15:20
-- Description: Добавление/обновление/удаление записи в таблице dbo.RelatedProductDocument
-- =============================================
-- xp_SaveRelatedProductDocument p_AddUserID, p_ID, p_ReffID, p_ReffDate, p_SenderID, p_Contract, p_DocumentID, p_Status
-- xp_SaveRelatedProductDocument 1, 1001, 2, '2020-05-28 15:20', 116, 'Alesya2', 1, 0
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveRelatedProductDocument]
	@p_AddUserID int,
	@p_ID int,
	@p_ReffID int = null,
	@p_ReffDate datetime = null,
	@p_SenderID int = null,
	@p_Contract nvarchar(255) = null,
	@p_DocumentID bigint = null,
	@p_Status int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[RelatedProductDocument] :
--	1 	[ID] int
--	2 	[ReffID] int
--	3 	[ReffDate] datetime
--	4 	[SenderID] int
--	5 	[Contract] nvarchar(255)
--	6 	[DocumentID] bigint
--	7 	[Status] int
--	8 	[CreatedDate] datetime
--	9 	[LastModifiedDate] datetime
--	10	[CreatedByUserID] int
--	11	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #RelatedProductDocument(	
			[ID]  [int] NULL,	
			[ReffID] [int] NOT NULL,
			[ReffDate] [datetime] NULL,
			[SenderID] [int] NULL,
			[Contract] [nvarchar](255) NULL,
			[DocumentID] [bigint] NULL,
			[Status] [int] NULL,
		)

		insert into #RelatedProductDocument
		(
			[ID],	
			[ReffID],
			[ReffDate],
			[SenderID],
			[Contract],
			[DocumentID],
			[Status])
		values 
		(
			@p_ID,
			@p_ReffID,
			@p_ReffDate,
			@p_SenderID,
			@p_Contract,
			@p_DocumentID,
			@p_Status
		)

		update rpd
		set 
			[ReffID]=@p_ReffID,
			[ReffDate]=@p_ReffDate,
			[SenderID]=@p_SenderID,
			[Contract]=@p_Contract,
			[DocumentID]=@p_DocumentID,
			[Status]=@p_Status,
			[LastModifiedDate]=@dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #RelatedProductDocument temp 
			inner join [dbo].[RelatedProductDocument] rpd on temp.ReffID=rpd.ReffID
			
		insert into [dbo].[RelatedProductDocument](
			[ReffID],
			[ReffDate],
			[SenderID],
			[Contract],
			[DocumentID],
			[Status],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ReffID,
			@p_ReffDate,
			@p_SenderID,
			@p_Contract,
			@p_DocumentID,
			@p_Status,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID		
		from #RelatedProductDocument temp 
			left join dbo.RelatedProductDocument rpd on temp.ReffID=rpd.ReffID 
		where rpd.ID is null
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2020-05-28 15:58
-- Description: Добавление/обновление/удаление записи в таблице dbo.RelatedProductDocumentDetails
-- =============================================
-- xp_SaveRelatedProductDocumentDetails p_AddUserID, p_ID, p_ReffID, p_ReffDate, p_LineDocument, p_PartNumber, p_Model, p_Quantity, p_TagPriceWithVat, p_TagPriceWithOutVat, p_IsChecked, p_Currency
-- xp_SaveRelatedProductDocumentDetails 1, 1, 1, '2020-05-28 15:58', 1, 1, 'Alesya2', 1, 1, 1, 1, 'Alesya'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveRelatedProductDocumentDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_DocumentID int = null,
	@p_ReffDate datetime = null,
	@p_LineDocument int = null,
	@p_PartNumber int = null,
	@p_Model nvarchar(40) = null,
	@p_Quantity int = null,
	@p_TagPriceWithVat money = null,
	@p_TagPriceWithOutVat money = null,
	@p_IsChecked bit = null,
	@p_Currency nchar(40) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[RelatedProductDocumentDetails] :
--	1 	[ID] int
--	2 	[ReffID] int
--	3 	[ReffDate] datetime
--	4 	[LineDocument] int
--	5 	[PartNumber] int
--	6 	[Model] nvarchar(40)
--	7 	[Quantity] int
--	8 	[TagPriceWithVat] money
--	9 	[TagPriceWithOutVat] money
--	10	[IsChecked] bit
--	11	[Currency] nchar(40)
--	12	[CreatedData] datetime
--	13	[LastModifiedDate] datetime
--	14	[CreatedByUserID] int
--	15	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #RelatedProductDocumentDetails(	
			[ID]  [int] NULL,	
			[DocumentID] [int] NOT NULL,
			[ReffDate] [datetime] NOT NULL,
			[LineDocument] [int] NOT NULL,
			[PartNumber] [int] NOT NULL,
			[Model] [nvarchar](40) NOT NULL,
			[Quantity] [int] NULL,
			[TagPriceWithVat] [money] NULL,
			[TagPriceWithOutVat] [money] NULL,
			[IsChecked] [bit] NULL,
			[Currency] [nchar](40) NULL,
		)

		insert into #RelatedProductDocumentDetails
		(
			[ID],	
			[DocumentID],
			[ReffDate],
			[LineDocument],
			[PartNumber],
			[Model],
			[Quantity],
			[TagPriceWithVat],
			[TagPriceWithOutVat],
			[IsChecked],
			[Currency])
		values 
		(
			@p_ID,
			@p_DocumentID,
			@p_ReffDate,
			@p_LineDocument,
			@p_PartNumber,
			@p_Model,
			@p_Quantity,
			@p_TagPriceWithVat,
			@p_TagPriceWithOutVat,
			@p_IsChecked,
			@p_Currency
		)

		update rpdd
		set 
			[DocumentID]=@p_DocumentID,
			[ReffDate]=@p_ReffDate,
			[LineDocument]=@p_LineDocument,
			[PartNumber]=@p_PartNumber,
			[Model]=@p_Model,
			[Quantity]=@p_Quantity,
			[TagPriceWithVat]=@p_TagPriceWithVat,
			[TagPriceWithOutVat]=@p_TagPriceWithOutVat,
			[IsChecked]=@p_IsChecked,
			[Currency]=@p_Currency,
			[LastModifiedDate]=@dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #RelatedProductDocumentDetails rpddl
			inner join [dbo].[RelatedProductDocumentDetails] rpdd on rpddl.[DocumentID]=rpdd.[DocumentID]
			and rpddl.Model = rpdd.Model and rpddl.PartNumber = rpdd.PartNumber
--				AND temp.LineDocument=rpdd.LineDocument
			
		insert into [dbo].[RelatedProductDocumentDetails](
			[DocumentID],
			[ReffDate],
			[LineDocument],
			[PartNumber],
			[Model],
			[Quantity],
			[TagPriceWithVat],
			[TagPriceWithOutVat],
			[IsChecked],
			[Currency],
			[CreatedData],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_DocumentID,
			@p_ReffDate,
			@p_LineDocument,
			@p_PartNumber,
			@p_Model,
			@p_Quantity,
			@p_TagPriceWithVat,
			@p_TagPriceWithOutVat,
			@p_IsChecked,
			@p_Currency,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID		
		from #RelatedProductDocumentDetails temp 
			left join dbo.RelatedProductDocumentDetails rpdd on temp.[DocumentID]=rpdd.[DocumentID] 
			and temp.Model = rpdd.Model and temp.PartNumber = rpdd.PartNumber
		where rpdd.ID is null

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya.A
-- Create date: 2020-04-30 14:38
-- Description: Добавление/обновление/удаление записи в таблице dbo.RelatedProductGuide
-- =============================================
-- xp_SaveRelatedProductGuide p_AddUserID, p_ID, p_Model, p_Description
-- xp_SaveRelatedProductGuide 1472, 51, 'аX01', 'Алеся 65х65х40'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveRelatedProductGuide]
	@p_AddUserID int,
	@p_ID int,
	@p_Model nvarchar(50),
	@p_Supplier nvarchar(50),
	@p_Description nvarchar(255),
	@p_Price money
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()
		
		CREATE TABLE #RelatedProductGuide(	
			[ID]  [int] NULL,			
			[Model] [nvarchar](50) NULL,
			[Supplier] [nvarchar](50) NULL,
			[Description] [nvarchar](255) NULL,
			[Price] [money] NULL,
			)

		insert into #RelatedProductGuide
		(
			[ID],
			[Model],
			[Supplier],
			[Description],
			[Price])
		values 
		(
			@p_ID,
			@p_Model,
			@p_Supplier,
			@p_Description,
			@p_Price
		)			
			
		update rpd
		set 
			[Model] = @p_Model,
			[Supplier] = @p_Supplier,
			[Description]= @p_Description,
			[Price] = @p_Price,
			[LastModifiedDate] = @dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #RelatedProductGuide temp 
			inner join dbo.[RelatedProductGuide] rpd on temp.Model=rpd.Model

		insert into [dbo].[RelatedProductGuide] (
			[Model],
			[Supplier],
			[Description],
			[Price],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_Model
			,@p_Supplier
			,@p_Description
			,@p_Price
			,@dt_now
			,@dt_now
			,@p_AddUserID
			,@p_AddUserID		
		from #RelatedProductGuide temp 
			left join dbo.RelatedProductGuide rpd on rpd.Model=temp.Model
		where rpd.ID is null

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2020-05-29 14:04
-- Description: Добавление/обновление/удаление записи в таблице dbo.RevaluationDocument
-- =============================================
-- xp_SaveRevaluationDocument p_AddUserID, p_ID, p_ReffID, p_ReffDate, p_Status
-- xp_SaveRevaluationDocument 1, 1000, 1, '2020-05-29 14:04', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveRevaluationDocument]
	@p_AddUserID int,
	@p_ID int,
	@p_ReffID bigint = null,
	@p_ReffDate datetime = null,
	@p_Description nvarchar(255) = null,
	@p_Reason nvarchar(255) = null,
	@p_Status int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[RevaluationDocument] :
--	1 	[ID] int
--	2 	[ReffID] bigint
--	3 	[ReffDate] datetime
--	4 	[Status] int
--	5 	[CreatedDate] datetime
--	6 	[LastModifiedDate] datetime
--	7 	[CreatedByUserID] int
--	8 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()
		
		CREATE TABLE #RevaluationDocument(	
			[ID]  [int] NULL,	
			[ReffID] [bigint] NOT NULL,
			[ReffDate] [datetime] NOT NULL,
			[SyncDate] [datetime] NULL,
			[Description] nvarchar(255) NOT NULL,
			[Reason] nvarchar(255) NOT NULL,
			[Status] [int] NOT NULL,
		)

		insert into #RevaluationDocument
		(
			[ID],	
			[ReffID],
			[ReffDate],
			[Description],
			[Reason],
			[Status])
		values 
		(
			@p_ID,
			@p_ReffID,
			@p_ReffDate,
			@p_Description,
			@p_Reason,
			@p_Status
		)

		update rd
		set 
			[ReffID]=@p_ReffID,
			[ReffDate]=@p_ReffDate,
			[SyncDate] = null,
			[Status]=@p_Status,
			[Description] = @p_Description,
			[Reason] = @p_Reason,
			[LastModifiedDate]=@dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #RevaluationDocument temp 
			inner join [dbo].[RevaluationDocument] rd on temp.ReffID=rd.ReffID AND temp.ReffDate=rd.ReffDate
			
		insert into [dbo].[RevaluationDocument](
			[ReffID],
			[ReffDate],
			[Status],
			[Description],
			[Reason],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ReffID,
			@p_ReffDate,
			@p_Status,
			@p_Description,
			@p_Reason,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID		
		from #RevaluationDocument temp 
			left join dbo.RevaluationDocument rd on temp.ReffID=rd.ReffID AND temp.ReffDate=rd.ReffDate
		where rd.ID is null
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya
-- Create date: 2020-05-29 14:48
-- Description: Добавление/обновление/удаление записи в таблице dbo.RevaluationDocumentDetails
-- =============================================
-- xp_SaveRevaluationDocumentDetails p_AddUserID, p_ProductID, p_DocumentID, p_TagPriceWithVAT, p_TagPriceWithOutVAT
-- xp_SaveRevaluationDocumentDetails 1, 63957, 29100, 2000, 1,666
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveRevaluationDocumentDetails]
	@p_AddUserID int,
	@p_ProductID int,
	@p_DocumentID int = null,
	@p_TagPriceWithVAT money = null,
	@p_TagPriceWithOutVAT money = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[RevaluationDocumentDetails] :
--	1 	[ProductID] int
--	2 	[DocumentID] int
--	3 	[TagPriceWithVAT] money
--	4 	[TagPriceWithOutVAT] money
--	5 	[CreatedDate] datetime
--	6 	[LastModifiedDate] datetime
--	7 	[CreatedByUserID] int
--	8 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		CREATE TABLE #RevaluationDocumentDetails(	
			[ProductID] [int] NOT NULL,
			[DocumentID] [int] NOT NULL,
			[TagPriceWithVAT] [money] NOT NULL,
			[TagPriceWithOutVAT] [money] NOT NULL,
		)

		insert into #RevaluationDocumentDetails
		(
			[ProductID],	
			[DocumentID],
			[TagPriceWithVAT],
			[TagPriceWithOutVAT])
		values 
		(
			@p_ProductID,
			@p_DocumentID,
			@p_TagPriceWithVAT,
			@p_TagPriceWithOutVAT
		)

		update rdd
		set 
			[DocumentID]=@p_DocumentID,
			[TagPriceWithVAT]=@p_TagPriceWithVAT,
			[TagPriceWithOutVAT]=@p_TagPriceWithOutVAT,
			[LastModifiedDate]=@dt_now,
			[LastModifiedByUserID]=@p_AddUserID
		from #RevaluationDocumentDetails temp 
			inner join [dbo].[RevaluationDocumentDetails] rdd on temp.ProductID=rdd.ProductID
			
		insert into [dbo].[RevaluationDocumentDetails](
			[ProductID],
			[DocumentID],
			[TagPriceWithVAT],
			[TagPriceWithOutVAT],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID])						
		select 
			@p_ProductID,
			@p_DocumentID,
			@p_TagPriceWithVAT,
			@p_TagPriceWithOutVAT,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID		
		from #RevaluationDocumentDetails temp 
			left join dbo.RevaluationDocumentDetails rdd on temp.ProductID=rdd.ProductID
		where rdd.ProductID is null
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov
-- Create date: 2020-02-25 12:49
-- Description: Добавление/обновление/удаление записи в таблице dbo.TransferDocument
-- =============================================
-- Services Test
-- xp_SaveSaleDocument_20210216172933 15,15,0,1,'','668',0,'','',0,  '|','1|','174473|','145394,166666667|','157025,7|','130854,75','0|','Пр|','0|','0|','|','|',   'BX01|','114|','1|','100|','9999,99999999999|','0|','0|',    '','',    '','','','','','','',    '','','',    '','','','',  '','',''
-- xp_SaveSaleDocument_20210216172933 0,0,0,9,'','',0,'','',0,  '','','','','','','','','','','','',   'BX01|','114|','1|','100|','400|','100|','400|',    '','',    '','','','','','','',    '','','',    '','','','',  '','',''
-- xp_SaveSaleDocument_20210216172933 0,0,0,9,'','',0,'','',0,  '0|','1|','1|','1|','1|','1|','1|','1|','1|','1|','1|','1|',   '','','','','','','',    '','',    '','','','','','','',    '','','','',    '','','','',  '','','',   '',''
-- xp_SaveSaleDocument 0,0,0,9,'','',0,'','',0, 0,  '','','','','','','','','','','','',   'BX03|EG02','113|116','5017|5022','5|10','0|0','0|0','0|0','0|0',    '','',    '','','','','','','','','',    '','','','',    '','','','',  '','','',   '',''
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveSaleDocument]
	-- документ
    @p_AddUserID int,
	@p_UserID int,
    @p_ID int,
    @p_Type int,
	@p_ClientCardNumber nvarchar(40) = '',
	@p_Currency nvarchar(40) = '',
	@p_PosID int=0,
	@p_WorkShiftID int = 0,
	@p_ClientPhone nvarchar(MAX) = '',
	@p_ClientEmail nvarchar(MAX) = '',
	@p_SenderCheck bit = 1,

	-- продукция
    @p_MassProductID nvarchar(MAX) = '',
	@p_MassProductQuantity nvarchar(MAX) = '',
	@p_MassProductTagPriceWithVat nvarchar(MAX) = '',
	@p_MassProductTagPriceWithOutVat nvarchar(MAX) = '',
	@p_MassProductSalePriceWithVat nvarchar(MAX) = '',
	@p_MassProductSalePriceWithoutVat nvarchar(MAX) = '',
	@p_MassProductDiscountType nvarchar(MAX) = '',
	@p_MassProductDiscountDescription nvarchar(MAX) = '',
	@p_MassProductPriceFromCRM nvarchar(MAX) = '',
	@p_MassProductReasonReturnType nvarchar(MAX) = '',
	@p_MassProductReasonReturnDescription nvarchar(MAX) = '',
	@p_MassProductInternetNumber nvarchar(MAX) = '',

	-- сопутствующие товары
    @p_MassRelationProductModel nvarchar(MAX) = '',
    @p_MassRelationProductPartNumber nvarchar(MAX) = '',
	@p_MassRelationProductSupplier nvarchar(MAX) = '',
	@p_MassRelationProductQuantity nvarchar(MAX) = '',
	@p_MassRelationProductTagPriceWithVat nvarchar(MAX) = '',
	@p_MassRelationProductTagPriceWithOutVat nvarchar(MAX) = '',
	@p_MassRelationProductSalePriceWithVat nvarchar(MAX) = '',
	@p_MassRelationProductSalePriceWithoutVat nvarchar(MAX) = '',
	

	-- купоны
	@p_MassCouponID nvarchar(MAX) = '',
	@p_MassCouponNumber nvarchar(MAX) = '',
	--@p_MassCouponDiscount nvarchar(MAX) = '',

	-- виды оплат
	@p_MassPaymentID nvarchar(MAX) = '',
	@p_MassPaymentType nvarchar(MAX) = '',
	@p_MassPaymentAmount nvarchar(MAX) = '',
	@p_MassExtReffID nvarchar(MAX) = '',
	@p_MassCardType nvarchar(MAX) = '',
	@p_MassCardNumber nvarchar(MAX) = '',
	@p_MassCardDate nvarchar(MAX) = '',
	@p_MassCreditNumber nvarchar(MAX) = '',
	@p_MassConditionType nvarchar(MAX) = '',

	-- виды предоплат
	@p_MassPrepaymentID nvarchar(MAX) = '',
	@p_MassUseDocumentID nvarchar(MAX) = '',
	@p_MassPrepaymentAmount nvarchar(MAX) = '',
	@p_MassPrepaymentDescription nvarchar(MAX) = '',

	-- виды услуг
	@p_MassServicesID nvarchar(MAX) = '',
	@p_MassServicesType nvarchar(MAX) = '',
	@p_MassServicesAmount nvarchar(MAX) = '',
	@p_MassServicesDescription nvarchar(MAX) = '',

	-- доп скидки
	@p_MassAdditionalDiscountID nvarchar(MAX) = '',
    @p_MassAdditionalDiscountExtRefID nvarchar(MAX) = '',
    @p_MassAdditionalDiscountAmount nvarchar(MAX) = '', 

	-- квитанции покупки
	@p_MassScrapDocumentID nvarchar(MAX) = '',
	@p_MassScrapDocumentIDExtRefID nvarchar(MAX) = '',

    @p_ShowRes bit = 1
AS
BEGIN
    SET NOCOUNT ON

    DECLARE
		@res int=0,
		@StrErr nvarchar(max),
		@dt_now datetime=getdate(),
		@delimeter nvarchar(10)= '|',
		@p_CounterProduct int = 0,
		@p_CounterRelatedProduct int = 0,
		@p_CounterCoupon int = 0,
		@p_CounterPayment int = 0,
		@p_CounterPrepayment int = 0,
		@p_CounterServices int = 0,
		@p_CounterAdditionalDiscount int = 0,
		@p_CounterScrapDocument int = 0,
		@p_Amount money = 0,
		@p_Count int = 0

	SET @p_MassProductTagPriceWithVat = REPLACE(@p_MassProductTagPriceWithVat, ',', '.')
	SET @p_MassProductTagPriceWithOutVat = REPLACE(@p_MassProductTagPriceWithOutVat, ',', '.')
	SET @p_MassProductSalePriceWithVat = REPLACE(@p_MassProductSalePriceWithVat, ',', '.')
	SET @p_MassProductSalePriceWithoutVat = REPLACE(@p_MassProductSalePriceWithoutVat, ',', '.')
	SET @p_MassProductPriceFromCRM = REPLACE(@p_MassProductPriceFromCRM, ',', '.')

	SET @p_MassRelationProductTagPriceWithVat = REPLACE(@p_MassRelationProductTagPriceWithVat, ',', '.')
	SET @p_MassRelationProductTagPriceWithOutVat = REPLACE(@p_MassRelationProductTagPriceWithOutVat, ',', '.')
	SET @p_MassRelationProductSalePriceWithVat = REPLACE(@p_MassRelationProductSalePriceWithVat, ',', '.')
	SET @p_MassRelationProductSalePriceWithOutVat = REPLACE(@p_MassRelationProductSalePriceWithOutVat, ',', '.')

	SET @p_MassPaymentAmount = REPLACE(@p_MassPaymentAmount, ',', '.')
	SET @p_MassPrepaymentAmount = REPLACE(@p_MassPrepaymentAmount, ',', '.')
	SET @p_MassServicesAmount = REPLACE(@p_MassServicesAmount, ',', '.')
	SET @p_MassAdditionalDiscountAmount = REPLACE(@p_MassAdditionalDiscountAmount, ',', '.')
	
	-- создаем временную таблицу товаров
    CREATE TABLE #SaleProduct(
            [LineDocument] int,
            [ProductID] int,
            [Quantity] int,
			[TagPriceWithVat] money,
			[TagPriceWithOutVat] money,
			[PriceFromCRM] money,
			[DiscountType] int,
			[DiscountDescription] text,
			[ReasonReturnType] int,
			[ReasonReturnDescription] text,
			[SalePriceWithVat] money,
			[SalePriceWithoutVat] money,
			[InternetNumber] int
    )

	-- создаем временную таблицу сопутствующих
    CREATE TABLE #SaleRelationProduct(
            [LineDocument] int,
            [PartNumber] int,
			[Supplier] int,
            [Model] nvarchar(40),
            [Quantity] int,
			[TagPriceWithVat] money,
			[TagPriceWithOutVat] money,
            [SalePriceWithVat] money,
			[SalePriceWithoutVat] money
    )

	-- создаем временную таблицу купонов
    CREATE TABLE #SaleCoupon(
			[LineDocument] int,
			[ID] int,
            [CouponID] nvarchar(40)
    )

	-- создаем временную таблицу оплат
    CREATE TABLE #SalePayment(
			[LineDocument] int,
			[ID] int,
            [PaymentType] int,
			[PaymentAmount] money,
			[ExtReffID] bigint,
			[CardType] int,
			[CardNumber] nvarchar(40),
			[CardDate] nvarchar(40),
			[CreditNumber] nvarchar(40),
			[ConditionType] nvarchar(40),
    )

	-- создаем временную таблицу предоплат
    CREATE TABLE #SalePrepayment(
			[LineDocument] int,
			[ID] int,
			[UseDocumentID] int,
			[Amount] money,
			[Description] nvarchar(255)
    )

	-- создаем временную таблицу услуг
    CREATE TABLE #SaleServices(
			[LineDocument] int,
			[ID] int,
			[Type] int,
			[Amount] money,
			[Description] nvarchar(255)
    )

	-- создаем временную таблицу доп скидки
    CREATE TABLE #SaleAdditionalDiscount(
			[LineDocument] int,
			[ID] int,
			[Amount] money,
			[ExtRefID] bigint
    )

	-- создаем временную таблицу квитанций
    CREATE TABLE #SaleScrapDocument(
			[LineDocument] int,
			[ID] int,
			[ScrapDocumentID] int
    )

	-- получаем статус товаров
	SELECT @p_CounterProduct=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassProductID,@delimeter) WHERE Val1>0
	-- получаем статус сопутствующих
	SELECT @p_CounterRelatedProduct=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductModel,@delimeter) WHERE Val1<>''
	-- получаем статус купонов
	SELECT @p_CounterCoupon=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassCouponID,@delimeter) WHERE Val1<>''
	-- получаем статус оплат
	SELECT @p_CounterPayment=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassPaymentID,@delimeter) WHERE Val1<>''
	-- получаем статус предоплат
	SELECT @p_CounterPrepayment=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassPrepaymentID,@delimeter) WHERE Val1<>''
	-- получаем статус предоплат
	SELECT @p_CounterServices=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassServicesID,@delimeter) WHERE Val1<>''
	-- получаем статус предоплат
	SELECT @p_CounterAdditionalDiscount=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassAdditionalDiscountID,@delimeter) WHERE Val1<>''
	-- получаем статус квитанций
	SELECT @p_CounterScrapDocument=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassScrapDocumentID,@delimeter) WHERE Val1<>''
	
	-- добавляем строки товаров во временную таблицу
	if @p_CounterProduct>0 begin
		INSERT INTO #SaleProduct([LineDocument],[ProductID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassProductID,@delimeter)
		ORDER BY CounterVal

		UPDATE #SaleProduct SET [Quantity] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductQuantity,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]
    
		UPDATE #SaleProduct SET [TagPriceWithVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductTagPriceWithVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [TagPriceWithOutVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductTagPriceWithOutVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [SalePriceWithVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductSalePriceWithVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [SalePriceWithoutVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductSalePriceWithoutVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [DiscountType] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductDiscountType,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [DiscountDescription] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductDiscountDescription,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [PriceFromCRM] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductPriceFromCRM,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [ReasonReturnType] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductReasonReturnType,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [ReasonReturnDescription] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductReasonReturnDescription,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]

		UPDATE #SaleProduct SET [InternetNumber] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassProductInternetNumber,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleProduct.[LineDocument]
	end
	
	-- добавляем строки сопутствующих во временную таблицу
	if @p_CounterRelatedProduct>0 begin
		INSERT INTO #SaleRelationProduct([LineDocument],[Model])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductModel,@delimeter)
		ORDER BY CounterVal

		UPDATE #SaleRelationProduct SET [PartNumber] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductPartNumber,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleRelationProduct.[LineDocument]

		UPDATE #SaleRelationProduct SET [Supplier] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductSupplier,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleRelationProduct.[LineDocument]

		UPDATE #SaleRelationProduct SET [Quantity] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductQuantity,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleRelationProduct.[LineDocument]

		UPDATE #SaleRelationProduct SET [TagPriceWithVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductTagPriceWithVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleRelationProduct.[LineDocument]

		UPDATE #SaleRelationProduct SET [TagPriceWithOutVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductTagPriceWithOutVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleRelationProduct.[LineDocument]

		UPDATE #SaleRelationProduct SET [SalePriceWithVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductSalePriceWithVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleRelationProduct.[LineDocument]

		UPDATE #SaleRelationProduct SET [SalePriceWithoutVat] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassRelationProductSalePriceWithoutVat,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleRelationProduct.[LineDocument]
	end

	-- добавляем строки купонов во временную таблицу
	if @p_CounterCoupon>0 begin
		INSERT INTO #SaleCoupon([LineDocument],[ID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassCouponID,@delimeter)
		ORDER BY CounterVal
		
		UPDATE #SaleCoupon SET [CouponID] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassCouponNumber,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleCoupon.[LineDocument]

	end

    -- добавляем строки оплат во временную таблицу
	if @p_CounterPayment>0 begin
		INSERT INTO #SalePayment([LineDocument],[ID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassPaymentID,@delimeter)
		ORDER BY CounterVal

		UPDATE #SalePayment SET [PaymentType] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassPaymentType,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]

		UPDATE #SalePayment SET [PaymentAmount] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassPaymentAmount,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]

		UPDATE #SalePayment SET [ExtReffID] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassExtReffID,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]

		UPDATE #SalePayment SET [CardType] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassCardType,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]

		UPDATE #SalePayment SET [CardNumber] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassCardNumber,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]

		UPDATE #SalePayment SET [CardDate] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassCardDate,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]

		UPDATE #SalePayment SET [CreditNumber] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassCreditNumber,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]

		--@p_MassConditionType
		UPDATE #SalePayment SET [ConditionType] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassConditionType,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePayment.[LineDocument]
	end

    -- добавляем строки предоплат во временную таблицу
	if @p_CounterPrepayment>0 begin
		INSERT INTO #SalePrepayment([LineDocument],[ID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassPrepaymentID,@delimeter)
		ORDER BY CounterVal

		UPDATE #SalePrepayment SET [UseDocumentID] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassUseDocumentID,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePrepayment.[LineDocument]

		UPDATE #SalePrepayment SET [Amount] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassPrepaymentAmount,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePrepayment.[LineDocument]

		UPDATE #SalePrepayment SET [Description] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassPrepaymentDescription,@delimeter)) AS it
		WHERE it.[CounterVal] = #SalePrepayment.[LineDocument]
	end

    -- добавляем строки услуг во временную таблицу
	if @p_CounterServices>0 begin
		INSERT INTO #SaleServices([LineDocument],[ID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassServicesID,@delimeter)
		ORDER BY CounterVal

		UPDATE #SaleServices SET [Type] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassServicesType,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleServices.[LineDocument]

		UPDATE #SaleServices SET [Amount] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassServicesAmount,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleServices.[LineDocument]

		UPDATE #SaleServices SET [Description] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassServicesDescription,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleServices.[LineDocument]
	end

	-- добавляем строки доп скидки во временную таблицу
	if @p_CounterAdditionalDiscount>0 begin
		INSERT INTO #SaleAdditionalDiscount([LineDocument],[ID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassAdditionalDiscountID,@delimeter)
		ORDER BY CounterVal

		UPDATE #SaleAdditionalDiscount SET [ExtRefID] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassAdditionalDiscountExtRefID ,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleAdditionalDiscount.[LineDocument]

		UPDATE #SaleAdditionalDiscount SET [Amount] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassAdditionalDiscountAmount ,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleAdditionalDiscount.[LineDocument]		
	end

	-- добавляем строки квитанций во временную таблицу
	if @p_CounterScrapDocument>0 begin
		INSERT INTO #SaleScrapDocument([LineDocument],[ID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassScrapDocumentID,@delimeter)
		ORDER BY CounterVal

		UPDATE #SaleScrapDocument SET [ScrapDocumentID] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassScrapDocumentIDExtRefID,@delimeter)) AS it
		WHERE it.[CounterVal] = #SaleScrapDocument.[LineDocument]		
	end

	 --SELECT * FROM #SaleProduct
	 --SELECT * FROM #SaleRelationProduct
	 --SELECT * FROM #SaleCoupon
	 --SELECT * FROM #SalePayment
	 --SELECT * FROM #SalePrepayment
	 --SELECT * FROM #SaleServices
	 --SELECT * FROM #SaleAdditionalDiscount


	 set @p_Count = (SELECT IsNull(Sum(IsNull([Quantity],0)),0) from #SaleProduct) +
							  (SELECT IsNull(Sum(IsNull([Quantity],0)),0) from #SaleRelationProduct) +
							  (SELECT Count(IsNull([ID],0)) from #SaleServices) +
							  (SELECT Count(IsNull([ID],0)) from #SalePrepayment)+
							  (SELECT Count(IsNull([ID],0)) from #SaleScrapDocument)
							  

	set @p_Amount =  ( (SELECT IsNull(Sum(IsNull([SalePriceWithVAT],0)),0) from #SaleProduct) +
							  (SELECT IsNull(Sum(IsNull([SalePriceWithVAT],0)),0) from #SaleRelationProduct) +
							  (SELECT IsNull(Sum(IsNull([Amount],0)),0) from #SaleServices) +
							  (SELECT IsNull(Sum(IsNull([Amount],0)),0) from #SalePrepayment) +
							  (SELECT IsNull(Sum(IsNull([Amount],0)),0)
									FROM
									(
										SELECT
											(SELECT IsNull(Sum(IsNull(ss.[Summa],0)),0) FROM [dbo].[ScrapDocumentDetails] AS ss WHERE ss.[DocumentID]=sd.[ID]) AS [Amount]
											  FROM #SaleScrapDocument AS sdb
												inner join [dbo].[ScrapDocument] AS sd ON sd.[ID]=sdb.[ScrapDocumentID]											  
									) as InnerSumm
							    )
								- (SELECT IsNull(Sum(IsNull([Amount],0)),0) from #SaleAdditionalDiscount))


    if @p_ID=0 begin
        BEGIN TRANSACTION tr_insert
-- Вставка документа
------------------------------------------------------------------------------------------------------------------------

            INSERT INTO [dbo].[SaleDocument] (
                [Type],
                [UserID],
                [ClientCardNumber],
                [Currency],
				[ClientPhone],
				[ClientEmail],
				[SendCheck],
                [CreatedDate],
                [LastModifiedDate],
                [CreatedByUserID],
                [LastModifiedByUserID],
				[Count],
				[Amount]
				)
            VALUES (
                @p_Type,
                @p_UserID,
                @p_ClientCardNumber,
                @p_Currency,
				@p_ClientPhone,
				@p_ClientEmail,
				@p_SenderCheck,
                @dt_now,
                @dt_now,
                @p_AddUserID,
                @p_AddUserID,
				@p_Count,
				@p_Amount)

            SET @res=SCOPE_IDENTITY()

-- Вставка продуктов
------------------------------------------------------------------------------------------------------------------------
			INSERT INTO [dbo].[SaleDocumentProduct]
				([DocumentID],
				[LineDocument],
				[ProductID],
				[Quantity],
				[TagPriceWithVat],
				[TagPriceWithOutVat],
				[PriceFromCRM],
				[DiscountType],
				[DiscountDescription],
			    [ReasonReturnType],
			    [ReasonReturnDescription],
			    [SalePriceWithVat],
			    [SalePriceWithoutVat],
				[InternetNumber],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@res,
				sp.[LineDocument],
				sp.[ProductID],
				sp.[Quantity],
				sp.[TagPriceWithVat],
				sp.[TagPriceWithOutVat],
				sp.[PriceFromCRM],
				sp.[DiscountType],
				sp.[DiscountDescription],
				sp.[ReasonReturnType],
				sp.[ReasonReturnDescription],
				sp.[SalePriceWithVat],
				sp.[SalePriceWithoutVat],
				sp.[InternetNumber],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleProduct sp
			
			if(@p_Type = 9)
			begin
				-- резервируем продукцию
				UPDATE [dbo].[Product]
				SET [Status] = 2 -- резерв 
				FROM
					(SELECT [ProductID] FROM #SaleProduct) as sdd
				WHERE 
					[dbo].[Product].[ID] = sdd.[ProductID]
			
				-- фиксируем изменения в таблице истории продукции
				INSERT INTO [dbo].[ProductTransfer] (
					[ProductID],
					[Status],
					[ExReffOperationType],
					[CreatedDate],
					[CreatedByUserID]
					)
				SELECT
					sp.[ProductID],
					2, -- резерв
					4, -- 4-продажа
					@dt_now,
					@p_AddUserID
				FROM #SaleProduct sp
			end

-- Вставка сопутствующих
-----------------------------------------------------------------------------------------------------------------------			

			INSERT INTO [dbo].[SaleDocumentRelatedProduct]
				([DocumentID]
			   ,[LineDocument]
			   ,[PartNumber]
			   ,[Supplier]
			   ,[Model]
			   ,[Quantity]
			   ,[TagPriceWithVat]
			   ,[TagPriceWithoutVat]
			   ,[SalePriceWithVat]
			   ,[SalePriceWithoutVat]
			   ,[CreatedDate]
			   ,[LastModifiedDate]
			   ,[CreatedByUserID]
			   ,[LastModifiedByUserID])
			SELECT
				@res,
				s.[LineDocument],
				s.[PartNumber],
				s.[Supplier],
				s.[Model],
				s.[Quantity],
				s.[TagPriceWithVat],
				s.[TagPriceWithOutVat],
				s.[SalePriceWithVat],
				s.[SalePriceWithoutVat],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleRelationProduct s

-- Вставка купонов
------------------------------------------------------------------------------------------------------------------------

			INSERT INTO [dbo].[SaleDocumentCoupon]
				([DocumentID],
				[CouponID],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@res,
				s.[CouponID],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleCoupon s

-- Вставка оплат
------------------------------------------------------------------------------------------------------------------------

			INSERT INTO [dbo].[SaleDocumentPayment]
				([DocumentID],
				[PosID],
				[WorkShiftID],
				[PaymentType],
				[Amount],
				[ExtReffID],
				[CardType],
				[CardNumber],
				[CardDate],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID], 
				[CreditNumber],
				[ConditionType])
			SELECT
				@res,
				@p_PosID,
				@p_WorkShiftID,
				s.[PaymentType],
				s.[PaymentAmount],
				s.[ExtReffID],
				s.[CardType],
				s.[CardNumber],
				s.[CardDate],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID,
				s.[CreditNumber],
				s.[ConditionType]
			FROM #SalePayment s	

-- Вставка предоплат
------------------------------------------------------------------------------------------------------------------------
		if(@p_Type = 9)
			begin
			INSERT INTO [dbo].[SaleDocumentPrepayment]
				(
				[DocumentID],
				[UseDocumentID],
				[Amount],
				[Description],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@res,
				CASE WHEN @p_Type=6 THEN s.[UseDocumentID] ELSE 0 END,
				s.[Amount],
				s.[Description],
				@dt_now,
				Null,
				@p_AddUserID,
				Null
			FROM #SalePrepayment s
			end

		if(@p_Type = 6)
			begin
			Update sdp
				set sdp.[UseDocumentID] = @res,
				sdp.[LastModifiedDate] = @dt_now,
				sdp.[LastModifiedByUserID] = @p_AddUserID			
			FROM #SalePrepayment s
			inner join [dbo].[SaleDocumentPrepayment] sdp on s.ID = sdp.ID	
			end
			

-- Вставка услуг
------------------------------------------------------------------------------------------------------------------------
			INSERT INTO [dbo].[SaleDocumentServices]
				(
				[DocumentID],
				[Type],
				[Amount],
				[Description],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@res,
				s.[Type],
				s.[Amount],
				s.[Description],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleServices s 

-- Вставка доп скидки
------------------------------------------------------------------------------------------------------------------------
			INSERT INTO [dbo].[SaleDocumentAdditionalDiscount]
				(
				[DocumentID],
				[ExtRefID],
				[Amount],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@res,
				s.[ExtRefID],
				s.[Amount],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleAdditionalDiscount s

-- Вставка квитанций
------------------------------------------------------------------------------------------------------------------------
			INSERT INTO [dbo].[SaleDocumentScrapDocument]
				(
				[DocumentID],
				[ScrapDocumentID],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@res,
				s.[ScrapDocumentID],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleScrapDocument s

        COMMIT TRANSACTION tr_insert
    end

    else if  @p_ID>0 begin
        BEGIN TRANSACTION tr_update

-- Обновление документа
------------------------------------------------------------------------------------------------------------------------

			-- обновление документа
			Update [dbo].[SaleDocument]
			set 
				[Type]=@p_Type,
				[UserID]=@p_UserID,
				[ClientCardNumber]=@p_ClientCardNumber,
				[Currency]=@p_Currency,
				[ClientPhone] = @p_ClientPhone,
				[ClientEmail] = @p_ClientEmail,
				[SendCheck]= @p_SenderCheck,
				[LastModifiedDate]=@dt_now,
				[LastModifiedByUserID]=@p_AddUserID,
				[Count] = @p_Count,
				[Amount] = @p_Amount
			where ID = @p_ID

			-- получаем идентификатор документа
			set @res = case when @@rowcount=1 then @p_ID else 0 end	

-- Обновление продукции
------------------------------------------------------------------------------------------------------------------------
			-- обновление продукции
			UPDATE [dbo].[SaleDocumentProduct]
			SET 
				[LineDocument]=sdd.[LineDocument]
				,[Quantity]=sdd.[Quantity]
				,[TagPriceWithVat]=sdd.[TagPriceWithVat]
				,[TagPriceWithoutVat]=sdd.[TagPriceWithoutVat]
				,[PriceFromCRM]=sdd.[PriceFromCRM]
				,[DiscountType]=sdd.[DiscountType]
				,[DiscountDescription]=sdd.[DiscountDescription]
				,[ReasonReturnType]=sdd.[ReasonReturnType]
				,[ReasonReturnDescription]=sdd.[ReasonReturnDescription]
				,[SalePriceWithVat]=sdd.[SalePriceWithVat]
				,[SalePriceWithoutVat]=sdd.[SalePriceWithoutVat]
				,[InternetNumber]=sdd.[InternetNumber]
			FROM #SaleProduct as sdd
			WHERE
				[dbo].[SaleDocumentProduct].DocumentID=@p_ID
				and [dbo].[SaleDocumentProduct].[ProductID]=sdd.[ProductID]

			if(@p_Type = 9)
			begin
			-- фиксируем изменения в таблице истории продукции
			INSERT INTO [dbo].[ProductTransfer] (
				[ProductID],
				[Status],
				[ExReffOperationType],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT
				sp.[ProductID],
				2, -- резерв
				4, -- 4-продажа
				@dt_now,
				@p_AddUserID
			FROM #SaleProduct sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentProduct] as sdd WHERE (sdd.[DocumentID]=@p_ID and sdd.[ProductID]=sp.[ProductID]))

			-- вставка продукции
			INSERT INTO [dbo].[SaleDocumentProduct]
			   ([DocumentID],
				[LineDocument],
				[ProductID],
				[Quantity],
				[TagPriceWithVat],
				[TagPriceWithOutVat],
				[PriceFromCRM],
				[DiscountType],
				[DiscountDescription],
			    [ReasonReturnType],
			    [ReasonReturnDescription],
			    [SalePriceWithVat],
			    [SalePriceWithoutVat],
				[InternetNumber],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@p_ID,
				sp.[LineDocument],
				sp.[ProductID],
				sp.[Quantity],
				sp.[TagPriceWithVat],
				sp.[TagPriceWithOutVat],
				sp.[PriceFromCRM],
				sp.[DiscountType],
				sp.[DiscountDescription],
				sp.[ReasonReturnType],
				sp.[ReasonReturnDescription],
				sp.[SalePriceWithVat],
				sp.[SalePriceWithoutVat],
				sp.[InternetNumber],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleProduct sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentProduct] as sdd WHERE (sdd.[DocumentID]=@p_ID and sdd.[ProductID]=sp.[ProductID]))

			-- резервируем продукцию
			UPDATE [dbo].[Product]
			SET [Status] = 2 -- резерв 
			FROM
				(SELECT [ProductID] FROM #SaleProduct) as sdd
			WHERE 
				[dbo].[Product].[ID] = sdd.[ProductID]

			-- возвращаем продукцию на склад
			UPDATE [dbo].[Product]
			SET [Status] = 0 -- на складе 
			FROM
				(SELECT [ProductID]
					FROM [dbo].[SaleDocumentProduct] sd
					WHERE
						NOT EXISTS (SELECT ID FROM #SaleProduct as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ProductID]=sd.[ProductID]))
						AND sd.[DocumentID]=@p_ID
				) as sdd
			WHERE 
				[dbo].[Product].[ID] = sdd.[ProductID]

			-- фиксируем изменения в таблице истории продукции
			INSERT INTO [dbo].[ProductTransfer] (
				[ProductID],
				[Status],
				[ExReffOperationType],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT
				sd.[ProductID],
				0, -- на складе
				4, -- 4-продажа
				@dt_now,
				@p_AddUserID
			FROM [dbo].[SaleDocumentProduct] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SaleProduct as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ProductID]=sp.[ProductID]))
				AND sd.[DocumentID]=@p_ID

			-- удаление продуктов
			DELETE sd
			FROM [dbo].[SaleDocumentProduct] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SaleProduct as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ProductID]=sd.[ProductID]))
				AND sd.[DocumentID]=@p_ID
		end

-- Обновление сопутствующих
------------------------------------------------------------------------------------------------------------------------

			-- обновление сопутствующих
			UPDATE [dbo].[SaleDocumentRelatedProduct]
			SET 
				[LineDocument]=sdd.[LineDocument]
				,[Quantity]=sdd.[Quantity]
				,[TagPriceWithVat]=sdd.[TagPriceWithVat]
				,[TagPriceWithoutVat]=sdd.[TagPriceWithoutVat]
				,[SalePriceWithVat]=sdd.[SalePriceWithVat]
				,[SalePriceWithoutVat]=sdd.[SalePriceWithoutVat]
			FROM (
					SELECT * FROM #SaleRelationProduct srp
				) as sdd
			WHERE
				[dbo].[SaleDocumentRelatedProduct].DocumentID=@p_ID
				and [dbo].[SaleDocumentRelatedProduct].[Model]=sdd.[Model]
				and [dbo].[SaleDocumentRelatedProduct].[PartNumber]=sdd.[PartNumber]
				and [dbo].[SaleDocumentRelatedProduct].[Supplier]=sdd.[Supplier]

			-- вставка сопутствующих
			INSERT INTO [dbo].[SaleDocumentRelatedProduct]
				([DocumentID]
			   ,[LineDocument]
			   ,[PartNumber]
			   ,[Supplier]
			   ,[Model]
			   ,[Quantity]
			   ,[TagPriceWithVat]
			   ,[TagPriceWithoutVat]
			   ,[SalePriceWithVat]
			   ,[SalePriceWithoutVat]
			   ,[CreatedDate]
			   ,[LastModifiedDate]
			   ,[CreatedByUserID]
			   ,[LastModifiedByUserID])
			SELECT
				@p_ID,
				srp.[LineDocument],
				srp.[PartNumber],
				srp.[Supplier],
				srp.[Model],
				srp.[Quantity],
				srp.[TagPriceWithVat],
				srp.[TagPriceWithOutVat],
				srp.[SalePriceWithVat],
				srp.[SalePriceWithoutVat],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleRelationProduct srp
			WHERE
				NOT EXISTS (
							SELECT ID FROM [dbo].[SaleDocumentRelatedProduct] as sdd
							WHERE (
									sdd.[DocumentID]=@p_ID
									and sdd.[Model]=srp.[Model]
									and sdd.[PartNumber]=srp.[PartNumber]
									and sdd.[Supplier]=srp.[Supplier]
								  )
							)

			-- удаление сопутствующих
			DELETE sd
			FROM [dbo].[SaleDocumentRelatedProduct] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SaleRelationProduct as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[Model]=sd.[Model] AND [PartNumber]=sd.[PartNumber]  AND [Supplier]=sd.[Supplier]))
				AND sd.[DocumentID]=@p_ID

-- Обновление купонов
------------------------------------------------------------------------------------------------------------------------

			-- обновление купонов
			UPDATE [dbo].[SaleDocumentCoupon]
			SET 
				[CouponID]=sdd.CouponID
				,[LastModifiedDate]=@dt_now
				,[LastModifiedByUserID]=@p_AddUserID
			FROM (
					SELECT * FROM #SaleCoupon sp
				) as sdd
			WHERE
				[dbo].[SaleDocumentCoupon].DocumentID=@p_ID
				and [dbo].[SaleDocumentCoupon].[ID]=sdd.[ID]

			-- удаление купонов
			DELETE sd
			FROM [dbo].[SaleDocumentCoupon] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SaleCoupon as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ID]=sd.[ID]))
				AND sd.[DocumentID]=@p_ID

			-- вставка купонов
			INSERT INTO [dbo].[SaleDocumentCoupon]
				([DocumentID],
				[CouponID],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@p_ID,
				sp.[CouponID],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleCoupon sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentCoupon] as sdd WHERE (sdd.[DocumentID]=@p_ID and sdd.[ID]=sp.[ID]))

-- Обновление оплат
------------------------------------------------------------------------------------------------------------------------

			-- обновление оплат
			UPDATE [dbo].[SaleDocumentPayment]
			SET 
				[PaymentType]=sdd.PaymentType
				,[PosID]=@p_PosID
				,[WorkShiftID] = @p_WorkShiftID
				,[Amount] = sdd.[PaymentAmount]
				,[ExtReffID] = sdd.[ExtReffID]
				,[CardType] = sdd.[CardType]
				,[CardNumber] = sdd.[CardNumber]
				,[CardDate] = sdd.[CardDate]
				,[LastModifiedDate]=@dt_now
				,[LastModifiedByUserID]=@p_AddUserID
				,[CreditNumber]=sdd.CreditNumber
				,[ConditionType]=sdd.ConditionType
			FROM (
					SELECT * FROM #SalePayment sp
				) as sdd
			WHERE
				[dbo].[SaleDocumentPayment].DocumentID=@p_ID
				and [dbo].[SaleDocumentPayment].[ID]=sdd.[ID] 

			-- удаление оплат
			DELETE sd
			FROM [dbo].[SaleDocumentPayment] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SalePayment as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ID]=sd.[ID]))
				AND sd.[DocumentID]=@p_ID

			-- вставка оплат
			INSERT INTO [dbo].[SaleDocumentPayment]
				([DocumentID],
				[PaymentType],
				[PosID],
				[WorkShiftID],
				[Amount],
				[ExtReffID],
				[CardType],
				[CardNumber],
				[CardDate],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID],
				[CreditNumber],
				[ConditionType])
			SELECT
				@p_ID,
				sp.[PaymentType],
				@p_PosID,
				@p_WorkShiftID,
				sp.[PaymentAmount],
				sp.[ExtReffID],
				sp.[CardType],
				sp.[CardNumber],
				sp.[CardDate],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID,
				sp.CreditNumber,
				sp.ConditionType
			FROM #SalePayment sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentPayment] as sdd WHERE (sdd.[DocumentID]=@p_ID and sdd.[ID]=sp.[ID]))

			UPDATE [dbo].[SaleDocumentPrepayment]
				SET [UseDocumentID] = @p_ID
			FROM
				#SalePayment sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentPayment] as sdd WHERE (sdd.[DocumentID]=@p_ID and sdd.[ID]=sp.[ID]))
				AND [dbo].[SaleDocumentPrepayment].[ID] = sp.[ExtReffID]
				AND sp.[PaymentType] = 26

-- Обновление предоплат
------------------------------------------------------------------------------------------------------------------------
		
			-- обновление предоплат
			if(@p_Type = 9)
			begin
			UPDATE [dbo].[SaleDocumentPrepayment]
			SET 
				[Amount] = sdd.[Amount]
				,[Description] = sdd.[Description]
				,[LastModifiedDate]=@dt_now
				,[LastModifiedByUserID]=@p_AddUserID
			FROM (
					SELECT * FROM #SalePrepayment sp
				) as sdd
			WHERE
				[dbo].[SaleDocumentPrepayment].DocumentID=@p_ID
				AND [dbo].[SaleDocumentPrepayment].[ID]=sdd.[ID]
			end

			if(@p_Type = 9)
			begin
			Update [dbo].[SaleDocumentPrepayment]
				set [UseDocumentID] = @res,
				[LastModifiedDate] = @dt_now,
				[LastModifiedByUserID] = @p_AddUserID	
			FROM (
					SELECT * FROM #SalePrepayment sp
				) as sdd
			WHERE
				[dbo].[SaleDocumentPrepayment].DocumentID=@p_ID
				AND [dbo].[SaleDocumentPrepayment].[ID]=sdd.[ID]
			end

			-- удаление предоплат
			DELETE sd
			FROM [dbo].[SaleDocumentPrepayment] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SalePrepayment as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ID]=sd.[ID]))
				AND sd.[DocumentID]=@p_ID

			if(@p_Type = 9)
			begin
			-- вставка предоплат
			INSERT INTO [dbo].[SaleDocumentPrepayment]
				([DocumentID],
				[UseDocumentID],
				[Amount],
				[Description],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@p_ID,				
				CASE WHEN @p_Type=6 THEN sp.[UseDocumentID] ELSE 0 END,
				sp.[Amount],
				sp.[Description],
				@dt_now,
				Null,
				@p_AddUserID,
				NUll
			FROM #SalePrepayment sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentPrepayment] as sdd WHERE sdd.[DocumentID]=@p_ID and sdd.[ID]=sp.[ID])	
			end

			if(@p_Type = 6)
			begin
			Update sdp
				set sdp.[UseDocumentID] = @res,
				sdp.[LastModifiedDate] = @dt_now,
				sdp.[LastModifiedByUserID] = @p_AddUserID			
			FROM #SalePrepayment s
				inner join [dbo].[SaleDocumentPrepayment] sdp on s.ID = sdp.ID	
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentPrepayment] as sdd WHERE sdd.[DocumentID]=@p_ID and sdd.[ID]=s.[ID])	
			end			

-- Обновление услуг
------------------------------------------------------------------------------------------------------------------------

			-- обновление услуг
			UPDATE [dbo].[SaleDocumentServices]
			SET 
				[Type] = sdd.[Type]
				,[Amount] = sdd.[Amount]
				,[Description] = sdd.[Description]
				,[LastModifiedDate]=@dt_now
				,[LastModifiedByUserID]=@p_AddUserID
			FROM (
					SELECT * FROM #SaleServices sp
				) as sdd
			WHERE
				[dbo].[SaleDocumentServices].DocumentID=@p_ID
				AND [dbo].[SaleDocumentServices].[ID]=sdd.[ID]

			-- удаление услуг
			DELETE sd
			FROM [dbo].[SaleDocumentServices] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SaleServices as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ID]=sd.[ID]))
				AND sd.[DocumentID]=@p_ID
			
			-- вставка предоплат
			INSERT INTO [dbo].[SaleDocumentServices]
				([DocumentID],
				[Type],
				[Amount],
				[Description],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@p_ID,
				sp.[Type],
				sp.[Amount],
				sp.[Description],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleServices sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentServices] as sdd WHERE sdd.[DocumentID]=@p_ID and sdd.[ID]=sp.[ID])       

-- Обновление доп скидки
------------------------------------------------------------------------------------------------------------------------

			-- обновление доп скидки
			UPDATE [dbo].[SaleDocumentAdditionalDiscount]
			SET 
				[ExtRefID] = sdd.[ExtRefID]
				,[Amount] = sdd.[Amount]
				,[LastModifiedDate]=@dt_now
				,[LastModifiedByUserID]=@p_AddUserID
			FROM (
					SELECT * FROM #SaleAdditionalDiscount sp
				) as sdd
			WHERE
				[dbo].[SaleDocumentAdditionalDiscount].DocumentID=@p_ID
				AND [dbo].[SaleDocumentAdditionalDiscount].[ID]=sdd.[ID]

			-- удаление доп скидки
			DELETE sd
			FROM [dbo].[SaleDocumentAdditionalDiscount] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SaleAdditionalDiscount as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ID]=sd.[ID]))
				AND sd.[DocumentID]=@p_ID
			
			-- вставка доп скидки
			INSERT INTO [dbo].[SaleDocumentAdditionalDiscount]
				([DocumentID],
				[ExtRefID],
				[Amount],				
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@p_ID,
				sp.[ExtRefID],
				sp.[Amount],				
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleAdditionalDiscount sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentAdditionalDiscount] as sdd WHERE sdd.[DocumentID]=@p_ID and sdd.[ID]=sp.[ID])

-- Обновление квитанций
------------------------------------------------------------------------------------------------------------------------

			-- обновление квитанций
			UPDATE [dbo].[SaleDocumentScrapDocument]
			SET 
				ScrapDocumentID = sdd.ScrapDocumentID
				,[LastModifiedDate]=@dt_now
				,[LastModifiedByUserID]=@p_AddUserID
			FROM (
					SELECT * FROM #SaleScrapDocument sp
				) as sdd
			WHERE
				[dbo].[SaleDocumentScrapDocument].DocumentID=@p_ID
				AND [dbo].[SaleDocumentScrapDocument].[ID]=sdd.[ID]

			-- удаление квитанций
			DELETE sd
			FROM [dbo].[SaleDocumentScrapDocument] sd
			WHERE
				NOT EXISTS (SELECT ID FROM #SaleScrapDocument as sp WHERE (sd.[DocumentID]=@p_ID AND sp.[ID]=sd.[ID]))
				AND sd.[DocumentID]=@p_ID
			
			-- вставка квитанций
			INSERT INTO [dbo].[SaleDocumentScrapDocument]
				([DocumentID],
				[ScrapDocumentID],			
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID])
			SELECT
				@p_ID,
				sp.[ScrapDocumentID],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
			FROM #SaleScrapDocument sp
			WHERE
				NOT EXISTS (SELECT ID FROM [dbo].[SaleDocumentScrapDocument] as sdd WHERE sdd.[DocumentID]=@p_ID and sdd.[ID]=sp.[ID])

        COMMIT TRANSACTION tr_update
    end

    else if  @p_ID<0
	begin
        BEGIN TRANSACTION tr_delete

-- Удаление документа и деталей
------------------------------------------------------------------------------------------------------------------------
		if @p_type = 9
		begin
			-- возвращаем продукцию на склад
			UPDATE [dbo].[Product]
			SET [Status] = 0 -- на складе
			FROM
				(SELECT [ProductID] FROM [dbo].[SaleDocumentProduct] as sdd WHERE sdd.[DocumentID] = -@p_ID) as sdd
			WHERE 
				[dbo].[Product].[ID] = sdd.[ProductID]

			-- фиксируем изменения в таблице истории продукции
			INSERT INTO [dbo].[ProductTransfer] (
				[ProductID],
				[Status],
				[ExReffOperationType],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT
				sdd.[ProductID],
				0, -- на складе
				4, -- 4-продажа
				@dt_now,
				@p_AddUserID
			FROM [dbo].[SaleDocumentProduct] as sdd
			WHERE sdd.[DocumentID] = -@p_ID
		end
			-- удаляем документ
			delete from [dbo].[SaleDocument] where [ID] = -@p_ID
			-- удаляем продукцию документа
			delete from [dbo].[SaleDocumentProduct] where [DocumentID] = -@p_ID
			-- удаляем сопутствующие документа
			delete from [dbo].[SaleDocumentRelatedProduct] where [DocumentID] = -@p_ID
			-- удаляем купоны документа
			delete from [dbo].[SaleDocumentCoupon] where [DocumentID] = -@p_ID
			-- удаляем оплаты документа
			delete from [dbo].[SaleDocumentPayment] where [DocumentID] = -@p_ID
			-- удаляем предоплаты документа
			delete from [dbo].[SaleDocumentPrepayment] where [DocumentID] = -@p_ID
			-- удаляем услуги документа
			delete from [dbo].[SaleDocumentServices] where [DocumentID] = -@p_ID
			-- удаляем доп скидки
			delete from [dbo].[SaleDocumentAdditionalDiscount] where [DocumentID] = -@p_ID
			-- удаляем квитанции
			delete from [dbo].[SaleDocumentScrapDocument] where [DocumentID] = -@p_ID

        COMMIT TRANSACTION tr_delete
    end
    if @p_ShowRes = 1 select @res as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2020-05-18 16:17
-- Description: Добавление/обновление/удаление записи в таблице dbo.SaleDocumentCoupon
-- =============================================
-- xp_SaveSaleDocumentCoupon p_AddUserID, p_ID, p_DocumentID, p_CouponID
-- =============================================
CREATE PROCEDURE dbo.xp_SaveSaleDocumentCoupon
	@p_AddUserID int,
	@p_ID int,
	@p_DocumentID int = null,
	@p_CouponID int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[SaleDocumentCoupon] :
--	1 	[ID] int
--	2 	[DocumentID] int
--	3 	[CouponID] int
--	4 	[CreatedDate] datetime
--	5 	[LastModifiedDate] datetime
--	6 	[CreatedByUserID] int
--	7 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[SaleDocumentCoupon] (
					[DocumentID],
					[CouponID],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_DocumentID,
					@p_CouponID,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[SaleDocumentCoupon]
				set 
					[DocumentID]=@p_DocumentID,
					[CouponID]=@p_CouponID,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[SaleDocumentCoupon]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>

-- xp_SaveSaleDocumentPaymentCondition 15, 1, 1383
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveSaleDocumentPaymentCondition] 
	-- Add the parameters for the stored procedure here
		@p_AddUserID int,
		@p_ConditionType bit,
		@p_ID int,
		@p_ShowRes bit = 1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	-- обновление продукции
	 BEGIN TRANSACTION tr_update
			UPDATE [dbo].[SaleDocumentPayment]
			SET 
				[ConditionType]=@p_ConditionType
				,[LastModifiedByUserID]=@p_AddUserID
				,[LastModifiedDate]=getdate()				
			FROM [dbo].[SaleDocumentPayment] as sdd
			WHERE sdd.ID = @p_ID
			set @p_ShowRes = @@rowcount
			select @p_ShowRes as res
	 COMMIT TRANSACTION tr_update
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Pazynich
-- Create date: 2020-09-17 09:41
-- Description: Добавление/обновление/удаление записи в таблице dbo.SaleDocumentScrapDocument
-- =============================================
-- xp_SaveSaleDocumentScrapDocument p_AddUserID, p_ID, p_DocumentID, p_ScrapDocumentID
-- =============================================
CREATE PROCEDURE dbo.xp_SaveSaleDocumentScrapDocument
	@p_AddUserID int,
	@p_ID int,
	@p_DocumentID int = null,
	@p_ScrapDocumentID int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[SaleDocumentScrapDocument] :
--	1 	[ID] int
--	2 	[DocumentID] int
--	3 	[ScrapDocumentID] int
--	4 	[CreatedDate] datetime
--	5 	[LastModifiedDate] datetime
--	6 	[CreatedByUserID] int
--	7 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[SaleDocumentScrapDocument] (
					[DocumentID],
					[ScrapDocumentID],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_DocumentID,
					@p_ScrapDocumentID,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[SaleDocumentScrapDocument]
				set 
					[DocumentID]=@p_DocumentID,
					[ScrapDocumentID]=@p_ScrapDocumentID,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[SaleDocumentScrapDocument]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya.A
-- Create date: 2020-04-30 14:38
-- Description: Добавление/обновление/удаление запиCи в таблице dbo.Currency
-- =============================================
-- xp_SaveCurrency p_AddUserID, p_Code, @p_ShortDescription, @p_LongDescription
-- xp_SaveSalePlan 1474, 10, 3, 100000, 10,'06.01.2020 0:00:00', '07.01.2020 0:00:00', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveSalePlan]
	@p_AddUserID int,
	@p_ID int,
	@p_Category int,
	@p_AmountPlan money,
	@p_FromDate datetime,
	@p_ToDate datetime,
	@p_Status int,	
	@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		if (@p_ID>0) begin	
			CREATE TABLE #SalePlan(	
				[ID]  [int] NULL,
				[Category] [int] NULL,
				[AmountPlan] [money] NULL,
				[Status] [int] NULL,
				[FromDate] [datetime] NULL,
				[ToDate] [datetime] NULL,
			)

			insert into #SalePlan
			(	
				[ID],		
				[Category],
				[AmountPlan],
				[Status],
				[FromDate],
				[ToDate])
			values 
			(
				@p_ID,
				@p_Category,
				@p_AmountPlan,
				@p_Status,
				@p_FromDate,
				@p_ToDate
			)			
		
			update s
			set 
				[Category] = @p_Category,
				[AmountPlan]=@p_AmountPlan,
				[Status]=@p_Status,
				[LastModifiedDate] = @dt_now,
				[FromDate] = @p_FromDate,
				[ToDate]=@p_ToDate,
				[LastModifiedByUserID]=@p_AddUserID
			from #SalePlan sp 
				inner join dbo.[SalePlan] s on sp.ID=s.ID

			insert into [dbo].[SalePlan] (
				[ID],
				[Category],
				[AmountPlan],
				[CreatedDate],
				[LastModifiedDate],
				[CreatedByUserID],
				[LastModifiedByUserID],
				[Status],
				[FromDate],
				[ToDate])						
			select 
				 @p_ID,
				 @p_Category,
				 @p_AmountPlan,
				 @dt_now,
				 @dt_now,
				 @p_AddUserID,
				 @p_AddUserID,
				 @p_Status,
				 @p_FromDate,
				 @p_ToDate	
			from #SalePlan sp 
				left join dbo.SalePlan s on sp.ID=s.ID
			where s.ID is null
		end

		if (@p_ID<0) begin
			begin tran tr_delete
				delete from [dbo].[SalePlan]
				where ID= -@p_ID
				set @res = @@rowcount 
			commit tran tr_delete
		end

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Postika
-- Create date: 2020-06-25 12:48
-- Description: Добавление/обновление/удаление записи в таблице dbo.SalePlanDetails
-- =============================================
-- xp_SaveSalePlanDetails p_AddUserID, p_ID, p_SalePlanID, p_UsersID, p_AmountPlan, p_AmountFact
-- xp_SaveSalePlanDetails 15, 261, 27, 1474, 33000
-- xp_SaveSalePlanDetails 15, 0, 4, 15, 555555, 10
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveSalePlanDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_SalePlanID int = null,
	@p_UsersID int = null,
	@p_AmountPlan money = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[SalePlanDetails] :
--	1 	[ID] int
--	2 	[SalePlanID] int
--	3 	[UsersID] int
--	4 	[AmountPlan] money
--	6 	[CreatedDate] datetime
--	7 	[LastModifiedDate] datetime
--	8 	[CreatedByUserID] int
--	9 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()
	Declare @p_AmmountSum money = 0

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[SalePlanDetails] (
					[SalePlanID],
					[UsersID],
					[AmountPlan],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_SalePlanID,
					@p_UsersID,
					@p_AmountPlan,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()

				--SET @p_AmmountSum = IsNull((
				--						SELECT SUM(
				--									CASE WHEN sdd.[IsIndividualDiscount]=0
				--										THEN [TagPriceWithVAT]-IsNull(sdd.[DiscountSumm],0)
				--										ELSE [TagPriceWithVAT]-IsNull(sdd.[IndividualDiscountSumm],0)
				--									END
				--									) as [SumPlan]
				--						FROM [dbo].[SaleDocumentDetails] AS sdd
				--							inner join [dbo].[SalePlan] sp ON sp.[ID]=@p_SalePlanID
				--							inner join [dbo].[SaleDocument] AS sd ON sd.ID=sdd.[DocumentID]
				--								AND sd.[LastModifiedDate] BETWEEN sp.[FromDate] AND sp.[ToDate] AND sd.UserID=@p_UsersID
				--						WHERE
				--							   (sp.Сategory=0 AND sdd.PartNumber IS NULL)
				--							OR (sp.Сategory=1 AND sdd.PartNumber IS NOT NULL)
				--				    ),0)

				--UPDATE spd
				--SET spd.[AmountFact]=@p_AmmountSum
				--FROM [dbo].[SalePlanDetails] spd
				--WHERE spd.[ID]=@res

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[SalePlanDetails]
				set 
					[SalePlanID]=@p_SalePlanID,
					[UsersID]=@p_UsersID,
					[AmountPlan]=@p_AmountPlan,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[SalePlanDetails]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Postika
-- Create date: 2020-06-25 12:48
-- Description: Добавление/обновление/удаление записи в таблице dbo.xp_SaveSaleAutoPlanDetails
-- =============================================
-- xp_SaveSalePlanDetailsAuto 15, 172
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveSalePlanDetailsAuto]
	@p_AddUserID int,
	@p_SalePlanID int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON
	Declare @dt_now datetime=getdate()
	Declare @p_SaleAmountPlan money = 0
	Declare @p_UsersAmountPlan money = 0
	Declare @p_UsersAmountPlanRound money = 0
	Declare @p_UsersAmountPlanDiff money = 0
	Declare @p_SaleUnusedPlan money = 0
	Declare @p_CountUsers int = 0
	Declare @p_CountPlanUsers int = 0

	-- Получаем сумму для плана продаж
	SET @p_SaleAmountPlan=(

			SELECT sp.[AmountPlan] FROM [dbo].[SalePlan] sp WHERE sp.[ID]=@p_SalePlanID
		)

	-- Получаем сумму для нераспределенного плана
	SET @p_SaleUnusedPlan=(
			SELECT ROUND(IsNull(s.[AmountPlan]-(SELECT SUM(spd.AmountPlan) FROM [dbo].[SalePlanDetails] spd WHERE spd.[SalePlanID]=s.[ID]),s.[AmountPlan]),2) as AmountUnused	
			FROM [dbo].[SalePlan] s
				left join dbo.Users u ON u.[ID]=s.[CreatedByUserID]
				left join dbo.Users ul ON ul.[ID]=s.[LastModifiedByUserID]
			WHERE s.ID=@p_SalePlanID
		)

	-- Создаем временную таблицу активных пользователей
	CREATE TABLE #AutoUsersPlan(
			[LineDocument] [int],
			[UsersID] [int],
			[SalePlanID] [int]
	)

	-- Заполняем временную таблицу активных пользователей
	INSERT INTO #AutoUsersPlan([LineDocument], [UsersID])
	SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, u.[ID]
		FROM [dbo].[Users] AS u
	WHERE u.[Active] = 'true'
	ORDER BY CounterVal

	-- Получаем количество пользователей
	SET @p_CountUsers = (SELECT Count([LineDocument]) FROM #AutoUsersPlan)
	SET @p_CountPlanUsers = (
				SELECT Count([UsersID])
				FROM [dbo].SalePlanDetails spd
				WHERE
					spd.SalePlanID=@p_SalePlanID
			)

	if(@p_CountUsers>0)
	 begin

	if(@p_CountUsers - @p_CountPlanUsers > 0)
	begin
		SET @p_UsersAmountPlan = @p_SaleUnusedPlan / (@p_CountUsers - @p_CountPlanUsers)
		SET @p_UsersAmountPlanRound = ROUND(AVG(@p_UsersAmountPlan),2)
		SET @p_UsersAmountPlanDiff = ROUND(AVG(@p_UsersAmountPlan*@p_CountUsers - @p_UsersAmountPlanRound*@p_CountUsers),2)
	

		---- Обновляем строки планирования
		--UPDATE spd
		--SET 
		--	spd.[AmountPlan] = @p_UsersAmountPlanRound,
		--	spd.[LastModifiedDate] = @dt_now,
		--	spd.[LastModifiedByUserID] = @p_AddUserID
		--FROM [dbo].[SalePlanDetails] spd
		--	left join #AutoUsersPlan aup ON aup.[SalePlanID]=@p_SalePlanID AND aup.[UsersID]=spd.[UsersID]
		--WHERE 
		--	spd.[SalePlanID] = @p_SalePlanID
		--	AND spd.[ID] IS NOT NULL
		--	AND spd.[AmountPlan] IS NOT NULL

		-- Добавляем строки планирования
		INSERT INTO [dbo].[SalePlanDetails] (
			[SalePlanID],
			[UsersID],
			[AmountPlan],
			[CreatedDate],
			[LastModifiedDate],
			[CreatedByUserID],
			[LastModifiedByUserID]
			)
		SELECT
			@p_SalePlanID,
			sp.[UsersID],
			@p_UsersAmountPlanRound,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID
		FROM #AutoUsersPlan sp
			left join [dbo].[SalePlanDetails] spd ON spd.[SalePlanID]=@p_SalePlanID AND spd.[UsersID]=sp.[UsersID]
		WHERE spd.[ID] IS NULL

		UPDATE spd
		SET 
			spd.[AmountPlan] = spd.[AmountPlan]+@p_UsersAmountPlanDiff
		FROM #AutoUsersPlan sp
			left join [dbo].[SalePlanDetails] spd ON spd.[SalePlanID]=@p_SalePlanID AND spd.[UsersID]=sp.[UsersID]		
			AND spd.[ID]=(SELECT MAX([ID]) FROM #AutoUsersPlan sp
			left join [dbo].[SalePlanDetails] spd ON spd.[SalePlanID]=@p_SalePlanID AND spd.[UsersID]=sp.[UsersID]		
			)

		end
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-11-08 16:35
-- Description: Добавление/обновление/удаление записи в таблице dbo.ScrapDetails
-- =============================================
-- xp_SaveScrapDetails p_AddUserID, p_ID, p_KTID, p_Quantity, p_Weight, p_Description, p_Imennik, p_Impress, p_DocumentID, p_Summa, p_SinglePrice
-- =============================================
CREATE PROCEDURE dbo.xp_SaveScrapDetails
	@p_AddUserID int,
	@p_ID int,
	@p_KTID int = null,
	@p_Quantity int = null,
	@p_Weight money = null,
	@p_Description nvarchar(MAX) = null,
	@p_Imennik nvarchar(255) = null,
	@p_Impress nvarchar(255) = null,
	@p_DocumentID bigint = null,
	@p_Summa money = null,
	@p_SinglePrice money = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[ScrapDetails] :
--	1 	[ID] int
--	2 	[KTID] int
--	3 	[Quantity] int
--	4 	[Weight] money
--	5 	[Description] text(2147483647)
--	6 	[Imennik] nvarchar(255)
--	7 	[Impress] nvarchar(255)
--	8 	[DocumentID] bigint
--	9 	[Summa] money
--	10	[SinglePrice] money
--	11	[CreatedByUserID] int
--	12	[LastModifiedByUserID] int
--	13	[LastModifiedDate] datetime
--	14	[CreatedDate] datetime
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[ScrapDetails] (
					[KTID],
					[Quantity],
					[Weight],
					[Description],
					[Imennik],
					[Impress],
					[DocumentID],
					[Summa],
					[SinglePrice],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[LastModifiedDate],
					[CreatedDate])
				values (
					@p_KTID,
					@p_Quantity,
					@p_Weight,
					@p_Description,
					@p_Imennik,
					@p_Impress,
					@p_DocumentID,
					@p_Summa,
					@p_SinglePrice,
					@p_AddUserID,
					@p_AddUserID,
					@dt_now,
					@dt_now)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[ScrapDetails]
				set 
					[KTID]=@p_KTID,
					[Quantity]=@p_Quantity,
					[Weight]=@p_Weight,
					[Description]=@p_Description,
					[Imennik]=@p_Imennik,
					[Impress]=@p_Impress,
					[DocumentID]=@p_DocumentID,
					[Summa]=@p_Summa,
					[SinglePrice]=@p_SinglePrice,
					[LastModifiedByUserID]=@p_AddUserID,
					[LastModifiedDate]=@dt_now
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[ScrapDetails]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Pazynich
-- Create date: 2020-09-24 12:45
-- Description: Добавление/обновление/удаление записи в таблице dbo.ScrapDocument
-- =============================================
-- xp_SaveScrapDocument p_AddUserID, p_ID, p_ScrapDocumentNumber, p_Status, p_VendorID, p_RegisterID, p_SyncDate, p_Type
-- =============================================
CREATE PROCEDURE dbo.xp_SaveScrapDocument
	@p_AddUserID int,
	@p_ID int,
	@p_ScrapDocumentNumber bigint = null,
	@p_Status tinyint = null,
	@p_VendorID int = null,
	@p_RegisterID int = null,
	@p_SyncDate datetime = null,
	@p_Type tinyint = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[ScrapDocument] :
--	1 	[ID] int
--	2 	[ScrapDocumentNumber] bigint
--	3 	[Status] tinyint
--	4 	[VendorID] int
--	5 	[RegisterID] int
--	6 	[SyncDate] datetime
--	7 	[CreatedByUserID] int
--	8 	[LastModifiedByUserID] int
--	9 	[CreatedDate] datetime
--	10	[LastModifiedDate] datetime
--	11	[Type] tinyint
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[ScrapDocument] (
					[ScrapDocumentNumber],
					[Status],
					[VendorID],
					[RegisterID],
					[SyncDate],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[CreatedDate],
					[LastModifiedDate],
					[Type])
				values (
					@p_ScrapDocumentNumber,
					@p_Status,
					@p_VendorID,
					@p_RegisterID,
					@p_SyncDate,
					@p_AddUserID,
					@p_AddUserID,
					@dt_now,
					@dt_now,
					@p_Type)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[ScrapDocument]
				set 
					[ScrapDocumentNumber]=@p_ScrapDocumentNumber,
					[Status]=@p_Status,
					[VendorID]=@p_VendorID,
					[RegisterID]=@p_RegisterID,
					[SyncDate]=@p_SyncDate,
					[LastModifiedByUserID]=@p_AddUserID,
					[LastModifiedDate]=@dt_now,
					[Type]=@p_Type
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[ScrapDocument]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-11-08 16:35
-- Description: Добавление/обновление/удаление записи в таблице dbo.ScrapDocumentDetails
-- =============================================
-- xp_SaveScrapDocumentDetails p_AddUserID, p_ID, p_KTID, p_Quantity, p_Weight, p_Description, p_Imennik, p_Impress, p_DocumentID, p_Summa, p_SinglePrice
-- =============================================
CREATE PROCEDURE dbo.xp_SaveScrapDocumentDetails
	@p_AddUserID int,
	@p_ID int,
	@p_KTID int = null,
	@p_Quantity int = null,
	@p_Weight money = null,
	@p_Description nvarchar(MAX) = null,
	@p_Imennik nvarchar(255) = null,
	@p_Impress nvarchar(255) = null,
	@p_DocumentID bigint = null,
	@p_Summa money = null,
	@p_SinglePrice money = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[ScrapDocumentDetails] :
--	1 	[ID] int
--	2 	[KTID] int
--	3 	[Quantity] int
--	4 	[Weight] money
--	5 	[Description] text(2147483647)
--	6 	[Imennik] nvarchar(255)
--	7 	[Impress] nvarchar(255)
--	8 	[DocumentID] bigint
--	9 	[Summa] money
--	10	[SinglePrice] money
--	11	[CreatedByUserID] int
--	12	[LastModifiedByUserID] int
--	13	[LastModifiedDate] datetime
--	14	[CreatedDate] datetime
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[ScrapDocumentDetails] (
					[KTID],
					[Quantity],
					[Weight],
					[Description],
					[Imennik],
					[Impress],
					[DocumentID],
					[Summa],
					[SinglePrice],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[LastModifiedDate],
					[CreatedDate])
				values (
					@p_KTID,
					@p_Quantity,
					@p_Weight,
					@p_Description,
					@p_Imennik,
					@p_Impress,
					@p_DocumentID,
					@p_Summa,
					@p_SinglePrice,
					@p_AddUserID,
					@p_AddUserID,
					@dt_now,
					@dt_now)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[ScrapDocumentDetails]
				set 
					[KTID]=@p_KTID,
					[Quantity]=@p_Quantity,
					[Weight]=@p_Weight,
					[Description]=@p_Description,
					[Imennik]=@p_Imennik,
					[Impress]=@p_Impress,
					[DocumentID]=@p_DocumentID,
					[Summa]=@p_Summa,
					[SinglePrice]=@p_SinglePrice,
					[LastModifiedByUserID]=@p_AddUserID,
					[LastModifiedDate]=@dt_now
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[ScrapDocumentDetails]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Pazynich
-- Create date: 2020-09-24 12:45
-- Description: Добавление/обновление/удаление записи в таблице dbo.ScrapDocument
-- =============================================
-- xp_SaveScrapDocumentID p_AddUserID, p_ID, p_ScrapDocumentNumber, p_Status, p_VendorID, p_RegisterID, p_SyncDate, p_Type

-- test insert
-- xp_SaveScrapDocumentID 63, 0, 0, 1, 0, null, 0,    null,'asd','asd','asd','12345','asd','11.12.2022 11:53:41',    '0|','1|','1|','1|','1|','1|','1|','1|','1|'

--test update
-- xp_SaveScrapDocumentID 63, 308, 0, 1, 0, null, 0,    306,'hernya','hernya','hernya','hernya','hernya','11.12.2022 11:53:41',    '517|','1|','1|','2|','1|','1|','1|','1|','1|'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveScrapDocumentID]
	@p_AddUserID int,
	@p_ID int,
	@p_ScrapDocumentNumber bigint = null,
	@p_Status tinyint = null,
	@p_RegisterID int = null,
	@p_SyncDate datetime = null,
	@p_Type tinyint = null,

	@p_VendorID int = null,
	@p_VendorName nvarchar(255) = '',
    @p_VendorAddress nvarchar(255) = '',
	@p_VendorSerial nvarchar(40) = '',
	@p_VendorNumber nvarchar(40) = '',
	@p_VendorIssue nvarchar(255) = '',
	@p_VendorIssueDate datetime = null,

	@p_MassDetailsID nvarchar(MAX) = '',
	@p_MassDetailsKTID nvarchar(MAX) = '',
	@p_MassDetailsQuantity nvarchar(MAX) = '',
	@p_MassDetailsWeight nvarchar(MAX) = '',
	@p_MassDetailsDescription nvarchar(MAX) = '',
	@p_MassDetailsImennik nvarchar(MAX) = '',
	@p_MassDetailsImpress nvarchar(MAX) = '',
	@p_MassDetailsSumma nvarchar(MAX) = '',
	@p_MassDetailsSinglePrice nvarchar(MAX) = ''

	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare
	@res int=0,
	@StrErr nvarchar(max),
	@dt_now datetime=getdate(),
	@delimeter nvarchar(10)= '|',
	@p_CounterDetails int = 0

	SET @p_MassDetailsWeight = REPLACE(@p_MassDetailsWeight, ',', '.')
	SET @p_MassDetailsSumma = REPLACE(@p_MassDetailsSumma, ',', '.')
	SET @p_MassDetailsSinglePrice = REPLACE(@p_MassDetailsSinglePrice, ',', '.')
	
	-- создаем временную таблицу деталей
    CREATE TABLE #ScrapDocumentDetails(
            [LineDocument] int,
            [ID] int,
			[KTID] int,
            [Quantity] int,
			[Weight] money,
			[Description] nvarchar(MAX),
			[Imennik] nvarchar(255),
			[Impress] nvarchar(255),
			[Summa] money,
			[SinglePrice] money
    )

	SELECT @p_CounterDetails=Count(Val1) from dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsQuantity,@delimeter) WHERE Val1>0

	-- добавляем строки деталей во временную таблицу
	if @p_CounterDetails>0 begin
		INSERT INTO #ScrapDocumentDetails([LineDocument],[ID])
		SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsID,@delimeter)
		ORDER BY CounterVal

		UPDATE #ScrapDocumentDetails SET [KTID] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsKTID,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]

		UPDATE #ScrapDocumentDetails SET [Quantity] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsQuantity,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]
    
		UPDATE #ScrapDocumentDetails SET [Weight] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsWeight,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]

		UPDATE #ScrapDocumentDetails SET [Description] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsDescription,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]

		UPDATE #ScrapDocumentDetails SET [Imennik] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsImennik,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]

		UPDATE #ScrapDocumentDetails SET [Impress] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsImpress,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]

		UPDATE #ScrapDocumentDetails SET [Summa] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsSumma,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]

		UPDATE #ScrapDocumentDetails SET [SinglePrice] = it.Val1
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS CounterVal, Val1 FROM dbo.tf_ParserStrTo1Varchar150(@p_MassDetailsSinglePrice,@delimeter)) AS it
		WHERE it.[CounterVal] = #ScrapDocumentDetails.[LineDocument]
	end

-- Вставка документа
------------------------------------------------------------------------------------------------------------------------
	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY

				INSERT INTO [dbo].[Vendor]
				(
					[Name],
					[Address],
					[Serial],
					[Number],
					[Issue],
					[IssueDate],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID]
				)
				SELECT
					@p_VendorName,
					@p_VendorAddress,
					@p_VendorSerial,
					@p_VendorNumber,
					@p_VendorIssue,
					@p_VendorIssueDate,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID
				
				set @res=SCOPE_IDENTITY()

				INSERT INTO [dbo].[ScrapDocument]
				(
					[ScrapDocumentNumber],
					[Status],
					[VendorID],
					[RegisterID],
					[SyncDate],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[CreatedDate],
					[LastModifiedDate],
					[Type]
				)
				VALUES
				(
					@p_ScrapDocumentNumber,
					@p_Status,
					@res,
					@p_RegisterID,
					@p_SyncDate,
					@p_AddUserID,
					@p_AddUserID,
					@dt_now,
					@dt_now,
					@p_Type
				)

				set @res=SCOPE_IDENTITY()

				INSERT INTO [dbo].[ScrapDocumentDetails]
				(
					[KTID],
					[Quantity],
					[Weight],
					[Description],
					[Imennik],
					[Impress],
					[DocumentID],
					[Summa],
					[SinglePrice],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[LastModifiedDate],
					[CreatedDate]
				)
				SELECT
					sd.[KTID],
					sd.[Quantity],
					sd.[Weight],
					sd.[Description],
					sd.[Imennik],
					sd.[Impress],
					@res,
					sd.[Summa],
					sd.[SinglePrice],
					@p_AddUserID,
					@p_AddUserID,
					@dt_now,
					@dt_now
				FROM #ScrapDocumentDetails sd

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end

-- Обновление документа
------------------------------------------------------------------------------------------------------------------------
	else if  @p_ID > 0 begin
		begin tran tr_update
			BEGIN TRY

				if @p_VendorID != 0
				begin
					-- обновление продавца
					UPDATE [dbo].[Vendor]
					SET 
						[Name]=@p_VendorName,
						[Address]=@p_VendorAddress,
						[Serial]=@p_VendorSerial,
						[Number]=@p_VendorNumber,
						[Issue]=@p_VendorIssue,
						[IssueDate]=@p_VendorIssueDate,
						[LastModifiedDate]=@dt_now,
						[LastModifiedByUserID]=@p_AddUserID
					WHERE ID = @p_VendorID
				end
				else
				begin
					INSERT INTO [dbo].[Vendor]
					(
						[Name],
						[Address],
						[Serial],
						[Number],
						[Issue],
						[IssueDate],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID]
					)
					SELECT
						@p_VendorName,
						@p_VendorAddress,
						@p_VendorSerial,
						@p_VendorNumber,
						@p_VendorIssue,
						@p_VendorIssueDate,
						@dt_now,
						@dt_now,
						@p_AddUserID,
						@p_AddUserID

					set @p_VendorID = case when @@rowcount=1 then @p_ID else 0 end
				end

				-- обновление документа
				UPDATE [dbo].[ScrapDocument]
				set 
					[ScrapDocumentNumber]=@p_ScrapDocumentNumber,
					[Status]=@p_Status,
					[VendorID]=@p_VendorID,
					[RegisterID]=@p_RegisterID,
					[SyncDate]=@p_SyncDate,
					[LastModifiedByUserID]=@p_AddUserID,
					[LastModifiedDate]=@dt_now,
					[Type]=@p_Type
				WHERE [ID] = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end

				-- обновление деталей
				UPDATE [dbo].[ScrapDocumentDetails]
				SET 
					[KTID]=sd.[KTID],
					[Quantity]=sd.[Quantity],
					[Weight]=sd.[Weight],
					[Description]=sd.[Description],
					[Imennik]=sd.[Imennik],
					[Impress]=sd.[Impress],
					[Summa]=sd.[Summa],
					[SinglePrice]=sd.[SinglePrice]
				FROM #ScrapDocumentDetails as sd
				WHERE
					[dbo].[ScrapDocumentDetails].DocumentID=@p_ID
					and [dbo].[ScrapDocumentDetails].[ID]=sd.[ID]
				
				-- удаление деталей
				DELETE sd
				FROM [dbo].[ScrapDocumentDetails] sd
				WHERE
					NOT EXISTS (SELECT ID FROM #ScrapDocumentDetails as sdl WHERE (sd.[DocumentID]=@p_ID AND sdl.[ID]=sd.[ID]))
					AND sd.[DocumentID]=@p_ID

				-- вставка деталей
				INSERT INTO [dbo].[ScrapDocumentDetails] (
					[KTID],
					[Quantity],
					[Weight],
					[Description],
					[Imennik],
					[Impress],
					[DocumentID],
					[Summa],
					[SinglePrice],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[LastModifiedDate],
					[CreatedDate])
				SELECT
					sd.[KTID],
					sd.[Quantity],
					sd.[Weight],
					sd.[Description],
					sd.[Imennik],
					sd.[Impress],
					@p_ID,
					sd.[Summa],
					sd.[SinglePrice],
					@p_AddUserID,
					@p_AddUserID,
					@dt_now,
					@dt_now
				FROM #ScrapDocumentDetails sd
				WHERE
					NOT EXISTS (SELECT ID FROM [dbo].[ScrapDocumentDetails] as sdl WHERE (sdl.[DocumentID]=@p_ID and sd.[ID]=sdl.[ID]))

			END TRY
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 
	end

-- Удаление документа
------------------------------------------------------------------------------------------------------------------------
	else if  @p_ID<0 begin
		begin tran tr_delete

			-- удаляем документ
			delete from [dbo].[ScrapDocument] where ID=-@p_ID
			-- удаляем детали документа
			delete from [dbo].[ScrapDocumentDetails] where [DocumentID]=-@p_ID
			-- удаляем клиента
			delete from [dbo].[Vendor] where [ID]=@p_VendorID

			set @res = @@rowcount 
		commit tran tr_delete
	end

	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Shilin
-- Create date: 2019-09-16 18:16
-- Description: Добавление/обновление/удаление записи в таблице dbo.Shop
-- =============================================
-- xp_SaveShop p_AddUserID, p_ID, p_Number
-- =============================================
create PROCEDURE [dbo].[xp_SaveShop]
	@p_AddUserID int,
	@p_ID int,
	@p_Number int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Shop] :
--	1 	[ID] int
--	2 	[Number] int
--	3 	[CreatedDate] datetime
--	4 	[LastModifiedDate] datetime
--	5 	[CreatedByUserID] int
--	6 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Shop] (
					[Number],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_Number,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Shop]
				set 
					[Number]=@p_Number,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Shop]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-12-18 12:44
-- Description: Добавление/обновление/удаление записи в таблице dbo.ShopAttributes
-- =============================================
-- xp_SaveShopAttributes p_AddUserID, p_ID, p_Type, p_Name, p_Value, p_AttributeGroup, p_AttributeSort, p_Visibility
-- =============================================
CREATE PROCEDURE dbo.xp_SaveShopAttributes
	@p_AddUserID int,
	@p_ID smallint,
	@p_Type tinyint = null,
	@p_Name nvarchar(255) = null,
	@p_Value nvarchar(255) = null,
	@p_AttributeGroup nvarchar(50) = null,
	@p_AttributeSort int = null,
	@p_Visibility bit = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[ShopAttributes] :
--	1 	[ID] smallint
--	2 	[Type] tinyint
--	3 	[Name] nvarchar(255)
--	4 	[Value] nvarchar(255)
--	5 	[AttributeGroup] nvarchar(50)
--	6 	[AttributeSort] int
--	7 	[Visibility] bit
--	8 	[CreatedDate] datetime
--	9 	[LastModifiedDate] datetime
--	10	[CreatedByUserID] int
--	11	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[ShopAttributes] (
					[Type],
					[Name],
					[Value],
					[AttributeGroup],
					[AttributeSort],
					[Visibility],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_Type,
					@p_Name,
					@p_Value,
					@p_AttributeGroup,
					@p_AttributeSort,
					@p_Visibility,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[ShopAttributes]
				set 
					[Type]=@p_Type,
					[Name]=@p_Name,
					[Value]=@p_Value,
					[AttributeGroup]=@p_AttributeGroup,
					[AttributeSort]=@p_AttributeSort,
					[Visibility]=@p_Visibility,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[ShopAttributes]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2020-01-09 17:43
-- Description: Добавление/обновление/удаление записи в таблице dbo.Showcase
-- =============================================
-- xp_SaveShowcase p_AddUserID, p_ID, p_Name, p_Description
-- =============================================
CREATE PROCEDURE dbo.xp_SaveShowcase
	@p_AddUserID int,
	@p_ID int,
	@p_Name nvarchar(255) = null,
	@p_Description nvarchar(255) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Showcase] :
--	1 	[ID] int
--	2 	[Name] nvarchar(255)
--	3 	[Description] nvarchar(255)
--	4 	[CreatedDate] datetime
--	5 	[LastModifiedDate] datetime
--	6 	[CreatedByUserID] int
--	7 	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Showcase] (
					[Name],
					[Description],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_Name,
					@p_Description,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Showcase]
				set 
					[Name]=@p_Name,
					[Description]=@p_Description,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Showcase]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Pazynich
-- Create date: 2020-01-15 18:36
-- Description: Добавление/обновление/удаление записи в таблице dbo.Stones
-- =============================================
-- xp_SaveStones p_AddUserID, p_ID, p_ProductID, p_Stone, p_Shape, p_Size, p_Color, p_Clarity, p_Quantity, p_Weigth, p_Setting
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveStones]
	@p_AddUserID int,
	@p_ID int,
	@p_ProductID int = null,
	@p_Stone nvarchar(50) = null,
	@p_Shape nvarchar(50) = null,
	@p_Size nvarchar(50) = null,
	@p_Color nvarchar(50) = null,
	@p_Clarity nvarchar(30) = null,
	@p_Quantity int = null,
	@p_Weight money = null,
	@p_Setting nvarchar(50) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Stones] :
--	1 	[ID] int
--	2 	[ProductID] int
--	3 	[Stone] nvarchar(50)
--	4 	[Shape] nvarchar(50)
--	5 	[Size] nvarchar(50)
--	6 	[Color] nvarchar(50)
--	7 	[Clarity] nvarchar(30)
--	8 	[Quantity] int
--	9 	[Weight] money
--	10	[Setting] nvarchar(50)
--	11	[CreatedDate] datetime
--	12	[LastModifiedDate] datetime
--	13	[CreatedByUserID] int
--	14	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Stones] (
					[ProductID],
					[Stone],
					[Shape],
					[Size],
					[Color],
					[Clarity],
					[Quantity],
					[Weight],
					[Setting],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_ProductID,
					@p_Stone,
					@p_Shape,
					@p_Size,
					@p_Color,
					@p_Clarity,
					@p_Quantity,
					@p_Weight,
					@p_Setting,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Stones]
				set 
					[ProductID]=@p_ProductID,
					[Stone]=@p_Stone,
					[Shape]=@p_Shape,
					[Size]=@p_Size,
					[Color]=@p_Color,
					[Clarity]=@p_Clarity,
					[Quantity]=@p_Quantity,
					[Weight]=@p_Weight,
					[Setting]=@p_Setting,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Stones]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kort
-- Create date: 2020-02-25 12:49
-- Description: Добавление/обновление/удаление записи в таблице dbo.TransferDocument
-- =============================================
-- xp_SaveTransferDocument 15, 0, null, 102, 103, 1, '555', 0, '61463000'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveTransferDocument]
	@p_AddUserID int,
	@p_ID int,
	@p_SyncDate datetime = null,
	@p_SenderID int = null,
	@p_ReceiverID int = null,
	@p_Type int = null,
	@p_Contract nvarchar(255) = null,
	@p_Status int = null,
	@p_MassDocumentDetails nvarchar(MAX) = ''	
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[TransferDocument] :
--	1 	[ID] int
--	2 	[ReffID] int  -- больше нет данного поля
--	3 	[ReffDate] datetime -- теперь SyncDate
--	4 	[SenderID] int
--	5 	[ReceiverID] int
--	6 	[Type] int
--	7 	[Contract] nvarchar(255)
--	8 	[Status] int
--	9 	[TransferDocumentID] bigint
--	10	[CreatedDate] datetime
--	11	[LastModifiedDate] datetime
--	12	[CreatedByUserID] int
--	13	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()
	declare @delimeter nvarchar(10)= '|';
	declare @LineDocument int = 0;
	-- ModelID - удалено
	CREATE TABLE #TransferDocumentDetails(			
			[DocumentID] int NULL,
			[LineDocument] int NULL,
			[Model] nvarchar(30) NULL,
			[ProductID] int NULL,   
			[Type] nvarchar(50) NULL,
			[KtID] int NULL,
			[Size] nvarchar(50) NULL,
			[Color] nvarchar(50) NULL,
			[Gender] nvarchar(30) NULL,
			[SupplierID] int NULL,
			[SupplierName] nvarchar(255) NULL,
			[Country] nvarchar(255) NULL,
			[ThemedCollection] nvarchar(255) NULL,
			[Weight] money NULL,
			[CostWithoutVAT] money,
			[CostCurrency] nvarchar(30) NULL,
			[TagPriceWithVAT] money NULL,
			[TagPriceCurrency] nvarchar(30) NULL,
			[TagPriceExtra] money NULL,
			[ShowcaseID] int NULL,
			TagPriceWithOutVAT  money NULL,
			DeclarationNumber nVARCHAR(40) null,
			TnvedCode nVARCHAR(40)  null
		)

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[TransferDocument] (
					[SyncDate],
					[SenderID],
					[ReceiverID],
					[Type],
					[Contract],
					[Status],					
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_SyncDate,
					@p_SenderID,
					@p_ReceiverID,
					@p_Type,
					@p_Contract,
					@p_Status,					
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()				

--print '1'

		Insert into #TransferDocumentDetails
		SELECT @res,
				@LineDocument,
				[Model],
				[ID],
				[Type],
				[KtID],
				[Size],
				[Color],
				[Gender],
				[SupplierID],
				[SupplierName],
				[Country],
				[ThemedCollection],
				[Weight],
				[CostWithoutVAT],
				[CostCurrency],
				[TagPriceWithVAT],
				[TagPriceCurrency],
				[TagPriceExtra],
				[ShowcaseID],
				[TagPriceWithOutVAT],
				[DeclarationNumber],
				[TnvedCode]
		FROM [dbo].[Product] as p
		 inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassDocumentDetails, @delimeter)) st on	st.Val1 = p.ID

--print '1.1'

		INSERT INTO [dbo].[TransferDocumentDetails]
           ([DocumentID]
           ,[LineDocument]
           ,[Model]
           ,[ProductID]
           ,[Type]
           ,[KtID]
           ,[Size]
           ,[Color]
           ,[Gender]
           ,[SupplierID]
           ,[SupplierName]
           ,[Country]
           ,[ThemedCollection]
           ,[Weight]
           ,[CostWithoutVAT]
           ,[CostCurrency]
           ,[TagPriceWithVAT]
           ,[TagPriceCurrency]
           ,[TagPriceExtra]
		   ,[ShowcaseID]
           ,[IsChecked]		   
           ,[CreatedDate]
           ,[LastModifiedDate]
           ,[CreatedByUserID]
           ,[LastModifiedByUserID]           
           ,[TagPriceWithOutVAT]
           ,[DeclarationNumber]
           ,[TnvedCode])
		select			
			@res,
			@LineDocument,
			s.[Model],
			s.[ProductID],
			s.[Type],
			s.[KtID],
			s.[Size],
			s.[Color],
			s.[Gender],
			s.[SupplierID],
			s.[SupplierName],
			s.[Country],
			s.[ThemedCollection],
			s.[Weight],
			s.[CostWithoutVAT],
			s.[CostCurrency],
			s.[TagPriceWithVAT],
			s.[TagPriceCurrency],
			s.[TagPriceExtra],
			s.[ShowcaseID],
			0,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID,
			s.TagPriceWithOutVAT,
			s.DeclarationNumber ,
			s.TnvedCode 
		from #TransferDocumentDetails s	

--print '2'

		INSERT INTO [dbo].[TransferDocumentStonesDetails]
           ([ProductID]
           ,[DocumentID]
           ,[Stone]
           ,[Shape]
           ,[Size]
           ,[Color]
           ,[Clarity]
           ,[Quantity]
           ,[Weight]
           ,[Setting]
           ,[CreatedDate]
           ,[LastModifiedDate]
           ,[CreatedByUserID]
           ,[LastModifiedByUserID])
		SELECT  s.[ProductID],
				@res,
				s.[Stone],
				s.[Shape],
				s.[Size],
				s.[Color],
				s.[Clarity],
				s.[Quantity],
				s.[Weight],
				s.[Setting],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
		FROM [dbo].[Stones] as s
			inner join #TransferDocumentDetails as dd on s.ProductID = dd.ProductID	

--print '3'

		-- фиксируем изменение статуса продукции в ProductTransfer - начало
		INSERT INTO [dbo].[ProductTransfer] (
			[ProductID],
			[Status],
			[ExReffOperationType],
			[ExtReffID],
			[CreatedDate],
			[CreatedByUserID]
			)
		SELECT
			p.ID,
			2,
			2,
			@res,
			@dt_now,
			@p_AddUserID
		from [dbo].[Product] p
			inner join #TransferDocumentDetails tdd on tdd.ProductID = p.ID
		-- фиксируем изменение статуса продукции в ProductTransfer - конец

--print '4'

		update p set
			[Status] = 2
			from [dbo].[Product] p
		inner join #TransferDocumentDetails tdd on tdd.ProductID = p.ID

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
			COMMIT TRANSACTION tr_insert; 

	end

	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[TransferDocument]
				set 
					[SyncDate]=@p_SyncDate,
					[SenderID]=@p_SenderID,
					[ReceiverID]=@p_ReceiverID,
					[Type]=@p_Type,
					[Contract]=@p_Contract,
					[Status]=@p_Status,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID
	
		set @res = case when @@rowcount=1 then @p_ID else 0 end	
				
		Insert into #TransferDocumentDetails
		SELECT @res,
				@LineDocument,
				[Model],
				[ID],
				[Type],
				[KtID],
				[Size],
				[Color],
				[Gender],
				[SupplierID],
				[SupplierName],
				[Country],
				[ThemedCollection],
				[Weight],
				[CostWithoutVAT],
				[CostCurrency],
				[TagPriceWithVAT],
				[TagPriceCurrency],
				[TagPriceExtra],
				[ShowcaseID],
				TagPriceWithOutVAT,
				DeclarationNumber ,
			   TnvedCode 
		FROM [dbo].[Product] as p
		 inner join (select DISTINCT Val1 from dbo.tf_ParserStrTo1Varchar150(@p_MassDocumentDetails, @delimeter)) st on	st.Val1 = p.ID

		-- фиксируем изменение статуса продукции в ProductTransfer - начало
		INSERT INTO [dbo].[ProductTransfer] (
			[ProductID],
			[Status],
			[ExReffOperationType],
			[ExtReffID],
			[CreatedDate],
			[CreatedByUserID]
			)
		SELECT
			p.ID,
			0,
			2,
			@res,
			@dt_now,
			@p_AddUserID
		from [dbo].[Product] p
			left join #TransferDocumentDetails tdd on tdd.ProductID = p.ID and tdd.DocumentID = @res
			left join TransferDocumentDetails dd on dd.ProductID = p.ID and dd.DocumentID = @res	
		where dd.[ID] is not null and tdd.ProductID is null and p.Status != 0
		-- фиксируем изменение статуса продукции в ProductTransfer - конец	

		INSERT INTO [dbo].[ProductTransfer] (
			[ProductID],
			[Status],
			[ExReffOperationType],
			[ExtReffID],
			[CreatedDate],
			[CreatedByUserID]
			)
		SELECT
			p.ID,
			2,
			2,
			@res,
			@dt_now,
			@p_AddUserID
		from [dbo].[Product] p
			left join #TransferDocumentDetails tdd on tdd.ProductID = p.ID and tdd.DocumentID = @res
			left join TransferDocumentDetails dd on dd.ProductID = p.ID and dd.DocumentID = @res	
		where dd.[ID] is null and tdd.ProductID is not null and p.Status != 2		

		update p set
			[Status] = 0
			from [dbo].[Product] p
			inner join TransferDocumentDetails tdd on tdd.ProductID = p.ID
		where tdd.DocumentID = @p_ID

		delete from TransferDocumentDetails where DocumentID = @p_ID
		delete from TransferDocumentStonesDetails where DocumentID = @p_ID		
		
		---- вставляем все строки продукции которые не найдены в локальной таблице
		INSERT INTO [dbo].[TransferDocumentDetails]
           ([DocumentID]
           ,[LineDocument]
           ,[Model]
           ,[ProductID]
           ,[Type]
           ,[KtID]
           ,[Size]
           ,[Color]
           ,[Gender]
           ,[SupplierID]
           ,[SupplierName]
           ,[Country]
           ,[ThemedCollection]
           ,[Weight]
           ,[CostWithoutVAT]
           ,[CostCurrency]
           ,[TagPriceWithVAT]
           ,[TagPriceCurrency]
           ,[TagPriceExtra]
		   ,[ShowcaseID]
           ,[IsChecked]		   
           ,[CreatedDate]
           ,[LastModifiedDate]
           ,[CreatedByUserID]
           ,[LastModifiedByUserID]           
           ,[TagPriceWithOutVAT]
           ,[DeclarationNumber]
           ,[TnvedCode])
		select			
			@res,
			@LineDocument,
			s.[Model],
			s.[ProductID],
			s.[Type],
			s.[KtID],
			s.[Size],
			s.[Color],
			s.[Gender],
			s.[SupplierID],
			s.[SupplierName],
			s.[Country],
			s.[ThemedCollection],
			s.[Weight],
			s.[CostWithoutVAT],
			s.[CostCurrency],
			s.[TagPriceWithVAT],
			s.[TagPriceCurrency],
			s.[TagPriceExtra],
			s.[ShowcaseID],
			0,
			@dt_now,
			@dt_now,
			@p_AddUserID,
			@p_AddUserID,
			s.TagPriceWithOutVAT,
			s.DeclarationNumber ,
			s.TnvedCode 
		from #TransferDocumentDetails s	

		INSERT INTO [dbo].[TransferDocumentStonesDetails]
           ([ProductID]
           ,[DocumentID]
           ,[Stone]
           ,[Shape]
           ,[Size]
           ,[Color]
           ,[Clarity]
           ,[Quantity]
           ,[Weight]
           ,[Setting]
           ,[CreatedDate]
           ,[LastModifiedDate]
           ,[CreatedByUserID]
           ,[LastModifiedByUserID])
		SELECT  s.[ProductID],
				@res,
				s.[Stone],
				s.[Shape],
				s.[Size],
				s.[Color],
				s.[Clarity],
				s.[Quantity],
				s.[Weight],
				s.[Setting],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID
		FROM [dbo].[Stones] as s
			inner join #TransferDocumentDetails as dd on s.ProductID = dd.[ProductID]
			and dd.DocumentID = @res

		update p set
			[Status] = 2
			from [dbo].[Product] p
		inner join #TransferDocumentDetails tdd on tdd.ProductID = p.ID

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 

			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete

			-- фиксируем изменение статуса продукции в ProductTransfer - начало
			INSERT INTO [dbo].[ProductTransfer] (
				[ProductID],
				[Status],
				[ExReffOperationType],
				[ExtReffID],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT
				tdd.ProductID,
				0,
				2,
				td.ID,
				@dt_now,
				@p_AddUserID
			from [dbo].[TransferDocument] td
			inner join  [dbo].[TransferDocumentDetails] tdd on tdd.DocumentID = td.ID 
				where td.[ID]=-@p_ID
			-- фиксируем изменение статуса продукции в ProductTransfer - конец

			update p set
				[Status] = 0
				from [dbo].[Product] p
				inner join  TransferDocumentDetails tdd on tdd.ProductID = p.ID
			where tdd.[DocumentID] = -@p_ID

			delete from [dbo].[TransferDocumentStonesDetails] where [DocumentID] = -@p_ID
			delete from [dbo].[TransferDocumentDetails] where [DocumentID] = -@p_ID
			delete from [dbo].[TransferDocument] where [ID]= -@p_ID

			set @res = @@rowcount 

		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kort
-- Create date: 2020-02-26 00:28
-- Description: Добавление/обновление/удаление записи в таблице dbo.TransferDocumentDetails
-- =============================================
-- xp_SaveTransferDocumentDetails @p_AddUserID=0,
 --@p_ID=0, 
 --@p_DocumentID=0,
 -- @p_LineDocument=0,
 --  @p_Model='',
 --   @p_ModelID=0,
	-- @p_Type='',
	--  @p_KtID=0,
	--   @p_Size='',
	--    @p_Color='',
	--	 @p_Gender='',
	--	  @p_SupplierID=0, 
	--	  @p_SupplierName='',
	--	   @p_Country='', 
	--	   @p_ThemedCollection='',
	--	    @p_Weight=0,
	--		 @p_CostWithoutVAT=0,
	--		  @p_CostCurrency='',
	--		   @p_TagPriceWithVAT=0,
	--		    @p_TagPriceCurrency='',
	--			 @p_TagPriceExtra='', 
	--			 @p_ShowcaseID=0,
	--					@p_TagPriceWithOutVAT=0,
	--					@p_DeclarationNumber='',
	--					@p_TnvedCode=''


-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveTransferDocumentDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_DocumentID int = null,
	@p_LineDocument int = null,
	@p_Model nvarchar(30) = null,
	@p_ProductID int = null,
	@p_Type nvarchar(50) = null,
	@p_KtID int = null,
	@p_Size nvarchar(50) = null,
	@p_Color nvarchar(50) = null,
	@p_Gender nvarchar(30) = null,
	@p_SupplierID int = null,
	@p_SupplierName nvarchar(255) = null,
	@p_Country nvarchar(255) = null,
	@p_ThemedCollection nvarchar(255) = null,
	@p_Weight money = null,
	@p_CostWithoutVAT money = null,
	@p_CostCurrency nvarchar(30) = null,
	@p_TagPriceWithVAT money = null,
	@p_TagPriceWithOutVAT money = null,	
	@p_TagPriceCurrency nvarchar(30) = null,
	@p_TagPriceExtra money = null,
	@p_ShowcaseID int = null,
	@p_DeclarationNumber nVARCHAR(40)= null,
	@p_TnvedCode nVARCHAR(40) = null,
	@p_ShowRes bit = 1

AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[TransferDocumentDetails] :
--	1 	[ID] int
--	2 	[DocumentID] int
--	3 	[LineDocument] int
--	4 	[Model] nvarchar(30)
--	5 	[ModelID] int
--	6 	[Type] nvarchar(50)
--	7 	[KtID] int
--	8 	[Size] nvarchar(50)
--	9 	[Color] nvarchar(50)
--	10	[Gender] nvarchar(30)
--	11	[SupplierID] int
--	12	[SupplierName] nvarchar(255)
--	13	[Country] nvarchar(255)
--	14	[ThemedCollection] nvarchar(255)
--	15	[Weight] money
--	16	[CostWithoutVAT] money
--	17	[CostCurrency] nvarchar(30)
--	18	[TagPriceWithVAT] money
--	19	[TagPriceCurrency] nvarchar(30)
--	20	[TagPriceExtra] money
--	21	[IsChecked] bit
--	22	[CreatedDate] datetime
--	23	[LastModifiedDate] datetime
--	24	[CreatedByUserID] int
--	25	[LastModifiedByUserID] int
--	26	[ShowcaseID] int
*/


	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()
	
	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[TransferDocumentDetails] (
					[DocumentID],
					[LineDocument],
					[Model],
					[ProductID],
					[Type],
					[KtID],
					[Size],
					[Color],
					[Gender],
					[SupplierID],
					[SupplierName],
					[Country],
					[ThemedCollection],
					[Weight],
					[CostWithoutVAT],
					[CostCurrency],
					[TagPriceWithVAT],
					[TagPriceCurrency],
					[TagPriceExtra],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[ShowcaseID],
					TagPriceWithOutVAT,
					DeclarationNumber,
					TnvedCode )
				values (
					@p_DocumentID,
					@p_LineDocument,
					@p_Model,
					@p_ProductID,
					@p_Type,
					@p_KtID,
					@p_Size,
					@p_Color,
					@p_Gender,
					@p_SupplierID,
					@p_SupplierName,
					@p_Country,
					@p_ThemedCollection,
					@p_Weight,
					@p_CostWithoutVAT,
					@p_CostCurrency,
					@p_TagPriceWithVAT,
					@p_TagPriceCurrency,
					@p_TagPriceExtra,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID,
					@p_ShowcaseID,
					@p_TagPriceWithOutVAT,
					@p_DeclarationNumber,
					@p_TnvedCode )

				set @res=SCOPE_IDENTITY()

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY

				declare @p_searchResult int =isnull((SELECT ID FROM [TransferDocumentDetails] where ID = @p_ID and DocumentID = @p_DocumentID),0)
				
				
				if (@p_searchResult = 0) begin
					Insert into [dbo].[TransferDocumentDetails] (
						[ID],
						[DocumentID],
						[LineDocument],
						[Model],
						[ProductID],
						[Type],
						[KtID],
						[Size],
						[Color],
						[Gender],
						[SupplierID],
						[SupplierName],
						[Country],
						[ThemedCollection],
						[Weight],
						[CostWithoutVAT],
						[CostCurrency],
						[TagPriceWithVAT],
						[TagPriceCurrency],
						[TagPriceExtra],
						[CreatedDate],
						[LastModifiedDate],
						[CreatedByUserID],
						[LastModifiedByUserID],
						[ShowcaseID],
						[TagPriceWithOutVAT],
						[DeclarationNumber],
						[TnvedCode] )
					values (
						@p_ID,
						@p_DocumentID,
						@p_LineDocument,
						@p_Model,
						@p_ProductID,
						@p_Type,
						@p_KtID,
						@p_Size,
						@p_Color,
						@p_Gender,
						@p_SupplierID,
						@p_SupplierName,
						@p_Country,
						@p_ThemedCollection,
						@p_Weight,
						@p_CostWithoutVAT,
						@p_CostCurrency,
						@p_TagPriceWithVAT,
						@p_TagPriceCurrency,
						@p_TagPriceExtra,
						@dt_now,
						@dt_now,
						@p_AddUserID,
						@p_AddUserID,
						@p_ShowcaseID,
						@p_TagPriceWithOutVAT,
						@p_DeclarationNumber,
						@p_TnvedCode )
				end
				else begin
					Update [dbo].[TransferDocumentDetails]
					set 
						[LineDocument]=@p_LineDocument,
						[Model]=@p_Model,
						[ProductID]=@p_ProductID,
						[Type]=@p_Type,
						[KtID]=@p_KtID,
						[Size]=@p_Size,
						[Color]=@p_Color,
						[Gender]=@p_Gender,
						[SupplierID]=@p_SupplierID,
						[SupplierName]=@p_SupplierName,
						[Country]=@p_Country,
						[ThemedCollection]=@p_ThemedCollection,
						[Weight]=@p_Weight,
						[CostWithoutVAT]=@p_CostWithoutVAT,
						[CostCurrency]=@p_CostCurrency,
						[TagPriceWithVAT]=@p_TagPriceWithVAT,
						[TagPriceCurrency]=@p_TagPriceCurrency,
						[TagPriceExtra]=@p_TagPriceExtra,
						[LastModifiedDate]=@dt_now,
						[LastModifiedByUserID]=@p_AddUserID,
						[ShowcaseID]=@p_ShowcaseID,
						[TagPriceWithOutVAT] = @p_TagPriceWithOutVAT,
						[DeclarationNumber] = @p_DeclarationNumber,
						[TnvedCode] = @p_TnvedCode 
					where ID = @p_ID and DocumentID = @p_DocumentID
				end

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[TransferDocumentDetails]
			where ID= -@p_ID
			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kort
-- Create date: 2020-02-26 00:29
-- Description: Добавление/обновление/удаление записи в таблице dbo.TransferDocumentStonesDetails
-- =============================================
-- xp_SaveTransferDocumentStonesDetails p_AddUserID, p_ID, p_ProductID, p_Stone, p_Shape, p_Size, p_Color, p_Clarity, p_Quantity, p_Weight, p_Setting
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveTransferDocumentStonesDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_ProductID int = null,
	@p_DocumentID int = null,
	@p_Stone nvarchar(50) = null,
	@p_Shape nvarchar(50) = null,
	@p_Size nvarchar(50) = null,
	@p_Color nvarchar(50) = null,
	@p_Clarity nvarchar(30) = null,
	@p_Quantity int = null,
	@p_Weight money = null,
	@p_Setting nvarchar(50) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[TransferDocumentStonesDetails] :
--	1 	[ID] int
--	2 	[ProductID] int
--	3 	[Stone] nvarchar(50)
--	4 	[Shape] nvarchar(50)
--	5 	[Size] nvarchar(50)
--	6 	[Color] nvarchar(50)
--	7 	[Clarity] nvarchar(30)
--	8 	[Quantity] int
--	9 	[Weight] money
--	10	[Setting] nvarchar(50)
--	11	[CreatedDate] datetime
--	12	[LastModifiedDate] datetime
--	13	[CreatedByUserID] int
--	14	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[TransferDocumentStonesDetails] (
					[ProductID],
					[DocumentID],
					[Stone],
					[Shape],
					[Size],
					[Color],
					[Clarity],
					[Quantity],
					[Weight],
					[Setting],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_ProductID,
					@p_DocumentID,
					@p_Stone,
					@p_Shape,
					@p_Size,
					@p_Color,
					@p_Clarity,
					@p_Quantity,
					@p_Weight,
					@p_Setting,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[TransferDocumentStonesDetails]
				set 
					[ProductID]=@p_ProductID,
					[DocumentID]=@p_DocumentID,
					[Stone]=@p_Stone,
					[Shape]=@p_Shape,
					[Size]=@p_Size,
					[Color]=@p_Color,
					[Clarity]=@p_Clarity,
					[Quantity]=@p_Quantity,
					[Weight]=@p_Weight,
					[Setting]=@p_Setting,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[TransferDocumentStonesDetails]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov
-- Create date: 2020-02-25 12:49
-- Description: Добавление/обновление/удаление записи в таблице dbo.TransferDocument
-- =============================================
-- xp_SaveTransferRelatedDocument 15, 236, null, 102, 201, '112', 0, '462|1|'
-- xp_SaveTransferRelatedDocument 1474, 0, null, null, 301, '114', 0, '462|1|'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveTransferRelatedDocument]
	@p_AddUserID int,
	@p_ID int,
	@p_SyncDate datetime = null,
	@p_SenderID int = null,
	@p_ReceiverID int = null,
	@p_Contract nvarchar(255) = null,
	@p_Status int = null,
	@p_MassDocumentDetails nvarchar(MAX) = ''	
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON
	declare @res int=0
	declare @StrErr nvarchar(max)
	declare @dt_now datetime=getdate()
	declare @delimeter nvarchar(10)= '|';
	declare @p_CounterLine int = 0;

	CREATE TABLE #TransferDocumentDetails(
			[ID] int,
			[RelatedProductID] int,
			[DocumentID] int,
			[LineDocument] int,
			[PartNumber] int,
			[Model] nvarchar(30),
			[Quantity] int,
			[TagPriceWithVat] money,
			[TagPriceWithOutVat] money,
			[UnitPrice] money,
			[supplier] int
		)

	CREATE TABLE #parsing_table(
			[Val1] nvarchar(max),
			[Val2] nvarchar(max)
		)
	INSERT INTO #parsing_table select Val1, Val2 from dbo.tf_ParserStrTo2Varchar150(@p_MassDocumentDetails)
	
	--select * from #parsing_table

	INSERT INTO #TransferDocumentDetails
	SELECT  p.[ID],
			p.[ID],
			@res,
			@p_CounterLine,
			p.[PartNumber],
			p.[Model],
			st.[Val2],
			p.[UnitPrice]*st.[Val2],
			(p.[TagPriceWithOutVat]/(CASE WHEN p.[TagPriceWithVat]=0 THEN 1 ELSE p.[TagPriceWithVat] END))*st.[Val2]*p.[UnitPrice],
			p.[UnitPrice],
			p.Supplier
	FROM [dbo].[RelatedProduct] as p
		inner join #parsing_table st on st.[Val1] = p.ID 
	
	--select * from #TransferDocumentDetails

	UPDATE #TransferDocumentDetails SET @p_CounterLine = [LineDocument] = @p_CounterLine + 1
	--select * from #TransferDocumentDetails
	if @p_ID=0 begin
	
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[TransferRelatedProductDocument] (
					[SenderID],					
					[ReceiverID],
					[Contract],
					[Status],					
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID])
				values (
					@p_SenderID,					
					@p_ReceiverID,
					@p_Contract,
					@p_Status,					
					@dt_now,
					@dt_now,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()				

				INSERT INTO [dbo].[TransferRelatedProductDocumentDetails]
				   ( [DocumentID]
				   ,[RelatedProductID]
				   ,[LineDocument]
				   ,[PartNumber]
				   ,[Model]
				   ,[Quantity]
				   ,[TagPriceWithVat]
				   ,[TagPriceWithOutVat]
				   ,[UnitPrice]
				   ,[CreatedDate]
				   ,[LastModifiedDate]
				   ,[CreatedByUserID]
				   ,[Supplier]
				   )
				select
					@res,
					s.[RelatedProductID],
					s.[PartNumber],					
					s.[PartNumber],
					s.[Model],
					s.[Quantity],
					s.[TagPriceWithVat],
					s.[TagPriceWithOutVat],
					s.[UnitPrice],
					@dt_now,
					@dt_now,
					@p_AddUserID,
					s.supplier
				from #TransferDocumentDetails s	

			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
			COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[TransferRelatedProductDocument]
				set 
					[SenderID]=@p_SenderID,
					[ReceiverID]=@p_ReceiverID,
					[Contract]=@p_Contract,
					[Status]=@p_Status,
					[LastModifiedDate]=@dt_now
				where ID = @p_ID
	--print @@rowcount
			set @res = case when @@rowcount=1 then @p_ID else 0 end	
			delete from [dbo].[TransferRelatedProductDocumentDetails] where DocumentID = @p_ID
		
			---- вставляем все строки продукции которые не найдены в локальной таблице
			INSERT INTO [dbo].[TransferRelatedProductDocumentDetails]
			   ([DocumentID]
			   ,[RelatedProductID]
			   ,[LineDocument]
			   ,[PartNumber]
			   ,[Model]
			   ,[Quantity]
			   ,[TagPriceWithVat]
			   ,[TagPriceWithOutVat]
			   ,[UnitPrice]
			   ,[CreatedDate]
			   ,[LastModifiedDate]
			   ,[CreatedByUserID]
			   ,[LastModifiedByUserID]
			   ,[Supplier])
			select				
				@res,
				s.[RelatedProductID],
				s.[LineDocument],
				s.[PartNumber],
				s.[Model],
				s.[Quantity],
				s.[TagPriceWithVat],
				s.[TagPriceWithOutVat],
				s.[UnitPrice],
				@dt_now,
				@dt_now,
				@p_AddUserID,
				@p_AddUserID,
				s.supplier
			from #TransferDocumentDetails s	
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 

			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[TransferRelatedProductDocumentDetails] where [DocumentID] = -@p_ID
			delete from [dbo].[TransferRelatedProductDocument] where [ID]= -@p_ID
			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Pazynich
-- Create date: 2020-10-02 13:25
-- Description: Добавление/обновление/удаление записи в таблице dbo.TransferRelatedProductDocumentDetails
-- =============================================
-- xp_SaveTransferRelatedProductDocumentDetails p_AddUserID, p_ID, p_DocumentID, p_RelatedProductID, p_LineDocument, p_PartNumber, p_Model, p_Quantity, p_TagPriceWithVat, p_TagPriceWithOutVat, p_UnitPrice, p_Currency
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveTransferRelatedProductDocumentDetails]
	@p_AddUserID int,
	@p_ID int,
	@p_DocumentID int = null,
	@p_RelatedProductID int = null,
	@p_LineDocument int = null,
	@p_PartNumber int = null,
	@p_Model nvarchar(40) = null,
	@p_Quantity int = null,
	@p_TagPriceWithVat money = null,
	@p_TagPriceWithOutVat money = null,
	@p_UnitPrice money = null,
	@p_Currency nvarchar(40) = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[TransferRelatedProductDocumentDetails] :
--	1 	[ID] int
--	2 	[DocumentID] int
--	3 	[RelatedProductID] int
--	4 	[LineDocument] int
--	5 	[PartNumber] int
--	6 	[Model] nvarchar(40)
--	7 	[Quantity] int
--	8 	[TagPriceWithVat] money
--	9 	[TagPriceWithOutVat] money
--	10	[UnitPrice] money
--	11	[Currency] nvarchar(40)
--	12	[CreatedDate] datetime
--	13	[LastModifiedDate] datetime
--	14	[CreatedByUserID] int
--	15	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[TransferRelatedProductDocumentDetails] (
					[DocumentID],
					[RelatedProductID],
					[LineDocument],
					[PartNumber],
					[Model],
					[Quantity],
					[TagPriceWithVat],
					[TagPriceWithOutVat],
					[UnitPrice],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_DocumentID,
					@p_RelatedProductID,
					@p_LineDocument,
					@p_PartNumber,
					@p_Model,
					@p_Quantity,
					@p_TagPriceWithVat,
					@p_TagPriceWithOutVat,
					@p_UnitPrice,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[TransferRelatedProductDocumentDetails]
				set 
					[DocumentID]=@p_DocumentID,
					[RelatedProductID]=@p_RelatedProductID,
					[LineDocument]=@p_LineDocument,
					[PartNumber]=@p_PartNumber,
					[Model]=@p_Model,
					[Quantity]=@p_Quantity,
					[TagPriceWithVat]=@p_TagPriceWithVat,
					[TagPriceWithOutVat]=@p_TagPriceWithOutVat,
					[UnitPrice]=@p_UnitPrice,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[TransferRelatedProductDocumentDetails]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2020-01-10 17:07
-- Description: Добавление/обновление/удаление записи в таблице dbo.UserActiveHistory
-- =============================================
-- xp_SaveUserActiveHistory p_AddUserID, p_ID, @p_AttributeID, @p_Type, @p_Path, @p_ShowRes
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveUserActiveHistory]
	@p_AddUserID int,
	@p_ID int,
	@p_AttributeID int,
	@p_Type int,
	@p_Path varchar(255) = null,
	@p_ShowRes bit = 1
	
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[UserActiveHistory] :
--	1 	[ID] int
--	2 	[Path] varchar(255)
--	3 	[CreatedDate] datetime
--	4 	[CreatedByUserID] int
--	5 	[AttributeID] int
--	6 	[Type] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()
	
	
	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[UserActiveHistory] (
					[Path],
					[CreatedDate],
					[CreatedByUserID],
					[AttributeID],
					[Type])
				values (
					@p_Path,
					@dt_now,
					@p_AddUserID,
					@p_AttributeID,
					@p_Type)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[UserActiveHistory]
				set 
					[Path]=@p_Path,
					[AttributeID]=@p_AttributeID,
					[Type]=@p_Type
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[UserActiveHistory]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-11-08 16:32
-- Description: Добавление/обновление/удаление записи в таблице dbo.Users
-- =============================================
-- xp_SaveUsers p_AddUserID, p_ID, p_Number, p_FirstName, p_LastName, p_SecondName, p_INN, p_RoleID, p_Phone, p_Email, p_Active, p_Login, p_Password, p_Birthday, p_GenderID, p_ThemeID
-- xp_SaveUsers 17, 0, 1212111111, 'admin', 'admin', 'admin', '111111', 0, '111111', 'adminmuiz.ru', 1, 'admin', '3glMe3eY9J4=', '2019-11-21', 1, 0
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveUsers]
	@p_AddUserID int,
	@p_ID int,
	@p_Number int = null,
	@p_FirstName nvarchar(30) = null,
	@p_LastName nvarchar(30) = null,
	@p_SecondName nvarchar(30) = null,
	@p_INN nvarchar(20) = null,
	@p_RoleID tinyint = null,
	@p_Phone nvarchar(50) = null,
	@p_Email nvarchar(30) = null,
	@p_Active bit = null,
	@p_Login nvarchar(30) = null,
	@p_Password nvarchar(255) = null,
	@p_Birthday date = null,
	@p_GenderID tinyint = null,
	@p_ThemeID tinyint = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Users] :
--	1 	[ID] int
--	2 	[Number] int
--	3 	[FirstName] nvarchar(30)
--	4 	[LastName] nvarchar(30)
--	5 	[SecondName] nvarchar(30)
--	6 	[INN] varchar(20)
--	7 	[RoleID] tinyint
--	8 	[Phone] varchar(50)
--	9 	[Email] varchar(30)
--	10	[Active] bit
--	11	[Login] nvarchar(30)
--	12	[Password] nvarchar(30)
--	13	[CreatedDate] datetime
--	14	[LastModifiedDate] datetime
--	15	[CreatedByUserID] int
--	16	[LastModifiedByUserID] int
--	17	[Birthday] date
--	18	[GenderID] tinyint
--	19	[ThemeID] tinyint
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Users] (
					[Number],
					[FirstName],
					[LastName],
					[SecondName],
					[INN],
					[RoleID],
					[Phone],
					[Email],
					[Active],
					[Login],
					[Password],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID],
					[Birthday],
					[GenderID],
					[ThemeID])
				values (
					@p_Number,
					@p_FirstName,
					@p_LastName,
					@p_SecondName,
					@p_INN,
					@p_RoleID,
					@p_Phone,
					@p_Email,
					@p_Active,
					@p_Login,
					@p_Password,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID,
					@p_Birthday,
					@p_GenderID,
					@p_ThemeID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Users]
				set 
					[Number]=@p_Number,
					[FirstName]=@p_FirstName,
					[LastName]=@p_LastName,
					[SecondName]=@p_SecondName,
					[INN]=@p_INN,
					[RoleID]=@p_RoleID,
					[Phone]=@p_Phone,
					[Email]=@p_Email,
					[Active]=@p_Active,
					[Login]=@p_Login,
					[Password]=@p_Password,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID,
					[Birthday]=@p_Birthday,
					[GenderID]=@p_GenderID,
					[ThemeID]=@p_ThemeID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Users]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Shilin
-- Create date: 2019-09-16 18:16
-- Description: Добавление/обновление/удаление записи в таблице dbo.UsersWRK
-- =============================================
-- xp_SaveUsersWRK p_AddUserID, p_ID, p_UserID, p_Type, p_DtAdd
-- =============================================
create PROCEDURE [dbo].[xp_SaveUsersWRK]
	@p_AddUserID int,
	@p_ID int,
	@p_UserID int = null,
	@p_Type tinyint = null,
	@p_DtAdd datetime = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[UsersWRK] :
--	1 	[ID] int
--	2 	[UserID] int
--	3 	[Type] tinyint
--	4 	[DtAdd] datetime
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[UsersWRK] (
					[UserID],
					[Type],
					[DtAdd])
				values (
					@p_UserID,
					@p_Type,
					@p_DtAdd)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[UsersWRK]
				set 
					[UserID]=@p_UserID,
					[Type]=@p_Type,
					[DtAdd]=@p_DtAdd
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[UsersWRK]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-10-29 17:51
-- Description: Добавление/обновление/удаление записи в таблице dbo.Vendor
-- =============================================
-- xp_SaveVendor p_AddUserID, p_ID, p_Name, p_Address, p_Serial, p_Number, p_Issue, p_IssueDate
-- xp_SaveVendor 16, 0, 'Name', 'Address', '12', '123456', '123', '2019-10-07 13:45:40.740'
-- =============================================
CREATE PROCEDURE dbo.xp_SaveVendor
	@p_AddUserID int,
	@p_ID int,
	@p_Name nvarchar(255) = null,
	@p_Address nvarchar(255) = null,
	@p_Serial nvarchar(40) = null,
	@p_Number nvarchar(40) = null,
	@p_Issue nvarchar(255) = null,
	@p_IssueDate datetime = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[Vendor] :
--	1 	[ID] int
--	2 	[Name] nvarchar(255)
--	3 	[Address] nvarchar(255)
--	4 	[Serial] nvarchar(40)
--	5 	[Number] nvarchar(40)
--	6 	[Issue] nvarchar(255)
--	7 	[IssueDate] datetime
--	8 	[CreatedDate] datetime
--	9 	[LastModifiedDate] datetime
--	10	[CreatedByUserID] int
--	11	[LastModifiedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[Vendor] (
					[Name],
					[Address],
					[Serial],
					[Number],
					[Issue],
					[IssueDate],
					[CreatedDate],
					[LastModifiedDate],
					[CreatedByUserID],
					[LastModifiedByUserID])
				values (
					@p_Name,
					@p_Address,
					@p_Serial,
					@p_Number,
					@p_Issue,
					@p_IssueDate,
					@dt_now,
					@dt_now,
					@p_AddUserID,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[Vendor]
				set 
					[Name]=@p_Name,
					[Address]=@p_Address,
					[Serial]=@p_Serial,
					[Number]=@p_Number,
					[Issue]=@p_Issue,
					[IssueDate]=@p_IssueDate,
					[LastModifiedDate]=@dt_now,
					[LastModifiedByUserID]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[Vendor]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

--exec [dbo].[xp_SaveVersions] 66, '1.2'
CREATE proc [dbo].[xp_SaveVersions]
(
@p_AddUserID int,
@p_Number varchar(20)=null
)
as 
begin
	Declare @dt_now datetime=getdate(),
			@res int=0

	if ISNULL(@p_Number, '')!=''
	begin
		if not exists (select 1 from Versions where Number = @p_Number)
		begin
			insert into Versions (Number, SyncDate, CreatedByUserID, CreatedDate)
			values (@p_Number, null, @p_AddUserID, @dt_now)
			set @res=SCOPE_IDENTITY()
		end 
	end
	select @res  as res;
end

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Pazynich
-- Create date: 2020-12-09 14:12
-- Description: Добавление/обновление/удаление записи в таблице dbo.WorkPinPad
-- =============================================
-- xp_SaveWorkPinPad p_AddUserID, p_ID, p_PosID, p_Status
-- =============================================
CREATE PROCEDURE dbo.xp_SaveWorkPinPad
	@p_AddUserID int,
	@p_ID int,
	@p_PosID nvarchar(max) = null,
	@p_Status bit = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[WorkPinPad] :
--	1 	[ID] int
--	2 	[PosID] nvarchar(max)
--	3 	[Status] bit
--	4 	[CreatedDate] datetime
--	5 	[CreatedByUserID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[WorkPinPad] (
					[PosID],
					[Status],
					[CreatedDate],
					[CreatedByUserID])
				values (
					@p_PosID,
					@p_Status,
					@dt_now,
					@p_AddUserID)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[WorkPinPad]
				set 
					[PosID]=@p_PosID,
					[Status]=@p_Status
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update; 

	end
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[WorkPinPad]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
	if @p_ShowRes = 1 select @res  as res
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-11-26 12:54
-- Description: Добавление/обновление/удаление записи в таблице dbo.WorkShift
-- =============================================
-- xp_SaveWorkShift p_AddUserID, p_ID, p_PosID, p_WorkShiftID
-- xp_SaveWorkShift 17, 0, 1, 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_SaveWorkShift]
	@p_AddUserID int,
	@p_ID int,
	@p_PosID int = null,
	@p_WorkShiftID int = null
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

/*   структура таблицы [dbo].[WorkShift] :
--	1 	[ID] int
--	2 	[PosID] int
--	3 	[WorkShiftID] int
*/

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	if @p_ID=0 begin
		BEGIN TRANSACTION tr_insert
			BEGIN TRY
				Insert into [dbo].[WorkShift] (
					[PosID],
					[WorkShiftID],
					[OpeningDate],
					[OpeningUser]
					)
				values (
					@p_PosID,
					@p_WorkShiftID,
					@dt_now,
					@p_AddUserID
					)

				set @res=SCOPE_IDENTITY()
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_insert; 

	end
	else if  @p_ID>0 begin
		begin tran tr_update
			BEGIN TRY
				Update [dbo].[WorkShift]
				set 
					[PosID]=@p_PosID,
					[WorkShiftID]=@p_WorkShiftID,
					[ClosingDate]=@dt_now,
					[ClosingUser]=@p_AddUserID
				where ID = @p_ID

				set @res = case when @@rowcount=1 then @p_ID else 0 end
			END TRY 
			BEGIN CATCH   
				set  @StrErr ='ERROR_NUMBER=' + isnull(convert(nvarchar(max), ERROR_NUMBER()),'-') + ' ' + 
								'ERROR_SEVERITY=' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),'-') +  ' ' +
								'ERROR_STATE=' + isnull(convert(nvarchar(max), ERROR_STATE()),'-') +  ' ' + 
								'ERROR_PROCEDURE=' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),'-') +  ' ' + 
								'ERROR_LINE=' + isnull(convert(nvarchar(max), ERROR_LINE()),'-') +  ' ' +
								'ERROR_MESSAGE=' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),'-')
				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  
				IF @@TRANCOUNT > 0 
				begin
					ROLLBACK TRANSACTION;
					set @res=0;
				end
			END CATCH; 
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION tr_update;

	end
/*
	else if  @p_ID<0 begin
		begin tran tr_delete
			delete from [dbo].[WorkShift]
			where ID= -@p_ID

			set @res = @@rowcount 
		commit tran tr_delete
	end
*/
	if @p_ShowRes = 1 select @res  as res
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		
-- Create date: <Create Date,,>
-- Description:
-- =============================================
-- xp_SetDocumentID 16, 2128, 2
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetDocumentID]
	@p_AddUserID int,
	@p_ID bigint,
	@p_Status int
	,@p_ShowRes bit = 1 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRANSACTION tr_update
		DECLARE @string_number NVARCHAR(255)
		SELECT @string_number = (SELECT CONVERT(bigInt, [Value])+1 from [dbo].[Attributes] WHERE Name='Номер поставки товара')	

		UPDATE [dbo].[Attributes]
				set 
					[Value]=@string_number
				where Name='Номер поставки товара'

		UPDATE [dbo].[Document]
		   SET 
			[DocumentID] = @string_number,
			[Status] = @p_Status,
			LastModifiedDate=getdate(),
			LastModifiedByUserID=@p_AddUserID
			where ID=@p_ID
		
		set @p_ShowRes = @@rowcount

		exec xp_SaveProductFromDocument @p_AddUserID, @string_number		

	COMMIT TRANSACTION tr_update; 
	exec [xp_UpdDocument] @p_ID, @p_AddUserID

	if @p_ShowRes = 1 select @string_number

END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:      MJF\Voskresenskaya.A
-- Create date: 19.05.2020 14:48:07
-- Description: Добавление/обновление/удаление записи в таблице dbo.KT
-- =============================================
-- xp_SetPrepaymentID 15, 29
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetPrepaymentID]
	@p_AddUserID int,
	@p_ID int
	,@p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

	UPDATE [dbo].[Prepayment]
	SET 
		[IsActive] = 0,
		[Source] = 1, 
		[LastModifiedDate] = @dt_now,
		[LastModifiedByUserID]=@p_AddUserID
	WHERE
		[ID] = @p_ID
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		
-- Create date: <Create Date,,>
-- Description:
-- =============================================
-- xp_SetProduct 16
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetProduct]
	@p_AddUserID int,
	@p_ID int,
	@p_Status int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	UPDATE [dbo].[Product]
		SET 
		[Status] = @p_Status,
		LastModifiedDate=getdate(),
		LastModifiedByUserID=@p_AddUserID
		where ID=@p_ID
	exec [dbo].[xp_SaveProductTransfer] @p_AddUserID,0,@p_ID,@p_Status

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		
-- Create date: <Create Date,,>
-- Description:
-- =============================================
-- xp_SetRegisterID 16, 1, '1090|2|3|4'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetRegisterID]
	@p_AddUserID int,
	@p_ID int,	
	@p_MassScrapDocumentID nvarchar(max),
	@p_ShowRes bit = 1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	SET NOCOUNT ON;
	declare @end_request nvarchar(max) = ''

	BEGIN TRANSACTION tr_update
		DECLARE @string_number NVARCHAR(255)
		SELECT @string_number = (SELECT CONVERT(bigInt, [Value])+1 from [dbo].[Attributes] WHERE Name='Номер реестра квитанций покупки лома')
		
		UPDATE [dbo].[Attributes]
				set 
					[Value]=@string_number
				where Name='Номер реестра квитанций покупки лома'

		UPDATE [dbo].[Register]
		   SET 
			[ScrapRegisterNumber] = @string_number,
			LastModifiedDate=getdate(),
			LastModifiedByUserID=@p_AddUserID
			where ID=@p_ID

		set @p_MassScrapDocumentID = (REPLACE(@p_MassScrapDocumentID,'|',','))

		set @end_request = 'update [dbo].[ScrapDocument] set RegisterID = '+ cast(@p_ID as nvarchar(max))+ ',
		LastModifiedDate= getdate(),
		LastModifiedByUserID= '+ cast(@p_AddUserID as nvarchar(max)) +',
		status = 5 where [dbo].[ScrapDocument].[ID] in (' + @p_MassScrapDocumentID + ')'
		exec (@end_request);

	COMMIT TRANSACTION tr_update; 
	if @p_ShowRes = 1 select @string_number
END 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		
-- Create date: <Create Date,,>
-- Description:
-- =============================================
-- xp_SetRelatedProductDocumentID 66, 6001020000029, '04.07.2020 00:00:00'
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetRelatedProductDocumentID]
	@p_AddUserID int,
	@p_ReffID bigint,
	@p_ReffDate datetime,
	@p_ShowRes bit = 1 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE  
		@p_ConfirmetDate datetime = getdate(),
		@p_ID int = NULL,
		@dt_now datetime=getdate(),
		@DateFromRefDate_string nvarchar(max) = CONVERT(nvarchar, @p_ReffDate, 120),
		@string_number NVARCHAR(255)

	BEGIN TRANSACTION tr_update

		-- Получаем следующий нумератор из аттрибутов
		SELECT @string_number = (SELECT CONVERT(bigInt, [Value])+1 from [dbo].[Attributes] WHERE Name='Номер поставки сопутствующего товара')	

		-- Устанавливаем увеличенный на 1 нумератор в аттрибутах
		UPDATE [dbo].[Attributes]
			SET 
				[Value]=@string_number
			WHERE Name='Номер поставки сопутствующего товара'

		-- Устанавливаем статус документа и присваиваем ему нумератор из аттрибутов
		UPDATE [dbo].[RelatedProductDocument]
			SET 
				[DocumentID] = @string_number,
				[Status] = 1,
				LastModifiedDate=getdate(),
				LastModifiedByUserID=@p_AddUserID
			WHERE [ReffID] = @p_ReffID

		SELECT @p_ID = [ID]  FROM [dbo].[RelatedProductDocument] WHERE [ReffID] = @p_ReffID
	
		-- Создаем временную таблицу для деталей документа
		CREATE TABLE #RelatedProductDocumentDetails(
					[ID] int,
					[DocumentID] int,
					[ReffDate] datetime,
					[LineDocument] int,
					[PartNumber] int,
					[Model] nvarchar(40),
					[Quantity] int,
					[TagPriceWithVat] money,
					[TagPriceWithOutVat] money,
					[Currency] nvarchar(40),
					[CreatedData] datetime,
					[LastModifiedDate] datetime,
					[CreatedByUserID] int,
					[LastModifiedByUserID] int,
					[IsChecked] bit,
					[SenderID] int,
					[Supplier] int
			)

		-- Заполняем временную таблицу деталей документа
		INSERT into #RelatedProductDocumentDetails
			SELECT  dd.ID,
					dd.[DocumentID],
					dd.ReffDate,
					dd.LineDocument,
					dd.PartNumber,
					dd.Model,
					dd.Quantity,
					dd.TagPriceWithVat,
					dd.TagPriceWithOutVat,
					dd.Currency,
					dd.CreatedData,
					dd.LastModifiedDate,
					dd.CreatedByUserID,
					dd.LastModifiedByUserID,
					dd.IsChecked,
					rpd.SenderID,
					dd.Supplier
			FROM [dbo].[RelatedProductDocumentDetails] as dd
				inner join [dbo].[RelatedProductDocument] rpd on rpd.ID=dd.[DocumentID]
			WHERE rpd.[ReffID] = @p_ReffID
		
		-- Обновляем строки продукции которые содержаться в #RelatedProductDocumentDetails и найдены в RelatedProduct
		UPDATE [dbo].[RelatedProduct]
		SET 
			[Quantity] = l.[Quantity]+s.[Quantity],
			[TagPriceWithVat] = l.[TagPriceWithVat]+s.[TagPriceWithVat],
			[TagPriceWithOutVat] = s.[TagPriceWithOutVat]+s.[TagPriceWithOutVat],
			[UnitPrice] = s.[TagPriceWithVat]/IsNull(s.[Quantity],0),						
			[Currency] = s.[Currency],
			[Status] = 1
		FROM [dbo].[RelatedProduct] l
			inner join #RelatedProductDocumentDetails s on l.[PartNumber]=s.[PartNumber] AND l.[Model]=s.[Model] and l.Supplier=s.Supplier
		
		-- 1) Фиксируем изменение продукции в RelatedProductTransfer которые есть
		
		/*Из двух merge необходимо составить один. Переписать в будущем*/
		
		merge [dbo].[RelatedProductTransfer] as target
			using (			
			SELECT s.[Model],
			s.[PartNumber],
			s.[Supplier],
			s.[Quantity],
			l.[Quantity] as QuantityOnStorage,
			rdd.[ReffDate],
			rdd.[ReffID],
			rdd.[ID],
			@dt_now as 'CreatedDate'
		FROM #RelatedProductDocumentDetails s
			inner join [dbo].[RelatedProduct] l on l.[PartNumber]=s.[PartNumber] AND l.[Model]=s.[Model] and l.[Supplier] = s.[Supplier]
			inner join [dbo].[RelatedProductDocument] rdd on rdd.ReffID=@p_ReffID
		WHERE l.[PartNumber]=s.[PartNumber] AND l.[Model]=s.[Model] and l.Supplier=s.Supplier) as Source
			([Model],[PartNumber],[Supplier],[Quantity],QuantityOnStorage,[ReffDate],[ReffID],[ID], CreatedDate )
			on target.[Model] = source.[Model]
			and  target.[PartNumber] = source.[PartNumber]
			and  target.[Supplier] = source.[Supplier]
			and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
			when matched then
			update
			set 
				target.[Quantity] = source.[Quantity],
				target.[QuantityOnStorage] = source.[QuantityOnStorage],
				target.[ExReffOperationType] = 1,
				target.[ExtReffDate] = source.[ReffDate],
				target.[ExtReffID] = source.[ID],
				target.[CreatedDate] = @dt_now,
				target.[CreatedByUserID] = @p_AddUserID
			when not matched then
			insert ([Model],[PartNumber],[Supplier],[Quantity],[QuantityOnStorage],[ExReffOperationType],[ExtReffDate],[ExtReffID],[CreatedDate],[CreatedByUserID])
			values (source.[Model],source.[PartNumber],source.[Supplier],source.[Quantity],source.[QuantityOnStorage],1,source.[ReffDate],source.[ID],@dt_now,@p_AddUserID);	

		-- 2) Фиксируем изменение продукции в RelatedProductTransfer которых нет
		merge [dbo].[RelatedProductTransfer] as target
			using (			
			SELECT s.[Model],
			s.[PartNumber],
			s.[Supplier],
			s.[Quantity],
			s.[Quantity] as QuantityOnStorage,
			rdd.[ReffDate],
			rdd.[ReffID],
			rdd.[ID],
			@dt_now as 'CreatedDate'
		FROM #RelatedProductDocumentDetails s
			left join [dbo].[RelatedProduct] l on l.[PartNumber]=s.[PartNumber] AND l.[Model]=s.[Model] and l.Supplier=s.Supplier
			inner join [dbo].[RelatedProductDocument] rdd on rdd.ReffID=@p_ReffID
		WHERE l.[PartNumber] is null and l.[Model] is null and l.[Supplier] is null) as Source
			([Model],[PartNumber],[Supplier],[Quantity],QuantityOnStorage,[ReffDate],[ReffID],[ID], CreatedDate )
			on target.[Model] = source.[Model]
			and  target.[PartNumber] = source.[PartNumber]
			and  target.[Supplier] = source.[Supplier]
			and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
			when matched then
			update
			set 
				target.[Quantity] = source.[Quantity],
				target.[QuantityOnStorage] = source.[QuantityOnStorage],
				target.[ExReffOperationType] = 1,
				target.[ExtReffDate] = source.[ReffDate],
				target.[ExtReffID] = source.[ID],
				target.[CreatedDate] = @dt_now,
				target.[CreatedByUserID] = @p_AddUserID
			when not matched then
			insert ([Model],[PartNumber],[Supplier],[Quantity],[QuantityOnStorage],[ExReffOperationType],[ExtReffDate],[ExtReffID],[CreatedDate],[CreatedByUserID])
			values (source.[Model],source.[PartNumber],source.[Supplier],source.[Quantity],source.[QuantityOnStorage],1,source.[ReffDate],source.[ID],@dt_now,@p_AddUserID);	

		-- Вставляем все строки продукции которые содержаться в #RelatedProductDocumentDetails и не найдены в RelatedProduct
		INSERT into [dbo].[RelatedProduct](
			[PartNumber]
			,[Model]
			,[Supplier]
			,[Quantity]
			,[TagPriceWithVat]
			,[TagPriceWithOutVat]
			,[UnitPrice]
			,[Currency]
			,[Status]			
		) 
		SELECT
			s.[PartNumber],
			s.[Model],
			s.[Supplier],
			s.[Quantity],
			s.[TagPriceWithVat],
			s.[TagPriceWithOutVat],
			s.[TagPriceWithVat]/ IsNull(s.[Quantity],0),
			s.[Currency],
			0			
		FROM #RelatedProductDocumentDetails s
			left join [dbo].[RelatedProduct] l on l.[PartNumber]=s.[PartNumber] AND l.[Model]=s.[Model] and l.[Supplier]=s.[Supplier]  
		WHERE l.[PartNumber] is null and l.[Model] is null and  l.Supplier is null

		SET @p_ShowRes = @@rowcount

	COMMIT TRANSACTION tr_update; 
	if @p_ShowRes = 1 select @string_number
	exec [dbo].[xp_UpdRelatedProductDocument] @p_ID,  @p_AddUserID 
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		
-- Create date: <Create Date,,>
-- Description:
-- =============================================
-- xp_SetRevaluationDocumentID 1474, 338
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetRevaluationDocumentID]
	@p_AddUserID int,
	@p_DocumentID bigint
	,@p_ShowRes bit = 1 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- BEGIN TRANSACTION tr_update
		DECLARE
		@string_number NVARCHAR(255),
		@dt_now datetime=getdate(),
		@p_ProductString nvarchar(MAX),
		@p_Status integer,
		@p_CountProduct integer,
		@p_CountDetailsProduct integer

		SET @p_CountProduct = (
					SELECT COUNT([ProductID]) FROM [dbo].[RevaluationDocumentDetails] as rdd
						inner join [dbo].[Product] p ON p.[ID]=rdd.[ProductID] and p.[Status]=0
					WHERE [DocumentID]=@p_DocumentID
							  )
		SET @p_CountDetailsProduct = (
					SELECT COUNT([ProductID]) FROM [dbo].[RevaluationDocumentDetails]
					WHERE [DocumentID]=@p_DocumentID
							  )
		SET @p_Status = CASE WHEN @p_CountProduct = @p_CountDetailsProduct THEN 2 ELSE 1 END

		-- обновляем цены продукции
		UPDATE [dbo].[Product]
		SET 
			[TagPriceWithVat] = asd.[TagPriceWithVAT],
			[TagPriceWithOutVat] = asd.[TagPriceWithOutVAT],
			[FromDatePrice] = @dt_now	
		FROM (
				SELECT
					s.[ProductID]
					,s.[TagPriceWithVAT] AS [TagPriceWithVAT]
					,s.[TagPriceWithOutVAT] AS [TagPriceWithOutVAT]	
							
				FROM [dbo].[RevaluationDocumentDetails] s
				WHERE s.[DocumentID]=@p_DocumentID and s.[Status]=0
		) AS asd
		WHERE [dbo].[Product].[ID] = asd.[ProductID] and [dbo].[Product].[Status]=0
	
		-- обновляем статусы деталей документа
		UPDATE [dbo].[RevaluationDocumentDetails]
		SET [Status] = 1
		FROM [dbo].[RevaluationDocumentDetails] as rdd
			inner join [dbo].[Product] p ON p.[ID]=rdd.[ProductID] and p.[Status]=0
		WHERE [DocumentID]=@p_DocumentID
	
		-- обновляем статус документа
		UPDATE [dbo].[RevaluationDocument]
		SET
			[Status] = @p_Status -- 1 - частично переоценен, 2 - переоценен
			,[LastModifiedByUserID]=@p_AddUserID
			,[LastModifiedDate]=@dt_now
		WHERE
			[ID] = @p_DocumentID
			
		-- добавляем продукцию в таблицу перемещений
		/*INSERT INTO [dbo].[ProductTransfer](
			[ProductID],
			[Status],
			[ExReffOperationType],
			[ExtReffID],
			[CreatedDate],
			[CreatedByUserID]
		)
		SELECT
			s.[ProductID],
			p.[Status],
			3, --переоценка
			@p_DocumentID,
			@dt_now,
			@p_AddUserID
		FROM RevaluationDocumentDetails s
			inner join dbo.Product p on p.ID = s.ProductID and (p.[Status]=0 or p.[Status]=1)
		WHERE s.DocumentID = @p_DocumentID
		*/
		
		merge [dbo].[ProductTransfer] as target
		using (			
		SELECT  p.[ID] as ProductID,
				p.[Status],
				@dt_now as 'CreatedDate'
		FROM RevaluationDocumentDetails s
			inner join dbo.Product p on p.ID = s.ProductID and (p.[Status]=0 or p.[Status]=1)
		WHERE s.DocumentID = @p_DocumentID
		) as Source
		(ProductID,[Status], [CreatedDate])
		on target.ProductID = source.ProductID 
		and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
		when matched then
		update
		set target.[Status] = source.[Status],
			target.[ExReffOperationType] = 3,
			target.[ExtReffID] = @p_DocumentID,
			target.[CreatedDate] = @dt_now,
			target.[CreatedByUserID] = @p_AddUserID
		when not matched then
		insert ([ProductID],[Status],[ExReffOperationType],[ExtReffID],[CreatedDate],[CreatedByUserID])
		values (source.ProductID,source.[Status],3,@p_DocumentID,@dt_now,@p_AddUserID);
		 	

		exec xp_UpdRevaluationDocument @p_DocumentID, @p_AddUserID

	--COMMIT TRANSACTION tr_update; 
	--if @p_ShowRes = 1 select @string_number

END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-11-08 16:32
-- Description: Добавление/обновление/удаление записи в таблице dbo.Users
-- xp_SetSaleDocumentID 15,44
-- xp_SetSaleDocumentID 15,1452,2001020000120,9,1
-- xp_SetSaleDocumentID 15,841,2001020000214,9,1
-- UPDATE [dbo].[SaleDocument] SET [DocumentNumber] = Null where [DocumentNumber] = 2001020000228
-- xp_SetSaleDocumentID 15,846,2001020000228,9,1
-- xp_SetSaleDocumentID 0,23197,0,6
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetSaleDocumentID] 
	@p_AddUserID int,
	@p_DocumentID int,
	@p_DocumentNumber bigInt,
	@p_TypeDocument int,
    @p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON;

	declare @res int=0
	declare @dt_now datetime=getdate()	
	declare @verify_quantity int =0
	declare @verify_sucess bigint =0
	declare @p_CompanyID int = 0
	declare @p_ShopID int = 0
	declare @p_ProductSumm money =0
	declare @p_AdditionalProductSumm money =0

	---- Проверяем проведен ли документ
	SELECT TOP 1 @verify_sucess=[DocumentNumber] FROM [dbo].[SaleDocument] WHERE [ID] = @p_DocumentID

	---- Проводим документ если в документе нет нулевых записей и документ не проведен
	if @verify_sucess IS NULL begin
		BEGIN TRANSACTION tr_update

		-- Получаем номер компании из аттрибутов
		SELECT @p_CompanyID = (SELECT [Value] from [dbo].[Attributes] WHERE Name='Номер компании' AND AttributeGroup='Global')

		-- Получаем номер магазина из аттрибутов
		SELECT @p_ShopID = (SELECT [Value] from [dbo].[Attributes] WHERE Name='Номер магазина' AND AttributeGroup='Global')	
		
		-- Покупки
		if(@p_TypeDocument = 3)		
		begin

			-- Устанавливаем статус документа и присваиваем ему нумератор из аттрибутов
			UPDATE d
			SET 
				d.[DocumentNumber] = @p_DocumentNumber,
				d.[LastModifiedByUserID] = @p_AddUserID,
				d.[LastModifiedDate] = @dt_now
			FROM [dbo].[SaleDocument] d
			WHERE d.id = @p_DocumentID
			set @p_ShowRes = @@rowcount

			-- Обновляем статусы зачета золота
			UPDATE [dbo].[ScrapDocument] 
			SET [Type] = 1, -- отдали деньги
				[Status] = 3, -- куплена
				[LastModifiedByUserID] = @p_AddUserID,
				[LastModifiedDate] = @dt_now
			FROM
				[SaleDocumentScrapDocument] sdsd 
				inner join [dbo].[ScrapDocument] sd on sd.ID = sdsd.ScrapDocumentID
			where
				sdsd.DocumentID = @p_DocumentID

			-- Заносим в таблицу оплат PaymentsDetails строки оплат деталей документа
			INSERT INTO [dbo].[PaymentsDetails]
				([PosID]
				,[WorkShiftID]
				,[OperationType]
				,[ExtRefOperationTypeID]
				,[PaymentType]
				,[ExtRefPaymentTypeID]
				,[Amount]
				,[CreatedByUserID]
				,[CreatedDate]
				,[IsRemotePayment])
			SELECT
				sdp.[PosID],
				sdp.[WorkShiftID],
				3,
				@p_DocumentID,
				sdp.[PaymentType],
				sdp.[ID] AS [ExtRefPaymentTypeID],
				-(SELECT IsNull(Sum(IsNull([Amount],0)),0) FROM [dbo].[SaleDocumentPayment] WHERE [DocumentID]=@p_DocumentID),
				@p_AddUserID,
				@dt_now,
				sdp.[IsRemotePayment]
			FROM [dbo].[SaleDocumentPayment] sdp
			WHERE sdp.[DocumentID] = @p_DocumentID			
		end		

		-- Продажи
		if(@p_TypeDocument = 9)
		begin
			-- Устанавливаем статус документа и присваиваем ему нумератор из аттрибутов
			UPDATE d
			SET 
				d.[DocumentNumber] = @p_DocumentNumber,
				d.[LastModifiedByUserID] = @p_AddUserID,
				d.[LastModifiedDate] = @dt_now
			FROM [dbo].[SaleDocument] d
			WHERE d.id = @p_DocumentID

			set @p_ShowRes = @@rowcount	

			-- Обновляем статус продукции
			UPDATE [dbo].[Product]
				SET [Status] = 9 -- продано 
			FROM
				(SELECT [ProductID],[DocumentID] FROM [dbo].[SaleDocumentProduct]) as sd
			WHERE 
				[dbo].[Product].[ID] = sd.[ProductID]
				AND sd.[DocumentID] = @p_DocumentID			

			-- фиксируем изменения в таблице истории продукции
/*			INSERT INTO [dbo].[ProductTransfer] (
				[ProductID],
				[Status],
				[ExReffOperationType],
				[ExtReffID],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT
				sdd.[ProductID],
				9, -- продано
				4, -- продажа
				@p_DocumentNumber,
				@dt_now,
				@p_AddUserID
			FROM [dbo].[SaleDocumentProduct] sdd
			WHERE
			sdd.[DocumentID]=@p_DocumentID	
			*/				
			merge [dbo].[ProductTransfer] as target
			using (			
			SELECT  sdd.[ProductID],
					@dt_now as 'CreatedDate'
			FROM [dbo].[SaleDocumentProduct] sdd
			WHERE sdd.[DocumentID]=@p_DocumentID) as Source
			(ProductID,	[CreatedDate])
			on target.ProductID = source.ProductID 
			and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
			when matched then
			update
			set target.[Status] = 9,
				target.[ExReffOperationType] = 4,
				target.[ExtReffID] = @p_DocumentID,
				target.[CreatedDate] = @dt_now,
				target.[CreatedByUserID] = @p_AddUserID
			when not matched then
			insert ([ProductID],[Status],[ExReffOperationType],[ExtReffID],[CreatedDate],[CreatedByUserID])
			values (source.ProductID,9,4,@p_DocumentID,@dt_now,@p_AddUserID);	

			-- фиксируем изменения в таблице истории сопутствующих
/*			INSERT INTO [dbo].[RelatedProductTransfer] (
				[Model],
				[PartNumber],
				[Quantity],
				[QuantityOnStorage],
				[ExReffOperationType],
				[ExtReffID],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT
				sdd.[Model],
				sdd.[PartNumber],
				sdd.[Quantity],
				ABS(rp.[Quantity]-sdd.[Quantity]),
				4,  -- 4-продажа
				@p_DocumentID,
				@dt_now,
				@p_AddUserID
			FROM [dbo].[SaleDocumentRelatedProduct] sdd
				INNER JOIN [dbo].[RelatedProduct] rp ON rp.[Model]=sdd.[Model] AND rp.[PartNumber]=sdd.[PartNumber]
			WHERE
				sdd.[DocumentID]=@p_DocumentID		
*/		
			merge [dbo].[RelatedProductTransfer] as target
			using (			
			SELECT sdd.[Model],
					sdd.[PartNumber],
					sdd.[Supplier],
					sdd.[Quantity],
					ABS(rp.[Quantity]-sdd.[Quantity]) as QuantityOnStorage,
					@dt_now as 'CreatedDate'
			FROM [dbo].[SaleDocumentRelatedProduct] sdd
				INNER JOIN [dbo].[RelatedProduct] rp ON rp.[Model]=sdd.[Model] AND rp.[PartNumber]=sdd.[PartNumber] AND rp.[supplier] = sdd.[supplier]
			WHERE sdd.[DocumentID]=@p_DocumentID) as Source
			([Model],[PartNumber],[Supplier],[Quantity],QuantityOnStorage,CreatedDate )
			on target.[Model] = source.[Model]
			and  target.[PartNumber] = source.[PartNumber]
			and  target.[Supplier] = source.[Supplier]
			and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
			when matched then
			update
			set 
				target.[Quantity] = source.[Quantity],
				target.[QuantityOnStorage] = source.[QuantityOnStorage],
				target.[ExReffOperationType] = 4,
				target.[ExtReffID] = @p_DocumentID,
				target.[CreatedDate] = @dt_now,
				target.[CreatedByUserID] = @p_AddUserID
			when not matched then
			insert ([Model],[PartNumber],[Supplier],[Quantity],[QuantityOnStorage],[ExReffOperationType],[ExtReffID],[CreatedDate],[CreatedByUserID])
			values (source.[Model],source.[PartNumber],source.[Supplier],source.[Quantity],source.[QuantityOnStorage],4,@p_DocumentID,@dt_now,@p_AddUserID);	
			
				
			-- списание сопутствующих
			UPDATE rp
			SET 
				 rp.[Quantity] = rp.[Quantity]-sdd.[Quantity]
				 ,rp.[TagPriceWithVat] = (rp.[Quantity]-sdd.[Quantity])*rp.[UnitPrice]
				 ,rp.[TagPriceWithOutVat] = (rp.[Quantity]-sdd.[Quantity])*(rp.[UnitPrice]*rp.[TagPriceWithOutVat] / (CASE WHEN rp.[TagPriceWithVat] = 0 THEN 1 ELSE rp.[TagPriceWithVat] END) )
				 ,rp.[Status] = CASE WHEN (SELECT rp.[Quantity]-sdd.[Quantity]) > 0 THEN 0 ELSE 9 END
			FROM [dbo].[RelatedProduct] rp 
				INNER JOIN [SaleDocumentRelatedProduct] sdd ON rp.[Model] = sdd.[Model] AND rp.[PartNumber] = sdd.[PartNumber]	and rp.[Supplier] = sdd.[Supplier]
			WHERE
				sdd.[DocumentID]=@p_DocumentID	

			-- Заносим в таблицу оплат PaymentsDetails строки оплат деталей документа
			INSERT INTO [dbo].[PaymentsDetails]
				([PosID]
				,[WorkShiftID]
				,[OperationType]
				,[ExtRefOperationTypeID]
				,[PaymentType]
				,[ExtRefPaymentTypeID]
				,[Amount]
				,[CreatedByUserID]
				,[CreatedDate]
				,[IsRemotePayment])
			SELECT
				sdp.[PosID],
				sdp.[WorkShiftID],
				4,
				@p_DocumentID,
				sdp.[PaymentType],
				sdp.[ID],
				sdp.[Amount],
				@p_AddUserID,
				@dt_now,
				sdp.[IsRemotePayment]
			FROM [dbo].[SaleDocumentPayment] sdp
				inner join [dbo].[SaleDocument] sd ON sd.ID=sdp.DocumentID
			WHERE sdp.[DocumentID] = @p_DocumentID

			-- Обновляем статус предоплат по оплатам документа
			UPDATE [dbo].[SaleDocumentPrepayment]
			SET [UseDocumentID] = @p_DocumentID, -- погашен
				[LastModifiedByUserID] = @p_AddUserID,
				[LastModifiedDate] = @dt_now
			FROM
				(
					SELECT sd.[ID] as [ID],
						   sdp1.[PaymentType] as [PaymentType]
					FROM [dbo].[SaleDocumentPayment] sdp1
						inner join [dbo].[SaleDocument] sd on sd.[DocumentNumber]=sdp1.[ExtReffID] 
					WHERE [PaymentType]=3 AND sdp1.DocumentID=@p_DocumentID
				) as sdp  
				
			WHERE 
				[dbo].[SaleDocumentPrepayment].[DocumentID] = sdp.[ID]
				AND sdp.[ID]>0
				AND sdp.[PaymentType]=3

			-- Обновляем статусы зачета золота
			UPDATE [dbo].[ScrapDocument]
			SET [Type] = 2, -- принята к оплате
				[Status] = 4, -- принята к оплате
				[LastModifiedByUserID] = @p_AddUserID,
				[LastModifiedDate] = @dt_now
			FROM
				(SELECT [ExtReffID],[PaymentType] FROM [dbo].[SaleDocumentPayment] WHERE [ExtReffID] > 0 and [PaymentType] = 4 and DocumentID=@p_DocumentID) as sdp
			WHERE 
				[dbo].[ScrapDocument].[ScrapDocumentNumber] = sdp.[ExtReffID]										
		end

		-- Возвраты
		if(@p_TypeDocument = 6)
		begin		
		-- Устанавливаем статус документа и присваиваем ему нумератор из аттрибутов
			UPDATE d
			SET 
				d.[DocumentNumber] = @p_DocumentNumber,
				d.[LastModifiedByUserID] = @p_AddUserID,
				d.[LastModifiedDate] = @dt_now
			FROM [dbo].[SaleDocument] d
			WHERE d.id = @p_DocumentID
			set @p_ShowRes = @@rowcount	

			-- Обновляем статус продукции
			UPDATE [dbo].[Product]
			SET [Status] = 0 -- на складе
			FROM
				(SELECT [ProductID],[DocumentID] FROM [dbo].[SaleDocumentProduct]) as sd
			WHERE 
				[dbo].[Product].[ID] = sd.[ProductID]
				AND sd.[DocumentID] = @p_DocumentID

			-- фиксируем изменения в таблице истории продукции
/*			INSERT INTO [dbo].[ProductTransfer] (
				[ProductID],
				[Status],
				[ExReffOperationType],
				[ExtReffID],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT
				sp.[ProductID],
				0, -- склад
				6, -- возврат
				@p_DocumentNumber,
				@dt_now,
				@p_AddUserID
			FROM [dbo].[SaleDocumentProduct] sp
			WHERE
				sp.[DocumentID]=@p_DocumentID
*/

			merge [dbo].[ProductTransfer] as target
			using (			
			SELECT  sp.[ProductID],
					@dt_now as 'CreatedDate'
			FROM [dbo].[SaleDocumentProduct] sp
			WHERE sp.[DocumentID]=@p_DocumentID) as Source
			(ProductID,	[CreatedDate])
			on target.ProductID = source.ProductID 
			and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
			when matched then
			update
			set target.[Status] = 0,
				target.[ExReffOperationType] = 6,
				target.[ExtReffID] = @p_DocumentID,
				target.[CreatedDate] = @dt_now,
				target.[CreatedByUserID] = @p_AddUserID
			when not matched then
			insert ([ProductID],[Status],[ExReffOperationType],[ExtReffID],[CreatedDate],[CreatedByUserID])
			values (source.ProductID,0,6,@p_DocumentID,@dt_now,@p_AddUserID);

			-- Заносим в таблицу оплат PaymentsDetails строки оплат деталей документа
			INSERT INTO [dbo].[PaymentsDetails]
				([PosID]
				,[WorkShiftID]
				,[OperationType]
				,[ExtRefOperationTypeID]
				,[PaymentType]
				,[ExtRefPaymentTypeID]
				,[Amount]
				,[CreatedByUserID]
				,[CreatedDate]
				,[IsRemotePayment])
			SELECT
				sdp.[PosID],
				sdp.[WorkShiftID],
				5,
				@p_DocumentID,
				sdp.[PaymentType],
				sdp.[ID],
				-sdp.[Amount],
				@p_AddUserID,
				@dt_now,
				sdp.[IsRemotePayment]
			FROM [dbo].[SaleDocumentPayment] sdp
				inner join [dbo].[SaleDocument] sd ON sd.ID=sdp.DocumentID
			WHERE sdp.[DocumentID] = @p_DocumentID

			-- Обновляем статус предоплат по оплатам документа
			CREATE TABLE #SalePrepayment([ID] int)
			
			INSERT INTO #SalePrepayment([ID])
			SELECT
				sdp2.[ID]
			FROM [dbo].[SaleDocumentPrepayment] sdp1
				inner join [dbo].[SaleDocumentPrepayment] sdp2 on sdp1.[UseDocumentID]=sdp2.[DocumentID]
				--inner join [dbo].[SaleDocumentPrepayment] sdp2 on sdp1.[DocumentID]=sdp2.[DocumentID]
			WHERE
				sdp1.[DocumentID] = @p_DocumentID

			UPDATE [dbo].[SaleDocumentPrepayment] 
				SET UseDocumentID = @p_DocumentID
			FROM #SalePrepayment sp
			WHERE
				[dbo].[SaleDocumentPrepayment].[ID] = sp.[ID]

			-- Обновляем статусы зачета золота
			UPDATE [dbo].[ScrapDocument]
			SET [Type] = 2, -- принята к оплате
				[Status] = 4, -- принята к оплате
				[LastModifiedByUserID] = @p_AddUserID,
				[LastModifiedDate] = @dt_now
			FROM
				(SELECT [ExtReffID],[PaymentType] FROM [dbo].[SaleDocumentPayment] WHERE [ExtReffID]>0 and [PaymentType]=4 and DocumentID=@p_DocumentID) as sdp
			WHERE 
				[dbo].[ScrapDocument].[ScrapDocumentNumber] = sdp.[ExtReffID]					
					
		end
		COMMIT TRANSACTION tr_update; 
		print @p_ShowRes
		if @p_ShowRes = 1 select @p_DocumentNumber					
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		
-- Create date: <Create Date,,>
-- Description:
-- =============================================
-- xp_SetScrapDocumentID 16, 15703, 2, 0
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetScrapDocumentID]
	@p_AddUserID int,
	@p_ID int,
	@p_Status int,
	@p_WorkShiftID int = 0,
	@p_DocumentNumber bigInt,
    @p_ShowRes bit = 1 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE
		@string_number NVARCHAR(255),
		@dt_now datetime = getdate()

	BEGIN TRANSACTION tr_update	

		UPDATE [dbo].[ScrapDocument]
		   SET 
			[ScrapDocumentNumber] = @p_DocumentNumber,
			[Status] = @p_Status,
			LastModifiedDate=@dt_now,
			LastModifiedByUserID=@p_AddUserID
		WHERE ID=@p_ID		

		set @p_ShowRes = @@rowcount

	COMMIT TRANSACTION tr_update; 
	if @p_ShowRes = 1 select @p_DocumentNumber
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- [dbo].[xp_SetTransferDocumentID] 2,2106,1
-- select * from ProductTransfer where ProductID = 13000130
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetTransferDocumentID]
	@p_AddUserID int,
	@p_DocumentID int,
	@p_Status int,
    @p_ShowRes bit = 1
AS
BEGIN
	SET NOCOUNT ON;
	declare @dt_now datetime=getdate()
	declare @p_CompanyReciever int = NULL
	declare @p_NewDocumentID int = NULL
	declare @p_DocumentNumber bigint = NULL
	DECLARE @tShowRes TABLE(ID int);
	BEGIN TRANSACTION tr_update
		-- обновляем поля документа
		UPDATE d
		SET  
				d.[Status] = @p_Status,
				d.[LastModifiedByUserID] = @p_AddUserID,
				d.[LastModifiedDate] = @dt_now	
		FROM [dbo].[TransferDocument] d
		WHERE d.[ID] = @p_DocumentID

		DECLARE @string_number NVARCHAR(255)
		SELECT @string_number = (SELECT CAST(CONVERT(bigInt, [Value])+ 1 as nvarchar(MAX)) from [dbo].[Attributes] WHERE name='Номер перемещения товара')			
		
		If @p_Status = 1
		begin
			-- устанавливаем нумератор документа
			UPDATE d
			SET  
				d.[TransferDocumentNumber] = CONVERT(bigInt,@string_number)				
			FROM [dbo].[TransferDocument] d
			WHERE d.[ID] = @p_DocumentID

			-- устанавливаем нумератор в аттрибутах
			UPDATE a
			SET  a.[Value] =CONVERT(bigInt,@string_number),
				 a.[LastModifiedByUserID] = @p_AddUserID,
				 a.[LastModifiedDate] = @dt_now
			FROM [dbo].[Attributes] a
			WHERE name='Номер перемещения товара'

			-- изменяем статус деталей документа
			UPDATE P
			SET  
				 p.[Status] = 2,
				 p.[LastModifiedByUserID] = @p_AddUserID,
				 p.[LastModifiedDate] = @dt_now
			FROM [dbo].[Product] p
				inner join [dbo].[TransferDocumentDetails] tdd on tdd.[ProductID] = p.[ID]			
				WHERE tdd.[DocumentID] = @p_DocumentID
		 


			-- фиксируем изменение статуса продукции в ProductTransfer
			/*INSERT INTO [dbo].[ProductTransfer] (
				[ProductID],
				[Status],
				[ExReffOperationType],
				[ExtReffID],
				[CreatedDate],
				[CreatedByUserID]
				)
			SELECT 
				p.[ID],
				2,
				2,
				@p_DocumentID,
				@dt_now,
				@p_AddUserID
			FROM [dbo].[Product] p
				inner join [dbo].[TransferDocumentDetails] tdd on tdd.[ProductID] = p.[ID]
			WHERE tdd.[DocumentID] = @p_DocumentID
			set @p_ShowRes = @@rowcount*/
			/*
			merge [dbo].[ProductTransfer]
			match
			productID = ID and CreatedDate <>@dt_now
			
			ABS(DATEDIFF(SECOND, '2020-01-01 00:00:01.000', '2020-01-01 00:00:00.000'))
			CreatedDate отличается не больше чем на секунду
			*/


			merge [dbo].[ProductTransfer] as target
			using (			
			SELECT  p.[ID] as ProductID,
					@dt_now as 'CreatedDate'
			FROM [dbo].[Product] p
			inner join [dbo].[TransferDocumentDetails] tdd 
			on tdd.[ProductID] = p.[ID]
			WHERE tdd.[DocumentID] = @p_DocumentID) as Source
			(ProductID,	[CreatedDate])
			on target.ProductID = source.ProductID 
			and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
			when matched then
			update
			set target.[Status] = 10,
				target.[ExReffOperationType] = 2,
				target.[ExtReffID] = @p_DocumentID,
				target.[CreatedDate] = @dt_now,
				target.[CreatedByUserID] = @p_AddUserID
			when not matched then
			insert ([ProductID],[Status],[ExReffOperationType],[ExtReffID],[CreatedDate],[CreatedByUserID])
			values (source.ProductID,10,2,@p_DocumentID,@dt_now,@p_AddUserID);
--			output @rowcount into @tShowRes;
			set @p_ShowRes = @@rowcount
--			select @p_ShowRes = ID from @tShowRes


		end

		If @p_Status in (2,3)
		begin
		
			set @p_DocumentNumber = (select d.[TransferDocumentNumber] 							
			FROM [dbo].[TransferDocument] d
			WHERE d.[ID] = @p_DocumentID)
			
			if(@p_DocumentNumber is null)
			begin
				-- устанавливаем нумератор документа
				UPDATE d
				SET  
					d.[TransferDocumentNumber] = case when d.[TransferDocumentNumber] is null then CONVERT(bigInt,@string_number) end								
				FROM [dbo].[TransferDocument] d
				WHERE d.[ID] = @p_DocumentID
				
				-- устанавливаем нумератор в аттрибутах
				UPDATE a
				SET  a.[Value] =CONVERT(bigInt,@string_number),
					 a.[LastModifiedByUserID] = @p_AddUserID,
					 a.[LastModifiedDate] = @dt_now
				FROM [dbo].[Attributes] a
				WHERE name='Номер перемещения товара'	
			end		
			
			-- изменяем статус деталей документа
			UPDATE P
					SET  
						 p.[Status] = case when td.Status = 2 then 3 else 0 end,
						 p.[LastModifiedByUserID] = @p_AddUserID,
						 p.[LastModifiedDate] = @dt_now
					FROM [dbo].[Product] p
						inner join TransferDocumentDetails tdd on tdd.[ProductID] = p.[ID]			
						inner join TransferDocument td on tdd.[DocumentID] = td.ID
						where td.ID=@p_DocumentID
			
					-- фиксируем изменение статуса продукции в ProductTransfer
					/*INSERT INTO [dbo].[ProductTransfer] (
						[ProductID],
						[Status],
						[ExReffOperationType],
						[ExtReffID],
						[CreatedDate],
						[CreatedByUserID]
						)
					SELECT
						p.[ID],
						case when td.Status = 2 then 1 else 0 end,
						2,
						td.ID,
						@dt_now,
						@p_AddUserID
					FROM [dbo].[Product] p
						inner join TransferDocumentDetails tdd on tdd.[ProductID] = p.[ID]
						inner join TransferDocument td on td.ID = tdd.[DocumentID]
						where tdd.[DocumentID]=	@p_DocumentID
			set @p_ShowRes = @@rowcount*/


			merge [dbo].[ProductTransfer] as target
			using (			
			SELECT  p.[ID] as ProductID,
					case when td.Status = 2 then 1 else 0 end as 'Status',
					td.ID as ExtReffID,
					@dt_now as 'CreatedDate'
			FROM [dbo].[Product] p
						inner join TransferDocumentDetails tdd on tdd.[ProductID] = p.[ID]
						inner join TransferDocument td on td.ID = tdd.[DocumentID]
						where tdd.[DocumentID]=	@p_DocumentID) as Source
			(ProductID,[Status],ExtReffID,[CreatedDate])
			on target.ProductID = source.ProductID 
			and	ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3
			when matched then
			update
			set target.[Status] = source.[Status],
				target.[ExReffOperationType] = 2,
				target.[ExtReffID] = source.ExtReffID,
				target.[CreatedDate] = @dt_now,
				target.[CreatedByUserID] = @p_AddUserID
			when not matched then
			insert ([ProductID],[Status],[ExReffOperationType],[ExtReffID],[CreatedDate],[CreatedByUserID])
			values (source.ProductID,source.[Status],2,source.ExtReffID,@dt_now,@p_AddUserID);
--			output $rowcount into @tShowRes;
			set @p_ShowRes = @@rowcount
--			select @p_ShowRes = ID from @tShowRes


	end
	commit TRANSACTION tr_update
	if @p_ShowRes = 1 select @string_number

END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:      MJF\Kulikov.A
-- Create date: 2019-11-08 16:32
-- Description: Добавление/обновление/удаление записи в таблице dbo.Users
-- xp_SetTransferRelatedDocumentID 66,363,2
 
-- =============================================
CREATE PROCEDURE [dbo].[xp_SetTransferRelatedDocumentID] 
	@p_AddUserID int,
	@p_DocumentID int,
	@p_Status int,
    @p_ShowRes bit = 1 
AS
BEGIN
	SET NOCOUNT ON;
	declare @dt_now datetime=getdate()
	declare @string_number NVARCHAR(255)
	declare @verify_diff int = 0
	declare @verify_null_diff int = 0
	declare @verify_currency int = 0
	declare @p_CompanyReciever int = NULL,
			@p_model varchar(50),
			@p_PartNumber int,
			@p_Supplier int
	BEGIN TRANSACTION tr_update
		-- Получаем следующий нумератор из аттрибутов
		SELECT @string_number = (SELECT CAST(CONVERT(bigInt, [Value])+1 as nvarchar(MAX)) FROM [dbo].[Attributes] WHERE Name='Номер перемещения сопутствующего товара')
		-- Проверяем соответствие количества продукции на складе количеству в документе
		SELECT TOP 1
				@verify_diff = otrrd.[DiffQuantity],
				@p_model = otrrd.Model,
				@p_PartNumber = otrrd.PartNumber,
				@p_Supplier = otrrd.Supplier
		FROM
				(SELECT trrd.[ID], 
						rp.[Quantity] AS QuantityOnStorage,
						trrd.[Quantity] AS DocumentQuantity,
						rp.[Quantity]-trrd.[Quantity] AS DiffQuantity,
						rp.Model,
						rp.PartNumber,
						rp.Supplier
				FROM [dbo].[TransferRelatedProductDocumentDetails] as trrd
					inner join [dbo].[RelatedProduct] AS rp 
					on rp.Model=trrd.Model and rp.PartNumber=trrd.PartNumber  and rp.Supplier=trrd.Supplier
				WHERE DocumentID=@p_DocumentID
				) as otrrd
		WHERE otrrd.[DiffQuantity] >= 0

		-- Проверяем нет ли в документе количества продукции равного нулю
		SELECT TOP 1
			@verify_null_diff=[ID]
		FROM [dbo].[TransferRelatedProductDocumentDetails]
		WHERE [DocumentID] = @p_DocumentID AND [Quantity]=0

		-- Проводим документ т.к. на складе продукции больше чем в документе и в документе нет нулевых записей
		IF @verify_diff >= 0 AND @verify_null_diff = 0 
		BEGIN
			-- Устанавливаем статус документа и присваиваем ему нумератор из аттрибутов
			UPDATE d
			SET 
				d.[Status] = @p_Status,
				d.[DocumentNumber] = CONVERT(bigInt,@string_number),
				d.CreatedByUserID = @p_AddUserID,
				d.[LastModifiedByUserID] = @p_AddUserID,
				d.[LastModifiedDate] = @dt_now
			FROM [dbo].[TransferRelatedProductDocument] d
			WHERE d.id = @p_DocumentID
			-- Списываем продукцию
			UPDATE [dbo].[RelatedProduct] 
				SET [Quantity] = rp.[Quantity] - trrd.[Quantity]
				,[TagPriceWithVat] = (rp.[Quantity]-trrd.[Quantity])*rp.[UnitPrice]
							FROM [dbo].[TransferRelatedProductDocumentDetails] as trrd
								inner join [dbo].[RelatedProduct] AS rp ON 
								 rp.Model=trrd.Model and rp.PartNumber=trrd.PartNumber and rp.Supplier=trrd.Supplier
							WHERE trrd.DocumentID= @p_DocumentID

			-- Устанавливаем увеличенный на 1 нумератор в аттрибутах

			UPDATE a
			SET  a.[Value] =CONVERT(bigInt,@string_number),
				 a.[LastModifiedByUserID] = @p_AddUserID,
				 a.[LastModifiedDate] = @dt_now
			  FROM [dbo].[Attributes] a
			  WHERE Name='Номер перемещения сопутствующего товара'
			set @p_ShowRes = @@rowcount
			-- Получаем номер компании для целевого магазина
			SELECT @p_CompanyReciever = loc.[CompanyID]
			FROM [dbo].[TransferRelatedProductDocument] as td
			inner join [dbo].[Location] as loc on loc.[ID] = td.[ReceiverID]
			WHERE td.[ID]=@p_DocumentID
		end
		
		-- фиксируем изменение статуса продукции в RelatedProductTransfer
		merge [dbo].[RelatedProductTransfer] as target
		using (
		SELECT trdd.[Model],
				trdd.[PartNumber],
				trdd.[Supplier],
				trdd.[Quantity],
				p.[Quantity] as QuantityOnStorage,
				trd.ID,
				@dt_now as 'CreatedDate'
		FROM [dbo].[TransferRelatedProductDocumentDetails] as trdd
			inner join [dbo].[TransferRelatedProductDocument] as trd on trd.[ID]=trdd.[DocumentID]
			inner join [dbo].[RelatedProduct] p on p.[Model]=trdd.[Model] and p.PartNumber=trdd.[PartNumber] and p.Supplier=trdd.[Supplier]
		WHERE trdd.DocumentID=@p_DocumentID) as Source
		([Model],[PartNumber],[Supplier],[Quantity],QuantityOnStorage,ID, CreatedDate )
		on target.[Model] = source.[Model]
		and  target.[PartNumber] = source.[PartNumber]
		and  target.[Supplier] = source.[Supplier]
		and ABS(DATEDIFF(SECOND, target.CreatedDate, source.[CreatedDate])) <= 3 
		when matched 
		then
		update
		set 
			target.[Quantity] = source.[Quantity],
			target.[QuantityOnStorage] = source.[QuantityOnStorage],
			target.[ExReffOperationType] = 2,
			target.[ExtReffID] = source.ID,
			target.[CreatedDate] = @dt_now,
			target.[CreatedByUserID] = @p_AddUserID
		when not matched then
		insert ([Model],[PartNumber],[Supplier],[Quantity],[QuantityOnStorage],[ExReffOperationType],[ExtReffID],[CreatedDate],[CreatedByUserID])
		values (source.[Model],source.[PartNumber],source.[Supplier],source.[Quantity],source.[QuantityOnStorage],2,source.ID,@dt_now,@p_AddUserID);	

	COMMIT TRANSACTION tr_update; 
	if @p_ShowRes = 1 select @string_number

	--exec [dbo].[xp_UpdTransferRelatedDocument] @p_DocumentID, @p_AddUserID

END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [dbo].[xp_StatUserWRK] 1,'20190101 01:01','20200101 01:01', 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_StatUserWRK]
	@p_UserID int,
	@p_DtStart datetime,
	@p_DtEnd datetime,
	@p_ver tinyint =0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;



	if @p_ver=0 begin
		select min(w.[DtAdd]) MinDt, max(w.[DtAdd]) MaxDt
		from dbo.UsersWRK w
		where w.UserID=@p_UserID and w.DtAdd between @p_DtStart and @p_DtEnd
	end
	else if @p_ver=1 begin 
		select * 
		from dbo.tf_npp(0,23)
		--where w.UserID=@p_UserID and w.DtAdd between @p_DtStart and @p_DtEnd
	end
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xp_Test_Connection] 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

declare @IsDataAdapterConnection int 
declare @VServ2 sysname = (select Value from [dbo].[Attributes] where [AttributeGroup]='Azure' and [Name]='server')
EXEC @IsDataAdapterConnection = [master].[dbo].sp_testlinkedserver @VServ2
select @IsDataAdapterConnection
update Attributes set Value = case when @IsDataAdapterConnection = 0 then 'True' else 'False' end where Name = 'IsDataAdapterConnection'
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	переброска аттрибутов из центральной базы
-- xp_UpdateAttributesFromCenterBase
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdateAttributesFromCenterBase]
	@p_ShowRes bit = 1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	SET NOCOUNT ON;

	Declare @res int=0
	Declare @StrErr nvarchar(max)
	Declare @dt_now datetime=getdate()

		Insert into [dbo].[AttributesTest] (
			AttributeGroup,
			Name,
			[Type],
			Value,
			LastModifiedDate,
			CreatedByUserID,
			LastModifiedByUserID
			)
		select
			   CONCAT('$company',bCompany.ShortName),
			   bRequisite.Name,
			   bRequisiteInCompany.[Type],
			   bRequisiteInCompany.Value,
			   @dt_now,
			   15,
			   16
		from [Tamuz].[dbo].[RequisiteInCompany] as bRequisiteInCompany
			 left join [Tamuz].[dbo].[Company] bCompany on bRequisiteInCompany.CompanyID=bCompany.ID
			 left join [Tamuz].[dbo].[Requisite] bRequisite on bRequisiteInCompany.RequisiteID=bRequisite.ID

		set @res=SCOPE_IDENTITY()


	--bRequisiteInCompany.ID as dID,
	--bRequisiteInCompany.CompanyID as dCompanyID,
	--bRequisiteInCompany.RequisiteID as dRequisiteID,
	--bRequisiteInCompany.Checked as dChecked,
	--bRequisiteInCompany.Value as dValue,

	--SELECT bRequisiteInCompany.ID as dID,
	--	   bRequisiteInCompany.CompanyID as dCompanyID,
	--	   bRequisiteInCompany.RequisiteID as dRequisiteID,
	--	   bRequisiteInCompany.Checked as dChecked,
	--	   bRequisiteInCompany.Value as dValue,
	--	   bRequisiteInCompany.Type as dType,
	--	   bCompany.Name as dCompanyName,
	--	   bRequisite.Name as dRequisiteName
	--FROM [Tamuz].[dbo].RequisiteInCompany as bRequisiteInCompany
	--     left join [Tamuz].[dbo].[Company] bCompany on bRequisiteInCompany.CompanyID=bCompany.ID
	--	 left join [Tamuz].[dbo].[Requisite] bRequisite on bRequisiteInCompany.RequisiteID=bRequisite.ID

 --   SELECT bCompany.ID, bCompany.Name, bCompany.ShortName, bCompany.Form
	--FROM [Tamuz].[dbo].[Company] as bCompany

	--SELECT bRequisite.ID, bRequisite.Name, bRequisite.Description
	--FROM [Tamuz].[dbo].[Requisite] as bRequisite

	if @p_ShowRes = 1 select @res  as res
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_UpdDocument 2128, 66
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdDocument] 
	-- Add the parameters for the stored procedure here
	@p_DocumentID int,
    @p_AddUserID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocList; 
	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0
	Declare @dt_now datetime=getdate()
	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'Document', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Document' and [DatVal] is null)

	create table #DocList (DocNum bigint)
	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'
	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'

    if @p_DocumentID != 0
		begin -- Для одной записи
			insert into #DocList
			select s.ReffID
			from [dbo].[Document] s where s.ID=@p_DocumentID
		end
	else
		begin -- Для пакета записей
			insert into #DocList
			select rd.ReffID
			from [dbo].[Document] rd where rd.[SyncDate] is null			
		end

	Begin try
				declare @sqlDel nvarchar(max)
			set @sqlDel = ' 
			delete from [DataAdapter].[dbo].[TEMP_DocumentSync]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlDel) at [DataAdapter]

			select rd.ReffID
				  ,@CompNum	
				  ,@ShopNum				  		 
			from [dbo].[Document] rd 
			inner join #DocList on rd.ReffID=DocNum

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_DocumentSync]
			select rd.ReffID
				  ,@CompNum	
				  ,@ShopNum				  		 
			from [dbo].[Document] rd 
			inner join #DocList on rd.ReffID=DocNum
									
			End try
			Begin catch
			set @Error=1
			End catch
	if @Error=0
		begin			
			update s
				set s.[LastModifiedDate] = @dt_now,
					s.[SyncDate]=@dt_now,
					s.[LastModifiedByUserID] = @p_AddUserID
			from [dbo].[Document] s inner join #DocList on s.ReffID=DocNum

			if @p_DocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0, 
				 DtRefresh=Getdate(), 
				 UserID=@p_AddUserID
				 where obj = 'Document'
				end
		end
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

--select * from RefreshInfo

-- =============================================
-- Author:		ShAl
-- Create date: <Create Date,,>
-- Description:	синхронизация данных между посредником и кдиентом
-- xp_UpdRefreshInfo @ListRefreshObj = 'Attributes|MetalPrices:20200506'
-- xp_UpdRefreshInfo 'MetalPrices:20200101',15
-- xp_UpdRefreshInfo 'MetalPrices:20210512',15
-- xp_UpdRefreshInfo '',66, 1
-- xp_UpdRefreshInfo  'Document',63, 1 
-- xp_UpdRefreshInfo @ListRefreshObj = 'MetalPrices'
 -- select * from [RefreshInfo]
 -- --delete from RefreshInfo
 -- select * from dbo.UpdID order by id desc
 -- xp_UpdRefreshInfo 'RevaluationDocument:1', 60, 0, '33|'
 -- xp_UpdRefreshInfo 'SaleDocument:1', 60, 0, '251304577|251304576|' 
 -- 

-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdRefreshInfo] 
	@ListRefreshObj varchar(max),
	@p_AddUserID int = null,
	@p_Command int, 
	@p_MassDocumentID nvarchar(MAX)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @p table (npp int, obj varchar(100), par varchar(50))
	declare @n int=0
	declare @i int=1
	declare @obj varchar(100)
	declare @par varchar(50)

	declare @dat date
	declare @int int
	declare @smallint smallint

	if right(@ListRefreshObj, 1)!='|' set @ListRefreshObj=CONCAT(@ListRefreshObj, '|')

	insert into @p (npp, obj, par)
	select 
		p.SerialNumber,
		isnull(z.Val1, p.Val1) p1, 
		z.Val2 p2
	from dbo.[tf_ParserNVCharToTblNVChar](1,@ListRefreshObj) p
		outer apply dbo.[tf_ParserNVCharToTblNVChar](2,CONCAT(p.Val1,':')) z
	
	set @n=@@ROWCOUNT
	
	-- берем данные от адаптера (штатный режим)
	if (@p_Command=1 AND @p_MassDocumentID ='') begin	
		while @i<=@n begin
			select @obj=obj, @par=par from @p where npp=@i

			if @obj='MetalPrices' begin
				set @dat=convert(date, @par)
				exec xp_GetUpdMetalPrice @p_PriceDat=@dat,  @p_AddUserID=@p_AddUserID
				--select @obj, @dat, 'ok' 
			end
			else if @obj='Attributes' begin
				exec xp_GetUpdAttributes @p_AddUserID
				--select @obj, @par, 'ok' 
			end
			else if @obj='Location' begin
				exec xp_GetUpdLocation @p_AddUserID
			end
			else if @obj='Metal' begin
				exec xp_GetUpdMetal @p_AddUserID
			end
			--else if @obj='Coupon' begin
				--exec xp_GetUpdCoupon @p_AddUserID
			--end
			else if @obj='KT' begin
				exec xp_GetUpdKT @p_AddUserID
			end
			else if @obj='Currency' begin
				exec xp_GetUpdCurrency @p_AddUserID  
			end
			else if @obj='RelatedProductGuide' begin
				exec xp_GetUpdRelatedProductGuide @p_AddUserID
			end

			else if @obj='RevaluationDocument' begin
				exec xp_GetUpdRevaluationDocument @p_AddUserID
			end
			else if @obj='Document' begin
				exec xp_GetUpdDocument @p_AddUserID
			end
			else if @obj='RelatedProductDocument' begin
				exec xp_GetUpdRelatedProductDocument @p_AddUserID 
			end



			else if @obj='TransferDocument' begin
				exec xp_GetUpdTransferDocument @p_AddUserID
			end
			
			/*
			else if @obj='SalePlan' begin
				exec xp_GetUpdSalePlan @p_AddUserID  
			end
		*/	
			else if @obj='' begin
				select @obj, @par, 'ok' 
			end

			set @i=@i+1
		end
	end

	-- отдаем данные на адаптер (штатный режим)
	
	if (@p_Command=0 AND @p_MassDocumentID = '') begin	
		while @i<=@n begin
			select @obj=obj, @par=par from @p where npp=@i

			 if @obj='RevaluationDocument' begin
				exec xp_UpdRevaluationDocument @p_RevaluationDocumentID=0, @p_AddUserID=@p_AddUserID 
			end
			else if @obj='Document' begin--------------------------
				exec xp_UpdDocument @p_DocumentID=0, @p_AddUserID=@p_AddUserID 
			end
			else if @obj='RelatedProductDocument' begin---
				exec xp_UpdRelatedProductDocument @p_RelatedProductDocumentID=0, @p_AddUserID=@p_AddUserID 
			end

			else if @obj='Register' begin ------------------------ok-
				exec xp_UpdRegisterDocument @p_RegisterDocumentID=0,  @p_AddUserID=@p_AddUserID				
			end
			else if @obj='SaleDocument' begin ---------------------ok-
				exec xp_UpdSaleDocument @p_SaleDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end
			else if @obj='ScrapDocument' begin ----------------------------ok-
				exec xp_UpdScrapDocument @p_ScrapDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end
			else if @obj='TransferDocument' begin
				exec xp_UpdTransferDocument @p_TransefDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end
			else if @obj='TransferRelatedProductDocument' begin
				exec xp_UpdTransferRelatedDocument @p_TransferRelatedDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end
			
			else if @obj='UserActiveHistory' begin ------------------------------trigger
				exec xp_UpdUserActiveHistory @p_AddUserID=@p_AddUserID, @p_DateFrom = null,@p_DateTo = null; 
			end
			
			else if @obj='UsersWRK' begin -------------------------------trigger
				exec xp_UpdUsersWRK @p_AddUserID=@p_AddUserID, @p_DateFrom = null,@p_DateTo = null;  
			end


			else if @obj='' begin
				select @obj, @par, 'ok' 
			end

			set @i=@i+1
		end
	end
	
	-- принудительно отдаем данные (нештатный режим)
	if (@p_MassDocumentID!='' AND @p_Command=0) begin	
		Declare @delimeter nvarchar(10)= '|'		
		Declare @Mass_DocumentID_index int = charindex(@delimeter, @p_MassDocumentID)
		--print @Mass_DocumentID_index
		--print 'dfsdfs'
		
		while @i<=@n begin
			select @obj=obj, @par=par from @p where npp=@i
			--print @obj
			while  (@Mass_DocumentID_index !=0) begin
				Declare @DocumentID nvarchar(MAX)=SUBSTRING(@p_MassDocumentID, 1, @Mass_DocumentID_index-1)		
				--print @DocumentID
			
				if @obj='Register' begin--+
					exec xp_UpdRefreshInfoSyncDate @p_NameTable='Register', @p_ValueColumn='SyncDate',  @p_WhereColumn='ScrapRegisterNumber', @p_DocumentID=@DocumentID				
				end
			
				else if @obj='RevaluationDocument' begin--+	
					exec xp_UpdRefreshInfoSyncDate @p_NameTable='RevaluationDocument', @p_ValueColumn='SyncDate',  @p_WhereColumn='ReffID', @p_DocumentID=@DocumentID	
				end
				else if @obj='SaleDocument' begin--+
					exec xp_UpdRefreshInfoSyncDate @p_NameTable='SaleDocument', @p_ValueColumn='SyncDate',  @p_WhereColumn='DocumentNumber', @p_DocumentID=@DocumentID	
				end
				else if @obj='ScrapDocument' begin--+
					exec xp_UpdRefreshInfoSyncDate @p_NameTable='ScrapDocument', @p_ValueColumn='SyncDate',  @p_WhereColumn='ScrapDocumentNumber', @p_DocumentID=@DocumentID	
				end
				else if @obj='TransferDocument' begin--+
					exec xp_UpdRefreshInfoSyncDate @p_NameTable='TransferDocument', @p_ValueColumn='SyncDate',  @p_WhereColumn='TransferDocumentNumber', @p_DocumentID=@DocumentID	
				end
				else if @obj='TransferRelatedProductDocument' begin
					exec xp_UpdRefreshInfoSyncDate @p_NameTable='TransferRelatedProductDocument', @p_ValueColumn='SyncDate',  @p_WhereColumn='DocumentNumber', @p_DocumentID=@DocumentID	
				end
			
				else if @obj='' begin
					select @obj, @par, 'ok' 
				end
				set @p_MassDocumentID=SUBSTRING(@p_MassDocumentID, @Mass_DocumentID_index+1, LEN(@p_MassDocumentID))
				set @Mass_DocumentID_index=CHARINDEX(@delimeter,@p_MassDocumentID)
			end

			if @obj='Register' begin
				exec xp_UpdRegisterDocument @p_RegisterDocumentID=0,  @p_AddUserID=@p_AddUserID				
			end
			else if @obj='RevaluationDocument' begin
				exec xp_UpdRevaluationDocument @p_RevaluationDocumentID=0, @p_AddUserID=@p_AddUserID 
			end
			else if @obj='SaleDocument' begin
				print @obj
				exec xp_UpdSaleDocument @p_SaleDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end
			else if @obj='ScrapDocument' begin
				exec xp_UpdScrapDocument @p_ScrapDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end
			else if @obj='TransferDocument' begin
				exec xp_UpdTransferDocument @p_TransefDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end
			else if @obj='TransferRelatedProductDocument' begin
				exec xp_UpdTransferRelatedDocument @p_TransferRelatedDocumentID=0,  @p_AddUserID=@p_AddUserID;
			end		
			
			else if @obj='UserActiveHistory' begin
				exec xp_UpdUserActiveHistory @p_AddUserID=@p_AddUserID, @p_DateFrom = null,@p_DateTo = null; 
			end
			
			else if @obj='UsersWRK' begin
				exec xp_UpdUsersWRK @p_AddUserID=@p_AddUserID, @p_DateFrom = null,@p_DateTo = null;  
			end
				
			else if @obj='' begin
				select @obj, @par, 'ok' 
			end

			set @i=@i+1
		end
	end
	--select * from @p 
	-- select * from [RefreshInfo]
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_UpdRefreshInfoSyncDate 'ScrapDocument',  'SyncDate', 'ScrapDocumentNumber', '1022323'
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdRefreshInfoSyncDate]  
	-- Add the parameters for the stored procedure here	
	@p_NameTable nvarchar(MAX),
	@p_ValueColumn nvarchar(MAX),
	@p_WhereColumn nvarchar(MAX),
	@p_DocumentID nvarchar(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @end_request nvarchar(MAX)
	set @end_request = 'UPDATE [dbo].['+@p_NameTable+'] set '+@p_ValueColumn+' = null where '+ @p_WhereColumn +'='+@p_DocumentID
											
		-- print @end_request
		--SELECT @end_request
		EXECUTE (@end_request);	
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_UpdRegisterDocument 1096, 1474
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdRegisterDocument] 
	-- Add the parameters for the stored procedure here
	@p_RegisterDocumentID int,
    @p_AddUserID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'Register', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Register' and [DatVal] is null)

	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocList;
	create table #DocList (DocNum int)

	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'

	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'

    if @p_RegisterDocumentID != 0
		begin -- Для одной записи
			insert into #DocList
			select ID
			from [dbo].[Register] r where ID=@p_RegisterDocumentID
		end
	else
		begin -- Для пакета записей
			insert into #DocList
			select ID
			from [dbo].[Register] r where r.SyncDate is null
		end
	Begin try
			declare @sqlDel nvarchar(max)
			set @sqlDel = ' 
			delete from [DataAdapter].[dbo].[TEMP_Register]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlDel) at [DataAdapter]
			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_Register]
			select  r.[ID]
				   ,[ScrapRegisterNumber]
				   ,[Status]
				   ,u.[Number]
				   ,u2.[Number]
				   ,r.[CreatedDate]
				   ,r.[LastModifiedDate]				   
				   ,@CompNum 
				   ,@ShopNum
				   ,0
			from [dbo].[Register] r inner join #DocList on r.ID=DocNum
			join Users u on r.CreatedByUserID = u.ID
			join Users u2 on r.LastModifiedByUserID = u2.ID
	End try
	Begin catch
		set @Error=1
	End catch
	if @Error=0
		begin try

		declare @sqlUpd nvarchar(max)
		set @sqlUpd = ' 
		Update [DataAdapter].[dbo].[TEMP_Register] 	
		set [TransComplited] = 1		
		where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
		execute (@sqlUpd) at [DataAdapter]

		end try
		begin catch
			set @Error=2
		end catch
	if @Error=0
		begin
			update r
			set r.SyncDate = GETDATE()
			from [dbo].[Register] r 
			inner join #DocList on r.ID=DocNum

			if @p_RegisterDocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0, 
				 DtRefresh=Getdate(), 
				 UserID=@p_AddUserID
				 where obj = 'Register'
				end
		end
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- exec xp_UpdRelatedProductDocument 0, 63
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdRelatedProductDocument] 
	-- Add the parameters for the stored procedure here
	@p_RelatedProductDocumentID int,
    @p_AddUserID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocList; 

	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0
	Declare @dt_now datetime=getdate()

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'RelatedProductDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'RelatedProductDocument' and [DatVal] is null)

	create table #DocList (DocNum int)

	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'

	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'

    if @p_RelatedProductDocumentID != 0
	begin -- Для одной записи
		insert into #DocList
		select s.ID
		from [dbo].[RelatedProductDocument] s where s.[ID]=@p_RelatedProductDocumentID
	end
	else
	begin -- Для пакета записей
		insert into #DocList
		select rd.ID
		from [dbo].[RelatedProductDocument] rd where rd.[SyncDate] is null			
	end

	Begin try
		declare @sqlDel nvarchar(max)
		set @sqlDel = ' 
		delete from [DataAdapter].[dbo].[TEMP_RelatedDocumentSync]
		where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID] = '+CAST(@ShopNum as varchar(50))
	
	execute (@sqlDel) at [DataAdapter]
	
		insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_RelatedDocumentSync]
		select rd.ReffID 
				,@CompNum	
				,@ShopNum				  		 
		from [dbo].[RelatedProductDocument] rd 
		inner join #DocList dl on rd.ID=dl.DocNum
		
	End try
	Begin catch
			set @Error=1
	End catch	
	if @Error=0
		begin			
			update s
				set s.[LastModifiedDate] = @dt_now,
					s.[SyncDate]=@dt_now,
					s.[LastModifiedByUserID] = @p_AddUserID
			from [dbo].[RelatedProductDocument] s
				inner join #DocList on s.ID=DocNum

			if @p_RelatedProductDocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0,
					DtRefresh=Getdate(),
					UserID=@p_AddUserID
				 where obj = 'RelatedProductDocument'
				end
		end
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- xp_UpdRevaluationDocument 322, 1474
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdRevaluationDocument] 
	-- Add the parameters for the stored procedure here
	@p_RevaluationDocumentID int,
    @p_AddUserID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocList; 

	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0
	Declare @dt_now datetime=getdate()

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'RevaluationDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'RevaluationDocument' and [DatVal] is null)

	create table #DocList (DocNum int)

	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'

	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'

    if @p_RevaluationDocumentID != 0
		begin -- Для одной записи
			insert into #DocList
			select s.ReffID
			from [dbo].[RevaluationDocument] s where s.ID=@p_RevaluationDocumentID
		end
	else
		begin -- Для пакета записей
			insert into #DocList
			select rd.ReffID
			from [dbo].[RevaluationDocument] rd where rd.[SyncDate] is null			
		end

	Begin try
			declare @sqlDel nvarchar(max)
			set @sqlDel = ' 
			delete from [DataAdapter].[dbo].[TEMP_RevaluationSync]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlDel) at [DataAdapter]

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_RevaluationSync]
			select rd.ReffID
				  ,@CompNum	
				  ,@ShopNum	
				  ,rdd.[ProductID]				  		 
			from [dbo].[RevaluationDocument] rd 
				inner join #DocList on rd.ReffID=DocNum
				inner join [RevaluationDocumentDetails] rdd on rdd.DocumentID = rd.ID and rdd.[Status]=1
			End try
			Begin catch
			set @Error=1
			End catch
	if @Error=0
		begin			
			update s
				set s.[LastModifiedDate] = @dt_now,
					s.[SyncDate]=@dt_now,
					s.[LastModifiedByUserID] = @p_AddUserID
			from [dbo].[RevaluationDocument] s inner join #DocList on s.ReffID=DocNum

			if @p_RevaluationDocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0, 
				 DtRefresh=Getdate(), 
				 UserID=@p_AddUserID
				 where obj = 'RevaluationDocument'
				end
		end
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
/*
select * from SaleDocument
order by id desc*/

-- exec [dbo].[xp_UpdSaleDocument] 1525,63 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdSaleDocument] 
	-- Add the parameters for the stored procedure here
	@p_SaleDocumentID int,
    @p_AddUserID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocList; 

	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'SaleDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'SaleDocument' and [DatVal] is null)

	create table #DocList (DocNum int)

	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'

	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'

    if @p_SaleDocumentID != 0
		begin -- Для одной записи

			insert into #DocList
			select ID
			from [dbo].[SaleDocument] s where ID=@p_SaleDocumentID
		end
	else
		begin -- Для пакета записей
			
			insert into #DocList
			select ID
			from [dbo].[SaleDocument] s where s.SyncDate is null
			
		end

	Begin try
			declare @sqlDel nvarchar(max)
			set @sqlDel = ' 
			delete from [DataAdapter].[dbo].[TEMP_SaleDocument]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentAdditionalDiscount]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentCoupon]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentPayment]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentPrepayment]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentProduct]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentRelatedProduct]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentScrapDocument]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_SaleDocumentServices]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlDel) at [DataAdapter]

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocument]
			select  s.ID,
					[DocumentNumber],
					[Type] ,
					u.[Number] ,
					[ClientCardNumber] ,
					[ClientPhone] ,
					[ClientEmail] ,
					[SendCheck] ,
					[Currency] ,
					[SyncDate] ,
					s.[CreatedDate] ,
					s.[LastModifiedDate] ,
					u1.[Number] ,
					u2.[Number],
					@CompNum ,
					@ShopNum ,
					0
			from [dbo].[SaleDocument] s inner join #DocList on s.ID=DocNum
			join Users u on s.UserID = u.ID
			join Users u1 on s.CreatedByUserID = u1.ID
			join Users u2 on s.LastModifiedByUserID = u2.ID
			
			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentAdditionalDiscount]
			select  sad.ID,
					[DocumentID] ,
					[ExtRefID] ,
					[Amount] ,
					sad.[CreatedDate],
					sad.[LastModifiedDate],
					u1.[Number],
					u2.[Number],
					@CompNum ,
					@ShopNum
			from [dbo].[SaleDocumentAdditionalDiscount] sad inner join #DocList on sad.DocumentID=DocNum
			join Users u1 on sad.CreatedByUserID = u1.ID
			join Users u2 on sad.LastModifiedByUserID = u2.ID
			
			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentCoupon]
			select  sdc.ID,
					[DocumentID],
					[CouponID] ,
					sdc.[CreatedDate] ,
					sdc.[LastModifiedDate] ,
					u1.[Number],
					u2.[Number],
					@CompNum,
					@ShopNum 
			from [dbo].[SaleDocumentCoupon] sdc inner join #DocList on sdc.DocumentID=DocNum
			join Users u1 on sdc.CreatedByUserID = u1.ID
			join Users u2 on sdc.LastModifiedByUserID = u2.ID
			
			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentPayment]
			select  sdp.ID,
					[DocumentID],
					[WorkShiftID],
					[ExtReffID],
					[PaymentType],
					[Amount],
					[CardType],
					[CardNumber],
					[CardDate],
					sdp.[CreatedDate],
					sdp.[LastModifiedDate],
					u1.[Number],
					u2.[Number],
					[CreditNumber],					
					@CompNum ,
					@ShopNum,
					[IsRemotePayment]
			from [dbo].[SaleDocumentPayment] sdp inner join #DocList on sdp.DocumentID=DocNum
			join Users u1 on sdp.CreatedByUserID = u1.ID
			join Users u2 on sdp.LastModifiedByUserID = u2.ID

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentPrepayment]
			select  sdp.ID,
					[Amount],
					[DocumentID],
					[UseDocumentID],
					[Description],
					sdp.[CreatedDate],
					sdp.[LastModifiedDate],
					u1.[Number],
					u2.[Number],
					@CompNum ,
					@ShopNum
			from [dbo].[SaleDocumentPrepayment] sdp inner join #DocList on sdp.DocumentID=DocNum
			join Users u1 on sdp.CreatedByUserID = u1.ID
			join Users u2 on sdp.LastModifiedByUserID = u2.ID

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentProduct]
			select  sdp.ID,
					[DocumentID],
					[LineDocument],
					[ProductID],
					[Quantity],
					[TagPriceWithVAT],
					[TagPriceWithoutVAT],
					[PriceFromCRM],
					[DiscountType],
					[DiscountDescription],
					[ReasonReturnType],
					[ReasonReturnDescription],
					[SalePriceWithVAT],
					[SalePriceWithoutVAT],
					[InternetNumber],
					sdp.[CreatedDate],
					sdp.[LastModifiedDate],
					u1.[Number],
					u2.[Number],
					@CompNum ,
					@ShopNum
			from [dbo].[SaleDocumentProduct] sdp inner join #DocList on sdp.DocumentID=DocNum
			join Users u1 on sdp.CreatedByUserID = u1.ID
			join Users u2 on sdp.LastModifiedByUserID = u2.ID

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentRelatedProduct]
			select  srp.ID,
					[DocumentID],
					[LineDocument],
					[PartNumber] ,
					[Model] ,
					[Quantity],
					[TagPriceWithVAT] ,
					[TagPriceWithoutVAT],
					[SalePriceWithVAT],
					[SalePriceWithoutVAT],
					srp.[CreatedDate],
					srp.[LastModifiedDate],
					u1.[Number],
					u2.[Number],
					@CompNum ,
					@ShopNum,
					Supplier
			from [dbo].[SaleDocumentRelatedProduct] srp inner join #DocList on srp.DocumentID=DocNum
			join Users u1 on srp.CreatedByUserID = u1.ID
			join Users u2 on srp.LastModifiedByUserID = u2.ID
			
			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentScrapDocument]
			select  sd.ID,
					[DocumentID],
					[ScrapDocumentID],
					sd.[CreatedDate],
					sd.[LastModifiedDate],
					u1.[Number],
					u2.[Number],
					@CompNum ,
					@ShopNum
			from [dbo].[SaleDocumentScrapDocument] sd inner join #DocList on sd.DocumentID=DocNum
			join Users u1 on sd.CreatedByUserID = u1.ID
			join Users u2 on sd.LastModifiedByUserID = u2.ID

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_SaleDocumentServices]
			select  sds.ID,
					[DocumentID],
					[Type],
					[Amount],
					[Description],
					sds.[CreatedDate],
					sds.[LastModifiedDate],
					u1.[Number],
					u2.[Number],
					@CompNum ,
					@ShopNum
			from [dbo].[SaleDocumentServices] sds inner join #DocList on sds.DocumentID=DocNum
			join Users u1 on sds.CreatedByUserID = u1.ID
			join Users u2 on sds.LastModifiedByUserID = u2.ID

			End try
			Begin catch
			set @Error=1
			End catch
	if @Error=0
		begin
			if @p_SaleDocumentID != 0
		 	begin
			 	declare @sqlUpd nvarchar(max)
				set @sqlUpd = ' 
				update [DataAdapter].[dbo].[TEMP_SaleDocument]
				set TransComplited=1
				where ID= '+CAST(@p_SaleDocumentID as varchar(50))+'  
				and [CompanyID]= '+CAST(@CompNum as varchar(50))+'  
				and ShopID= '+CAST(@ShopNum as varchar(50))
				execute (@sqlUpd) at [DataAdapter]
			end else
			begin

			declare @sqlUpd2 nvarchar(max)
			set @sqlUpd2 = ' 
			Update [DataAdapter].[dbo].[TEMP_SaleDocument] 	
			set [TransComplited] = 1		
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlUpd2) at [DataAdapter]

			end
			update s
			set s.SyncDate = GETDATE()
			from [dbo].[SaleDocument] s inner join #DocList on s.ID=DocNum

			if @p_SaleDocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0, DtRefresh=Getdate(), UserID=@p_AddUserID
				 where obj = 'SaleDocument'
				end

		end
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- exec [dbo].[xp_UpdScrapDocument] 1851, 66
--
CREATE PROCEDURE [dbo].[xp_UpdScrapDocument] 
	-- Add the parameters for the stored procedure here
	@p_ScrapDocumentID int,
    @p_AddUserID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocListGold; 

	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'ScrapDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'ScrapDocument' and [DatVal] is null)

	create table #DocListGold (DocNum int, VendorNum int)

	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'

	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'

    if @p_ScrapDocumentID != 0
		begin -- Для одной записи
			insert into #DocListGold
			select ID,[VendorID]
			from [dbo].ScrapDocument s where ID=@p_ScrapDocumentID
		end
	else
		begin -- Для пакета записей
			insert into #DocListGold
			select ID,[VendorID]
			from [dbo].ScrapDocument s where s.SyncDate is null
		end
	
	Begin try
			declare @sqlDel nvarchar(max)
			set @sqlDel = ' 
			delete from [DataAdapter].[dbo].[TEMP_ScrapDocument]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_ScrapDocumentDetails]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_Vendor]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlDel) at [DataAdapter]

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_ScrapDocument]
			select s.[ID]
				  ,[ScrapDocumentNumber]
				  ,[Status]
				  ,[VendorID]
				  ,[RegisterID]
				  ,[SyncDate]
				  ,u.[Number]
				  ,u1.[Number]
				  ,s.[CreatedDate]
				  ,s.[LastModifiedDate]
				  ,[Type]
				  ,@CompNum
				  ,@ShopNum
				  ,0
			from [dbo].[ScrapDocument] s inner join #DocListGold on s.ID=DocNum
			join Users u on s.CreatedByUserID = u.ID 
			join Users u1 on s.LastModifiedByUserID = u1.ID 

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_ScrapDocumentDetails]
			select sad.[ID]
				  ,[KTID]
				  ,[Quantity]
				  ,[Weight]
				  ,[Description]
				  ,[Imennik]
				  ,[Impress]
				  ,[DocumentID]
				  ,[Summa]
				  ,[SinglePrice]
				  ,u.[Number]
				  ,u1.[Number]
				  ,sad.[LastModifiedDate]
				  ,sad.[CreatedDate]
				  ,@CompNum
				  ,@ShopNum
			from [dbo].[ScrapDocumentDetails] sad inner join #DocListGold on sad.DocumentID=DocNum
			join Users u on sad.CreatedByUserID = u.ID 
			join Users u1 on sad.LastModifiedByUserID = u1.ID 

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_Vendor]
			select sdc.[ID]
				  ,[Name]
				  ,[Address]
				  ,[Serial]
				  ,sdc.[Number]
				  ,[Issue]
				  ,[IssueDate]
				  ,sdc.[CreatedDate]
				  ,sdc.[LastModifiedDate]
				  ,u.[CreatedByUserID]
				  ,u1.[LastModifiedByUserID]
				  ,@CompNum
				  ,@ShopNum
			from [dbo].[Vendor] sdc inner join #DocListGold g on sdc.ID=g.[VendorNum]
			join Users u on sdc.CreatedByUserID = u.ID 
			join Users u1 on sdc.LastModifiedByUserID = u1.ID 
	End try
	Begin catch
		set @Error=1
	End catch	
	if @Error=0
		begin
			if @p_ScrapDocumentID != 0
		 	begin			
			 	declare @sqlUpd nvarchar(max)
				set @sqlUpd = ' 
				update [DataAdapter].[dbo].[TEMP_ScrapDocument]
				set [TransComplited]=1
				where ID = '+CAST(@p_ScrapDocumentID as varchar(50))+'  
				and [CompanyID]= '+CAST(@CompNum as varchar(50))+'  
				and ShopID= '+CAST(@ShopNum as varchar(50))
				execute (@sqlUpd) at [DataAdapter]
			end else
			begin
				declare @sqlUpd2 nvarchar(max)
				set @sqlUpd2 = ' 
				Update [DataAdapter].[dbo].[TEMP_ScrapDocument] 	
				set [TransComplited] = 1		
				where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
				execute (@sqlUpd2) at [DataAdapter]
			
			end
			update s
			set s.SyncDate = GETDATE()
			from [dbo].[ScrapDocument] s inner join #DocListGold on s.ID=DocNum
			if @p_ScrapDocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0, DtRefresh=Getdate(), UserID=@p_AddUserID
				 where obj = 'ScrapDocument'
				end
		end
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO



-- exec [dbo].[xp_UpdTransferDocument] 2119,63
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdTransferDocument] 
	-- Add the parameters for the stored procedure here
	@p_TransefDocumentID int,
    @p_AddUserID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocList; 

	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'TransferDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'TransferDocument' and [DatVal] is null)

	create table #DocList (DocNum int)

	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'

	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'

    if @p_TransefDocumentID != 0
		begin -- Для одной записи
			insert into #DocList
			select ID
			from [dbo].[TransferDocument] s where ID=@p_TransefDocumentID
		end
	else
		begin -- Для пакета записей
			insert into #DocList
			select ID
			from [dbo].[TransferDocument] s where s.SyncDate is null
		end

	Begin try
			declare @sqlDel nvarchar(max)
			set @sqlDel =
			' delete from [DataAdapter].[dbo].[TEMP_TransferDocument]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_TransferDocumentDetails]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+' delete from [DataAdapter].[dbo].[TEMP_TransferDocumentStonesDetails]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlDel) at [DataAdapter]		

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_TransferDocument]
			select s.[ID]
				  ,getdate()
				  ,[SenderID]
				  ,[ReceiverID]
				  ,[Contract]
				  ,[Status]
				  ,[TransferDocumentNumber]
				  ,s.[CreatedDate]
				  ,s.[LastModifiedDate]
				  ,u.[Number]
				  ,u1.[Number]
				  ,@CompNum
				  ,@ShopNum
				  ,0
			from [dbo].[TransferDocument] s inner join #DocList on s.ID=DocNum
		    join Users u on s.CreatedByUserID = u.ID 
			join Users u1 on s.LastModifiedByUserID = u1.ID 
						
			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_TransferDocumentDetails]
			select [DocumentID]
				  ,sad.[ID]
				  ,[Model]
				  ,[ProductID]
				  ,[Type]
				  ,[KtID]
				  ,[Size]
				  ,[Color]
				  ,[Gender]
				  ,[SupplierID]
				  ,[SupplierName]
				  ,[Country]
				  ,[ThemedCollection]
				  ,[Weight]
				  ,[CostWithoutVAT]
				  ,[CostCurrency]
				  ,[TagPriceWithVAT]
				  ,[TagPriceCurrency]
				  ,[TagPriceExtra]
				  ,sad.[CreatedDate]
				  ,sad.[LastModifiedDate]
				  ,u.[Number]
				  ,u1.[Number]
				  ,[TagPriceWithOutVAT]
				  ,[DeclarationNumber]
				  ,[TnvedCode]
				  ,@CompNum
				  ,@ShopNum				  
			from [dbo].[TransferDocumentDetails] sad inner join #DocList on sad.DocumentID=DocNum
			join Users u on sad.CreatedByUserID = u.ID 
			join Users u1 on sad.LastModifiedByUserID = u1.ID 
		

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_TransferDocumentStonesDetails]
			select sdc.[ID]
				  ,[ProductID]
				  ,[DocumentID]
				  ,[Stone]
				  ,[Shape]
				  ,[Size]
				  ,[Color]
				  ,[Clarity]
				  ,[Quantity]
				  ,[Weight]
				  ,[Setting]
				  ,sdc.[CreatedDate]
				  ,sdc.[LastModifiedDate]
				  ,u.[Number]
				  ,u1.[Number]
				  ,@CompNum
				  ,@ShopNum
			from [dbo].[TransferDocumentStonesDetails] sdc inner join #DocList on sdc.DocumentID=DocNum
			join Users u on sdc.CreatedByUserID = u.ID 
			join Users u1 on sdc.LastModifiedByUserID = u1.ID 
			
			End try
			Begin catch
			set @Error=1
			End catch
	if @Error=0
		begin
			 if @p_TransefDocumentID != 0
		 	 begin
			 	declare @sqlUpd nvarchar(max)
				set @sqlUpd =' 
				update [DataAdapter].[dbo].[TEMP_TransferDocument]
				set [TransComplited]=1
				where ID= '+CAST(@p_TransefDocumentID as varchar(50))+'  
				and [CompanyID]= '+CAST(@CompNum as varchar(50))+'  
				and ShopID= '+CAST(@ShopNum as varchar(50))
				 execute (@sqlUpd) at [DataAdapter]
			 end else
			begin
				declare @sqlUpd2 nvarchar(max)
				set @sqlUpd2 = ' 
				Update [DataAdapter].[dbo].[TEMP_TransferDocument] 	
				set [TransComplited] = 1		
				where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
				execute (@sqlUpd2) at [DataAdapter]
			end
			update s
			set s.SyncDate = GETDATE()
			from [dbo].[TransferDocument] s inner join #DocList on s.ID=DocNum

			if @p_TransefDocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0, DtRefresh=Getdate(), UserID=@p_AddUserID
				 where obj = 'TransferDocument'
				end

		end
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- exec [dbo].[xp_UpdTransferRelatedDocument] 373,63
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xp_UpdTransferRelatedDocument] 
	-- Add the parameters for the stored procedure here
	@p_TransferRelatedDocumentID int,
    @p_AddUserID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF OBJECT_ID(N'tempdb..#DocList', N'U') IS NOT NULL   
	DROP TABLE #DocList; 

	declare @CompNum int
	declare @ShopNum int
	declare @Error int=0
	
	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'TransferRelatedProductDocument', null where not exists (select * from dbo.[RefreshInfo] where obj = 'TransferRelatedProductDocument' and [DatVal] is null)

	create table #DocList(DocNum int)

	select @CompNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер компании'

	select @ShopNum = Value
	from [dbo].[Attributes]
	where [Name]='Номер магазина'
	
    if @p_TransferRelatedDocumentID != 0
		begin -- Для одной записи
			insert into #DocList
			select ID
			from [dbo].[TransferRelatedProductDocument] s where ID=@p_TransferRelatedDocumentID
		end
	else
		begin -- Для пакета записей
			insert into #DocList
			select ID
			from [dbo].[TransferRelatedProductDocument] s where s.SyncDate is null
		end
	
	Begin try
			declare @sqlDel nvarchar(max)
			set @sqlDel =' 
			delete from [DataAdapter].[dbo].[TEMP_TransferRelatedProductDocument]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			+'delete from [DataAdapter].[dbo].[TEMP_TransferRelatedProductDocumentDetails]
			where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
			execute (@sqlDel) at [DataAdapter]

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_TransferRelatedProductDocument]
			select 
				   s.[ID]
				  ,getdate() as [SyncDate]
				  ,s.[SenderID]
				  ,s.[ReceiverID]
				  ,s.[Contract]
				  ,s.[Status]
				  ,s.[DocumentNumber]
				  ,s.[CreatedDate]
				  ,s.[LastModifiedDate]
				  ,u.[Number]
				  ,u1.[Number]
				  ,@CompNum
				  ,@ShopNum
				  ,0
			from [dbo].[TransferRelatedProductDocument] s
				inner join #DocList as dl on s.ID=dl.DocNum
				join Users u on s.CreatedByUserID = u.ID 
				join Users u1 on s.LastModifiedByUserID = u1.ID 

			insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_TransferRelatedProductDocumentDetails]
			select [DocumentID]
				  ,sad.[ID]
				  ,[PartNumber]
				  ,[Model]
				  ,[Supplier]
				  ,[Quantity]
				  ,[UnitPrice]
				  ,sad.[CreatedDate]
				  ,sad.[LastModifiedDate]
				  ,u.[Number]
				  ,u1.[Number]
				  ,@CompNum
				  ,@ShopNum
			from [dbo].[TransferRelatedProductDocumentDetails] sad
				inner join #DocList as dl on sad.DocumentID=dl.DocNum
				join Users u on sad.CreatedByUserID = u.ID 
				join Users u1 on sad.LastModifiedByUserID = u1.ID 

			End try
			Begin catch
			set @Error=1
			End catch

	if @Error=0
		begin
			 if @p_TransferRelatedDocumentID != 0
		 	 begin
			 	declare @sqlUpd nvarchar(max)
				
				set @sqlUpd =
				'update [DataAdapter].[dbo].[TEMP_TransferRelatedProductDocument]
				set [TransComplited]=1
				where ID= '+CAST(@p_TransferRelatedDocumentID as varchar(50))+'  
				and [CompanyID]= '+CAST(@CompNum as varchar(50))+' 
				and ShopID= '+CAST(@ShopNum as varchar(50))
				
				execute (@sqlUpd) at [DataAdapter]
			
			end else
			begin
				declare @sqlUpd2 nvarchar(max)
				set @sqlUpd2 = ' 
				Update [DataAdapter].[dbo].[TEMP_TransferRelatedProductDocument] 	
				set [TransComplited] = 1		
				where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
				execute (@sqlUpd2) at [DataAdapter]
			end
			update s
			set s.SyncDate = GETDATE()
			from [dbo].[TransferRelatedProductDocument] s inner join #DocList on s.ID=DocNum

			if @p_TransferRelatedDocumentID=0
				begin
				 Update dbo.[RefreshInfo]
				 set [Source]=0, DtRefresh=Getdate(), UserID=@p_AddUserID
				 where obj = 'TransferRelatedProductDocument'
				end

		end
END




 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

/*
declare @start_date datetime, @end_date datetime
set @start_date = DATEADD(DD,-1,GETDATE())
set @end_date = GETDATE()
exec dbo.xp_UpdUserActiveHistory 66, @start_date, @end_date
*/


CREATE proc [dbo].[xp_UpdUserActiveHistory]
@p_AddUserID int,
@p_DateFrom datetime = null,
@p_DateTo datetime =null
as
begin
	declare @CompNum int,
			@ShopNum int,
			@Error int
	IF OBJECT_ID(N'tempdb..#ActiveHistoryList', N'U') IS NOT NULL   
	DROP TABLE #ActiveHistoryList; 
	create table #ActiveHistoryList (DocNum int)

	set @CompNum = (select Value from [dbo].[Attributes] where [Name]='Номер компании')
	set @ShopNum = (select Value from [dbo].[Attributes] where [Name]='Номер магазина')
	set @Error = 0

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'UserActiveHistory', null where not exists (select * from dbo.[RefreshInfo] where obj = 'UserActiveHistory' and [DatVal] is null)
	
    if ISDATE(@p_DateFrom) != 0 and ISDATE(@p_DateTo) != 0
	begin -- Для одной записи
		insert into #ActiveHistoryList
		select ID from UserActiveHistory s where CreatedDate >= @p_DateFrom and  CreatedDate <=@p_DateTo
	end else
	begin -- Для пакета записей
		insert into #ActiveHistoryList
		select ID from UserActiveHistory where [SyncDate] is null
	end

	begin try
		--begin transaction
		declare @sqlDel nvarchar(max)
		set @sqlDel = ' 
		delete from [DataAdapter].[dbo].[TEMP_UserActiveHistory]
		where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
		execute (@sqlDel) at [DataAdapter]

		insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_UserActiveHistory]
		select 
				uah.ID,
				[Path],
				uah.CreatedDate,
				u.Number,
				AttributeID,
				[Type],
				@CompNum as CompNum,
				@ShopNum as CompNum,
				0 as TranCompl	
		from UserActiveHistory uah
		inner join #ActiveHistoryList ahl on ahl.DocNum = uah.ID
		join Users u on uah.CreatedByUserID = u.ID
--		commit transaction

	end try
	begin catch
--		rollback transaction
		set @Error = 1
	end catch 

	if @Error = 0
	begin

		declare @sqlUpd nvarchar(max)
		set @sqlUpd = ' 
		Update [DataAdapter].[dbo].[TEMP_UserActiveHistory] 	
		set [TransComplited] = 1		
		where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
		execute (@sqlUpd) at [DataAdapter]

		update s
		set s.SyncDate = GETDATE()
		from [dbo].[UserActiveHistory] s 
		inner join #ActiveHistoryList on s.ID=DocNum

		Update dbo.[RefreshInfo]
		set [Source]=0, 
		DtRefresh=Getdate(), 
		UserID=@p_AddUserID
		where obj = 'UserActiveHistory'
	end
	
end
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
/*
declare @start_date datetime, @end_date datetime
set @start_date = DATEADD(DD,-1,GETDATE())
set @end_date = GETDATE()
exec [dbo].[xp_UpdUsersWRK]  66, @start_date, @end_date
*/

CREATE proc [dbo].[xp_UpdUsersWRK]
@p_AddUserID int,
@p_DateFrom datetime = null,
@p_DateTo datetime =null
as
begin
		declare @CompNum int,
			@ShopNum int,
			@Error int
	IF OBJECT_ID(N'tempdb..#UsersWRKList', N'U') IS NOT NULL   
	DROP TABLE #UsersWRKList; 
	create table #UsersWRKList (DocNum int)

	set @CompNum = (select Value from [dbo].[Attributes] where [Name]='Номер компании')
	set @ShopNum = (select Value from [dbo].[Attributes] where [Name]='Номер магазина')
	set @Error = 0

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'UsersWRK', null where not exists (select * from dbo.[RefreshInfo] where obj = 'UsersWRK' and [DatVal] is null)
	
    if ISDATE(@p_DateFrom) != 0 and ISDATE(@p_DateTo) != 0
	begin -- Для одной записи
		insert into #UsersWRKList
		select ID from UsersWRK s where DtAdd >= @p_DateFrom and  DtAdd <=@p_DateTo
	end else
	begin -- Для пакета записей
		insert into #UsersWRKList
		select ID from UsersWRK where [SyncDate] is null
	end

	begin try
		declare @sqlDel nvarchar(max)
		set @sqlDel = ' 
		delete from [DataAdapter].[dbo].[TEMP_UsersWRK]
		where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
		execute (@sqlDel) at [DataAdapter]

		insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_UsersWRK]
		select uw.ID
				,u.Number
				,[Type]
				,DtAdd
				,@CompNum as CompNum	
				,@ShopNum as CompNum
				,0 as TranCompl	
		from UsersWRK uw
		inner join #UsersWRKList uwl on uwl.DocNum = uw.ID
		join Users u on uw.UserID = u.ID
		
	end try
	begin catch
		set @Error = 1
	end catch 
	
	if @Error = 0
	begin

		declare @sqlUpd nvarchar(max)
		set @sqlUpd = ' 
		Update [DataAdapter].[dbo].[TEMP_UsersWRK] 	
		set [TransComplited] = 1		
		where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
		execute (@sqlUpd) at [DataAdapter]

		update s
		set s.SyncDate = GETDATE()
		from [dbo].[UsersWRK] s 
		inner join #UsersWRKList on s.ID=DocNum

		Update dbo.[RefreshInfo]
		set [Source]=0, 
		DtRefresh=Getdate(), 
		UserID=@p_AddUserID
		where obj = 'UsersWRK'
	end
end



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

--exec [dbo].[xp_UpdVersions] 66

CREATE proc [dbo].[xp_UpdVersions]
@p_AddUserID int,
@p_VersionID int = null
as
begin
	declare @CompNum int,
			@ShopNum int,
			@Error int	
	
	IF OBJECT_ID(N'tempdb..#Versions', N'U') IS NOT NULL   
	DROP TABLE #Versions; 
	create table #Versions (DocNum int)

	set @CompNum = (select Value from [dbo].[Attributes] where [Name]='Номер компании')
	set @ShopNum = (select Value from [dbo].[Attributes] where [Name]='Номер магазина')
	set @Error = 0

	insert into dbo.[RefreshInfo] ([Obj], [DatVal])
	select 'Versions', null where not exists (select * from dbo.[RefreshInfo] where obj = 'Versions' and [DatVal] is null)

    if ISDATE(@p_VersionID) != 0 
	begin -- Для одной записи
		insert into #Versions
		select ID from Versions s where ID = @p_VersionID
	end else
	begin -- Для пакета записей
		insert into #Versions
		select ID from Versions where [SyncDate] is null
	end

	begin try
		declare @sqlDel nvarchar(max)
		set @sqlDel = ' 
		delete from [DataAdapter].[dbo].[TEMP_Versions]
		where [CompanyID]= '+CAST(@CompNum as varchar(50))+' and [ShopID]= '+CAST(@ShopNum as varchar(50))
		execute (@sqlDel) at [DataAdapter]
		
		insert into [DataAdapter].[DataAdapter].[dbo].[TEMP_Versions]
		select 
		ID, Number, SyncDate, CreatedByUserID, CreatedDate
		,@CompNum as CompNum	
		,@ShopNum as ShopNum
		,0 as TranCompl	
		from Versions uw
		inner join #Versions uwl on uwl.DocNum = uw.ID
	end try
	begin catch
		set @Error = 1
	end catch 

	if @Error = 0
	begin
		update s
		set s.[TransComplited] = 1
		from [DataAdapter].[DataAdapter].[dbo].[TEMP_Versions] s 
		inner join #Versions ahl on s.ID=ahl.DocNum

		update s
		set s.SyncDate = GETDATE()
		from [dbo].[Versions] s 
		inner join #Versions on s.ID=DocNum

		Update dbo.[RefreshInfo]
		set [Source]=0, 
		DtRefresh=Getdate(), 
		UserID=@p_AddUserID
		where obj = 'Versions'
	end

end

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	загрузка списка всех программ
-- =============================================
create PROCEDURE [dbo].[xp_vp_Prog]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    select 
		p.ID,
		p.Name,
		p.Prim,
		dbo.sf_D_to_STR(p.DtAdd,'.') DtAdd
	from dbo.Prog p
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	сохранение/добавление в справочник программ
-- =============================================
CREATE PROCEDURE [dbo].[xp_vp_Prog_save]
		@ID smallint,
		@Name varchar(50),
		@Prim varchar(500)


AS
BEGIN
	SET NOCOUNT ON;
	
	declare @rez int=0

	if @ID=0 begin
		INSERT INTO [dbo].[Prog]
				   ([Name]	
				   ,[Prim])
			 VALUES
				   (@Name
				   ,@Prim)

		set @rez = SCOPE_IDENTITY()
	end
	Else begin
	
		UPDATE [dbo].[Prog]
		   SET [Name] = @Name
			  ,[Prim] = @Prim
		 WHERE ID=@ID
	
		set @rez=@@ROWCOUNT
	end	
	
	select @rez as rez
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	загрузка списка всех файлов программы по идентификатору версии
-- xp_vp_ProgF 1
-- =============================================
CREATE PROCEDURE [dbo].[xp_vp_ProgF]
	@ProgID smallint=0,
	@FileID int=0

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @VerID smallint 

	IF @ProgID>0 and @FileID=0 begin
		set @VerID=isnull((select max(p.ID) from dbo.ProgVer p where  p.ProgID=@ProgID and p.IsAct=1),0)
	
		SELECT [ID]
			  ,[NameFile]
			  --,[BinFile]
			  ,[SizeFile]
			  ,[MD5]		  
			  ,[PathFile]
			  ,dbo.sf_DT_to_STR([DtAdd],'.','m') DtAdd
		  FROM [dbo].[ProgF] f
		WHERE @VerID>0 and f.VerID= @VerID
	end
	else begin
		select
			f.VerID,
			f.NameFile,
			BinFile,
			SizeFile,
			PathFile,
			dbo.sf_DT_to_STR([DtAdd],'.','m') DtAdd,
			MD5
		from dbo.ProgF f
		where f.ID=@FileID
	end
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Соранение файла связанного с заданной версией программы
-- truncate table [ProgF]
-- =============================================
CREATE PROCEDURE [dbo].[xp_vp_ProgF_save]
	@VerID smallint
   ,@NameFile varchar(150)
   ,@PathFile varchar(150) 
   ,@BinFile varbinary(max)
   ,@SizeFile int 
   ,@MD5 char(32)   
   
AS
BEGIN

	SET NOCOUNT ON;	
	
	declare @SizeBinFile int = DATALENGTH(@BinFile)
	Declare @rez int = 0
	
	if @SizeBinFile=@SizeFile begin
		-- проверка есть и файл с таким именем в наборе данной версии программы
		set @rez = isnull(
					(select f.ID 
					 from dbo.ProgF f 
					 where f.VerID =@VerID 
						and f.NameFile=@NameFile),0)
		
		if @rez>0 begin -- найден файл с таким же именем
			Update dbo.ProgF
			set 
				BinFile=@BinFile,
				md5=@MD5,
				SizeFile=@SizeFile,
				DtAdd=GETDATE(),
				PathFile=@PathFile
			where ID=@rez
		
			if @@ROWCOUNT!=1
				set @rez=0
		end
		else begin
			INSERT INTO [dbo].[ProgF]
					   ([VerID]
					   ,[NameFile]
					   ,[BinFile]
					   ,[SizeFile]
					   ,[PathFile]
					   ,[MD5]
					   )
				 VALUES
					   (@VerID
					   ,@NameFile
					   ,@BinFile
					   ,@SizeFile
					   ,@PathFile
					   ,@MD5
					   )
			set @rez= SCOPE_IDENTITY()
		end
	
	end
	select @rez as rez
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	загрузка списка всех версий по идентификатору программы
-- =============================================
CREATE PROCEDURE [dbo].[xp_vp_ProgVer]
	@ProgID smallint=1

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    select 
		v.ID,
		v.NameVer,		
		dbo.sf_DT_to_STR(v.DtAdd,'.','m') DtAdd,
		--v.DtVer,
		v.IsAct,
		v.Prim
	from dbo.ProgVer v
	where v.ProgID=@ProgID
	order by v.DtAdd desc
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description: добавление версии программы
-- =============================================
CREATE PROCEDURE [dbo].[xp_vp_ProgVer_save]
	@ID smallint
	,@ProgID smallint
	,@NameVer varchar(50)
	,@Prim varchar(1000)
	,@IsAct bit
	--	,@DtVer char(8)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @rez int=0

	if @ID=0 begin
		INSERT INTO [dbo].[ProgVer]
				   ([ProgID]
				   ,[NameVer]
				   --,[DtVer]
				   ,[Prim]
				   ,[IsAct])
			 VALUES
				   (@ProgID
				   ,@NameVer
				   --,@DtVer
				   ,@Prim
				   ,@IsAct)

		set @rez = SCOPE_IDENTITY()
		
		if @IsAct=1 begin
			update [dbo].[ProgVer] 
			set [IsAct] = 0 
			where ProgID=@ProgID and ID!=@rez
		end
		
	end
	Else begin
	
		UPDATE [dbo].[ProgVer]
		   SET [NameVer] = @NameVer
			  --,[DtVer] = @DtVer
			  ,[Prim] = @Prim
			  ,[IsAct] = @IsAct
		 WHERE ID=@ID
	
		set @rez=@@ROWCOUNT
		
		if @IsAct=1 begin
			update [dbo].[ProgVer] 
			set [IsAct] = 0 
			where ProgID=@ProgID and ID!=@ID
		end
	end	
	
	
	
	select @rez as rez
END



 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

--exec [xp_WorkToolsReplaceCastProcedure] 
CREATE proc [dbo].[xp_WorkToolsReplaceCastProcedure]
as
begin
declare @proc_name nvarchar (50),
             @proc_text nvarchar (max),
             @rep_proc_text  nvarchar (max)
DECLARE rep_cursor CURSOR FOR   

SELECT b.name, a.definition FROM sys.sql_modules a
JOIN (SELECT type, name, object_id FROM sys.objects b 
         WHERE TYPE in ('p') and is_ms_shipped = 0) b
ON a.object_id=b.object_id 
where a.definition like '%CAST(@p_Weight_Max AS nvarchar)%'
and b.name not in ('xp_WorkToolsReplaceColumns','xp_WorkToolsReplaceProcedure')

OPEN rep_cursor  
FETCH NEXT FROM rep_cursor INTO @proc_name, @proc_text;
WHILE @@FETCH_STATUS = 0
BEGIN 
       set @rep_proc_text=REPLACE(REPLACE(@proc_text, 'CREATE PROCEDURE', 'ALTER PROCEDURE'),'CAST(@p_Weight_Max AS nvarchar)', 'convert(nvarchar(40),@p_Weight_Max,126 )')
       exec sp_sqlexec @rep_proc_text
       FETCH NEXT FROM rep_cursor INTO @proc_name, @proc_text;
END  
close rep_cursor
DEALLOCATE rep_cursor
end

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
--exec WorkToolsReplaceColumns
CREATE proc [dbo].[xp_WorkToolsReplaceColumns]
as
begin

declare @tab_name nvarchar (50),
		@Column_Name nvarchar (50),
		@is_nulable nvarchar (50),
		@index nvarchar(50),
		@constraint nvarchar(50),
		@alt_str nvarchar(500),
		@di nvarchar(500),
		@ci nvarchar(500),
		@dc nvarchar(500),
		@cc nvarchar(500)

DECLARE product_cursor CURSOR FOR   
	select t.name as Table_Name, c.name as Column_Name, case when c.is_nullable=0 then 'NOT NULL' else 'NULL' end nulable, 
	case when ISNULL(i.name,'1') ='1' then '1' else i.name end as index_name,
	case when ISNULL(dc.name,'1') ='1' then '1' else dc.name end as constraint_name
from sys.columns c
	inner join sys.tables t on t.object_id = c.object_id
	left join sys.index_columns ic 
	on ic.object_id = c.object_id 
		and ic.column_id = c.column_id
	left join sys.indexes i 
	on i.object_id = ic.object_id and i.index_id = ic.index_id

	left join sys.default_constraints dc
	on dc.parent_object_id=c.object_id and dc.parent_column_id=c.column_id

	inner join sys.types tp on c.user_type_id = tp.user_type_id
	where tp.name = 'float'
  
OPEN product_cursor  
FETCH NEXT FROM product_cursor INTO @tab_name, @Column_Name, @is_nulable, @index, @constraint;
--IF @@FETCH_STATUS <> 0
WHILE @@FETCH_STATUS = 0
BEGIN 
	if @index<>'1'
	begin
		set @di = 'DROP INDEX '+@index+' ON dbo.'+@tab_name+';'
		exec sp_sqlexec @di
	end
	if @constraint<>'1'
	begin
		set @di = 'ALTER TABLE [dbo].['+@tab_name+'] drop constraint ['+@constraint+'];'
		exec sp_sqlexec @di
	end

	set @alt_str = 'alter table '+ @tab_name + ' alter column '+@Column_Name+' money ' + @is_nulable
	exec sp_sqlexec @alt_str

	if @index<>'1'
	begin
		set @ci = 'CREATE NONCLUSTERED INDEX '+@index+' ON [dbo].['+@tab_name+'] (['+@Column_Name+'])'
		exec sp_sqlexec @ci
	end
/*	if @constraint<>'1'
	begin
		set @ci = 'ALTER TABLE [dbo].['+@tab_name+'] ADD  CONSTRAINT ['+@constraint+']  DEFAULT ((0)) FOR ['+@Column_Name+']'
		exec sp_sqlexec @ci
	end*/

	FETCH NEXT FROM product_cursor INTO @tab_name, @Column_Name, @is_nulable, @index, @constraint;
END  
close product_cursor  
DEALLOCATE product_cursor  

end


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
--exec xp_WorkToolsReplaceProcedure 
CREATE proc [dbo].[xp_WorkToolsReplaceProcedure]
as
begin
declare @proc_name nvarchar (50),
             @proc_text nvarchar (max),
             @rep_proc_text  nvarchar (max)
DECLARE rep_cursor CURSOR FOR   

SELECT b.name, a.definition FROM sys.sql_modules a
JOIN (SELECT type, name, object_id FROM sys.objects b 
         WHERE TYPE in ('p') and is_ms_shipped = 0) b
ON a.object_id=b.object_id 
where a.definition like '%float%'
and b.name not in ('xp_WorkToolsReplaceColumns','xp_WorkToolsReplaceProcedure')

OPEN rep_cursor  
FETCH NEXT FROM rep_cursor INTO @proc_name, @proc_text;
WHILE @@FETCH_STATUS = 0
BEGIN 
       set @rep_proc_text=REPLACE(REPLACE(@proc_text, 'CREATE PROCEDURE', 'ALTER PROCEDURE'),'float', 'money')
       exec sp_sqlexec @rep_proc_text
       FETCH NEXT FROM rep_cursor INTO @proc_name, @proc_text;
END  
close rep_cursor
DEALLOCATE rep_cursor
end
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- xp_XCreateData
-- =============================================
CREATE PROCEDURE [dbo].[xp_XCreateData]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @dt_now datetime = getdate()
	--DECLARE @i int = 1


	---- Copy row start
	--DECLARE @p_TargetTable nvarchar(MAX) = '[DataAdapter].[dbo].[Document]'
	--DECLARE @p_SourceID int = 1

	--DECLARE @p_Request nvarchar(MAX) = ''
	--DECLARE @p_LastID int = 0
	--SET @p_LastID = (SELECT MAX(ID) FROM [DataAdapter].[dbo].[Document]) + 1
	--SET @p_Request ='
	--	SELECT * INTO #TempRow FROM ' + @p_TargetTable + ' WHERE ID = 1
	--	ALTER TABLE #TempRow DROP COLUMN [ID]
	--	INSERT INTO ' + @p_TargetTable + ' SELECT * FROM #TempRow
	--	DELETE #TempRow
	--	DROP TABLE #TempRow'
	--EXECUTE (@p_Request);
	---- Copy row stop

	--INSERT INTO [TAMUZ].[DataAdapter].[dbo].[DocumentStonesDetails] (
	-- [ID]
 --     ,[DocumentID]
 --     ,[Stone]
 --     ,[Shape]
 --     ,[Size]
 --     ,[Color]
 --     ,[Clarity]
 --     ,[Quantity]
 --     ,[Weight]
 --     ,[Setting]
	--)
	--SELECT
	-- st.[ID]
 --     ,st.[ProductID]
 --     ,st.[Stone]
 --     ,st.[Shape]
 --     ,st.[Size]
 --     ,st.[Color]
 --     ,st.[Clarity]
 --     ,st.[Quantity]
 --     ,st.[Weigth]
 --     ,st.[Setting]
 -- FROM [dbo].[Stones] as st
	--inner join [DataAdapter].[dbo].[DocumentDetails] as dad ON dad.[ID]=st.ProductID


--UPDATE [DataAdapter].[dbo].[DocumentStonesDetails] 
--SET [DocumentID] = OtherTable.[DocumentID]
--FROM (
--    SELECT [ID],[DocumentID]
--    FROM [DataAdapter].[dbo].[DocumentDetails]) AS OtherTable
--WHERE 
--    OtherTable.[ID] = [DataAdapter].[dbo].[DocumentStonesDetails].[DocumentDetailsID]


	------ Copy row start
	--DECLARE @p_TargetTable nvarchar(MAX) = '[DataAdapter].[dbo].[Document]'
	--DECLARE @p_SourceID int = 1

	--DECLARE @p_Request nvarchar(MAX) = ''
	--DECLARE @p_LastID int = 0
	--SET @p_LastID = (SELECT MAX(ID) FROM [DataAdapter].[dbo].[Document]) + 1
	--SET @p_Request ='
	--	SELECT * INTO #TempRow FROM ' + @p_TargetTable + ' WHERE ID = 1
	--	UPDATE #TempRow SET ID = '+ CAST(@p_LastID AS nvarchar) +'
	--	INSERT INTO ' + @p_TargetTable + ' SELECT * FROM #TempRow
	--	DELETE #TempRow
	--	DROP TABLE #TempRow'
	--EXECUTE (@p_Request);
	------ Copy row stop


	-- Copy rows start
	--DECLARE @p_SourceTable nvarchar(MAX) = '[TAMUZ].[dbo].[Product]'
	--DECLARE @p_TargetTable nvarchar(MAX) = '[TAMUZ].[DataAdapter].[dbo].[DocumentDetails]'
	--DECLARE @p_SourceID int = 1

	--DECLARE @p_Request_Insert nvarchar(MAX) = ''
	--DECLARE @p_LastID int = 0

	--SET @p_Request_Insert ='
	--	SELECT TOP 100 * INTO #TempRow FROM ' + @p_SourceTable + '

	--	ALTER TABLE #TempRow DROP COLUMN [ID]
	--	ALTER TABLE #TempRow DROP COLUMN [Model]
	--	ALTER TABLE #TempRow DROP COLUMN [ModelID]
	--	ALTER TABLE #TempRow DROP COLUMN [SyncID]
	--	ALTER TABLE #TempRow DROP COLUMN [Status]
	--	ALTER TABLE #TempRow DROP COLUMN [ShowcaseID]
	--	ALTER TABLE #TempRow DROP COLUMN [CreatedDate]
	--	ALTER TABLE #TempRow DROP COLUMN [LastModifiedDate]
	--	ALTER TABLE #TempRow DROP COLUMN [CreatedByUserID]
	--	ALTER TABLE #TempRow DROP COLUMN [LastModifiedByUserID]

	--	SELECT * FROM #TempRow

	--	INSERT INTO ' + @p_TargetTable + ' SELECT * FROM #TempRow

	--	DELETE #TempRow
	--	DROP TABLE #TempRow'
	--EXECUTE (@p_Request_Insert)
	-- Copy rows stop


	--INSERT INTO [TAMUZ].[DataAdapter].[dbo].[DocumentDetails] (
	--	[ID]
 --     ,[Model]
 --     ,[ModelID]
 --     ,[Type]
 --     ,[KtID]
 --     ,[Size]
 --     ,[Color]
 --     ,[Gender]
 --     ,[SupplierID]
 --     ,[SupplierName]
 --     ,[Country]
 --     ,[ThemedCollection]
 --     ,[Weigth]
 --     ,[CostWithoutVAT]
 --     ,[CostCurrency]
 --     ,[TagPriceWithVAT]
 --     ,[TagPriceCurrency]
 --     ,[TagPriceExtra]
	--) SELECT TOP 100
	--[ID]
 --     ,[Model]
 --     ,[ModelID]
 --     ,[Type]
 --     ,[KtID]
 --     ,[Size]
 --     ,[Color]
 --     ,[Gender]
 --     ,[SupplierID]
 --     ,[SupplierName]
 --     ,[Country]
 --     ,[ThemedCollection]
 --     ,[Weight]
 --     ,[CostWithoutVAT]
 --     ,[CostCurrency]
 --     ,[TagPriceWithVAT]
 --     ,[TagPriceCurrency]
 --     ,[TagPriceExtra]
	--FROM [TAMUZ].[dbo].[Product]


--SELECT 
--		[ID]
--      ,[Model]
--      ,[ModelID]
--      ,[Type]
--      ,[KtID]
--      ,[Size]
--      ,[Color]
--      ,[Gender]
--      ,[SupplierID]
--      ,[SupplierName]
--      ,[Country]
--      ,[ThemedCollection]
--      ,[Weigth]
--      ,[CostWithoutVAT]
--      ,[CostCurrency]
--      ,[TagPriceWithVAT]
--      ,[TagPriceCurrency]
--      ,[TagPriceExtra]
--	FROM [TAMUZ].[DataAdapter].[dbo].[DocumentDetails]





	--SET @p_Request_Insert ='
	--	SELECT TOP 100 * INTO #TempRow FROM ' + @p_SourceTable + '
	--	ALTER TABLE #TempRow DROP COLUMN [ID]
	--	SELECT * FROM #TempRow
	--	INSERT INTO ' + @p_TargetTable + ' SELECT * FROM #TempRow
	--	DELETE #TempRow
	--	DROP TABLE #TempRow'


	--WHILE @i<=10
	--BEGIN

		--INSERT INTO [dbo].[Document]
		--	   ([RefID]
		--	   ,[RefDate]
		--	   ,[SenderID]
		--	   ,[ReceiverID]
		--	   ,[Type]
		--	   ,[Contract]
		--	   ,[Status]
		--	   ,[DocumentID]
		--	   ,[CreatedDate]
		--	   ,[LastModifiedDate]
		--	   ,[CreatedByUserID]
		--	   ,[LastModifiedByUserID])
		-- VALUES
		--	   (
		--	   @i
		--	   ,@dt_now
		--	   ,1
		--	   ,2
		--	   ,1
		--	   ,'Contract '+CAST(@i AS nvarchar(MAX))
		--	   ,0
		--	   ,@i
		--	   ,@dt_now
		--	   ,@dt_now
		--	   ,15
		--	   ,15
		--	   )

		--INSERT INTO [dbo].[Document] (
		--	[ReffID]
  --         ,[ReffDate]
  --         ,[SenderID]
  --         ,[Contract]
  --         ,[Status]
  --         ,[DocumentID]
  --         ,[CreatedDate]
  --         ,[LastModifiedDate]
  --         ,[CreatedByUserID]
  --         ,[LastModifiedByUserID]
		--) VALUES (
		--	@i
		--	,@dt_now
		--	,@i
		--	,'Contract '+CAST(@i AS nvarchar(MAX))
		--	,1
		--	,@i

		--	,@dt_now
		--	,@dt_now
		--	,15
		--	,15
		--) SET @i=@i+1

		--INSERT INTO [dbo].[DocumenDetails] (
		--	[SyncID]
  --         ,[DocumentID]
  --         ,[LineDocument]
  --         ,[Model]
  --         ,[ModelID]
  --         ,[Type]
  --         ,[KtID]
  --         ,[Size]
  --         ,[Color]
  --         ,[Gender]
  --         ,[SupplierID]
  --         ,[SupplierName]
  --         ,[Country]
  --         ,[ThemedCollection]
  --         ,[Weight]
  --         ,[CostWithoutVAT]
  --         ,[CostCurrency]
  --         ,[TagPriceWithVAT]
  --         ,[TagPriceCurrency]
  --         ,[TagPriceExtra]
  --         ,[IsChecked]
  --         ,[CreatedDate]
  --         ,[LastModifiedDate]
  --         ,[CreatedByUserID]
  --         ,[LastModifiedByUserID]
		--) VALUES (
		--	@i
  --         ,@i
  --         ,@i
  --         ,'Model '+CAST(@i AS nvarchar(MAX))
  --         ,@i
  --         ,'Type '+CAST(@i AS nvarchar(MAX))
  --         ,@i
  --         ,'Size '+CAST(@i AS nvarchar(MAX))
  --         ,'Color '+CAST(@i AS nvarchar(MAX))
  --         ,'Женщина'
  --         ,@i
  --         ,'SupplierName '+CAST(@i AS nvarchar(MAX))
  --         ,'Россия'
  --         ,'ThemedCollection '+CAST(@i AS nvarchar(MAX))
  --         ,@i
  --         ,@i
  --         ,'CostCurrency '+CAST(@i AS nvarchar(MAX))
  --         ,@i
  --         ,'TagPriceCurrency '+CAST(@i AS nvarchar(MAX))
  --         ,@i
  --         ,1

		--	,@dt_now
		--	,@dt_now
		--	,15
		--	,15
		--) SET @i=@i+1


		--INSERT INTO [dbo].[DocumentStonesDetails] (
		--	[ProductID]
  --         ,[Stone]
  --         ,[Shape]
  --         ,[Size]
  --         ,[Color]
  --         ,[Clarity]
  --         ,[Quantity]
  --         ,[Weight]
  --         ,[Setting]
  --         ,[CreatedDate]
  --         ,[LastModifiedDate]
  --         ,[CreatedByUserID]
  --         ,[LastModifiedByUserID]
		--) VALUES (
		--	@i
		--	,@dt_now
		--	,@i
		--	,'Contract '+CAST(@i AS nvarchar(MAX))
		--	,1
		--	,@i

		--	,@dt_now
		--	,@dt_now
		--	,15
		--	,15
		--)
		--SET @i=@i+1
		--SELECT 1;
	--END

END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
	-- =============================================
	-- Author:		ShAl
	-- Create date: <Create Date,,>
	-- Description:	Create SQL linked server
	-- =============================================
	-- exec xps_AddLinkServSQL N'ServDA5', 5, 10, N'SERV72\\TAMUZ'
	-- =============================================
	CREATE PROCEDURE [dbo].[xps_AddLinkServSQL]
		@p_LinkName nvarchar(100), 						  -- Имя линка
		@p_QueryTimeout smallint=600,					  -- таймаут запроса
		@p_ConnectTimeoutQuery smallint=0,				  -- таймаут соединения
		@p_Datasrc nvarchar(128)=N'192.168.110.5,1433'	  -- адрес и порт сервера
	AS
	BEGIN

		SET NOCOUNT ON;

		declare @QueryTimeout varchar(3)=cast(@p_QueryTimeout as nvarchar(3))
		declare @ConnectTimeoutQuery varchar(3)=cast(@p_ConnectTimeoutQuery as nvarchar(3))

		if case when exists (select * from sys.servers s where s.[name]=@p_LinkName) then 1 else 0 end = 1 begin
			select 'The linked Server {' + @p_LinkName + '} already exists'
		end
		else begin
			BEGIN TRY 
				EXEC sp_addlinkedserver     
				   @server=@p_LinkName,   
				   @srvproduct=N'',      
				   @provider=N'SQLNCLI11', 
				   @datasrc=@p_Datasrc; 

				EXEC master.dbo.sp_serveroption @server = @p_LinkName, @optname=N'rpc', @optvalue=N'true';
				EXEC master.dbo.sp_serveroption @server = @p_LinkName, @optname=N'rpc out', @optvalue=N'true';
				EXEC master.dbo.sp_serveroption @server = @p_LinkName, @optname=N'remote proc transaction promotion', @optvalue=N'false'
				EXEC master.dbo.sp_serveroption @server = @p_LinkName, @optname=N'connect timeout', @optvalue=@ConnectTimeoutQuery
				EXEC master.dbo.sp_serveroption @server = @p_LinkName, @optname=N'query timeout', @optvalue=@QueryTimeout

				select 'ok'
			END TRY 
			BEGIN CATCH 
				select 'Attempting to create caused an error ' + @@ERROR
			END CATCH
		end
	END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		ShAl
-- Create date: 2019.10.25
-- Description:	script for creating trigger on set DtMod
-- =============================================
-- xps_build_TriggerUpdDtMod MetalPrices
-- =============================================
CREATE PROCEDURE [dbo].[xps_build_TriggerUpdDtMod] 
	@p_table_name nvarchar(128), -- название таблицы без схемы и квадратных скобок
	@p_table_schema nvarchar(50)='dbo'
AS
BEGIN

	SET NOCOUNT ON;

	declare @TableID int =isnull(OBJECT_ID (@p_table_schema+'.' + @p_table_name, N'U'),0)
	declare @StrTrUbd nvarchar(max)='' -- строка с инструкцией для создания триггера
	declare @ns char(1)=char(10) -- перенос строки 13
	Declare @TriggerName nvarchar(300)=CONCAT('TrInsUpd_',@p_table_name,'_SetDtMod')
	declare @column_name_identity  nvarchar(128) = null -- название параметра связанного с идентификатором записи
	declare @IsIdentity tinyint=0
	
	-- проверка существования заданной таблицы 
	IF  @TableID>0  
	begin -- таблица источник существует
		-- название колонки, которая является идентификатором --------------------------------------------------------
		select @column_name_identity = [name] 
		from [sys].[all_columns] 
		where [object_id] = @TableID and is_identity = 1 

		if @column_name_identity is not null 
			set @IsIdentity=1

		IF OBJECT_ID (@TriggerName, N'TR') IS NOT NULL 
		begin --trigger уже существует.' 
			select 'Внимание! trigger ' + @TriggerName + ' уже существует.' 
			return
		end
		else 
		begin --  можно создавать trigger
			if (select count(*) 
					from information_schema.columns i 
					where i.table_schema = @p_table_schema 
						and i.table_name = @p_table_name 
						and i.COLUMN_NAME = 'DtMod')=0 begin
				
				select 'Внимание! В таблице [' + @p_table_schema + '].[' + @p_table_name 
					+ '] нет поля DtMod. EXEC xps_AddColumnToTable ' + @p_table_name + ', ''DtMod'', ''Datetime'',''' + @p_table_schema + ''''
				return
			end
			else begin
				set @StrTrUbd =	'CREATE TRIGGER [' + @p_table_schema + '].[Tr_' + @p_table_name +'_SetDtMod]' + @ns +
							'   ON [' + @p_table_schema + '].[' + @p_table_name + ']'  + @ns +
							'   AFTER INSERT,UPDATE ' + @ns +
							'AS' + @ns +
							'BEGIN' + @ns +
							'	SET NOCOUNT ON;' + @ns + @ns +
							'	declare @DtMod datetime = getdate()' + @ns + @ns +
							'	Update [' + @p_table_schema + '].[' + @p_table_name + ']'  + @ns +
							'	set DtMod=@DtMod' + @ns +
							'	from [' + @p_table_schema + '].[' + @p_table_name + '] org ' + @ns +
							'		inner join inserted i on org.' + isnull(@column_name_identity, '[Not Found ID]') + '=i.' + 
							isnull(@column_name_identity,'[Not Found ID]')  + @ns +
							'END'

				if @IsIdentity=1 begin
					exec (@StrTrUbd)

				end
				else begin
					select '!!! In Table ' + @p_table_name + ' is not IDENTITY!'
				end

				select @StrTrUbd
			end
		end
	end
	Else begin
		select '!!! Table [' + @p_table_schema + '].[' + @p_table_name + '] Not Exists.'
	end
	
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author: ShAl
-- Create date: 
-- Description: Автоматическое формирование скрипта хранимой процедуры на сохранение записи заданной таблицы/
--	Вместо парамметров @p_CreatedDate @p_LastModifiedDate используется getdate().
--	Вместо @p_CreatedByUserID и @p_LastModifiedByUserID вводится параметр @p_AddUserID
-- =============================================
-- xps_build2_SaveXP 'Vendor'
-- =============================================
CREATE PROCEDURE [dbo].[xps_build2_SaveXP]
	@p_table_name varchar(50),
	@p_table_schema varchar(50)='dbo',
	@p_NameXP varchar(100)=''


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @StrXp nvarchar(max)=''

	declare @ns char(1)=char(10) -- перенос строки 
	declare @int_OBJECT_ID_table int=0
	declare @TableStructure nvarchar(max)='' -- справочная информация по всем полям таблицы
	declare @TablePrim nvarchar(max)=''      -- примечание к таблице
	declare @column_name_identity nvarchar(128)='' -- название колонки с идентификаторами записей
	declare @p_column_name_identity  nvarchar(128) = '' -- название параметра связанного с идентификатором записи
	declare @SpisPar nvarchar(max)='**	@p_AddUserID int' -- список входных параметров процедуры
	declare @SpisParOtl nvarchar(max)=' p_AddUserID' -- строка для подстановки значений при отладке
	declare @InsertColumnName nvarchar(max)='' -- список полей для вставки в инструкции insert 
	declare @InsertValues nvarchar(max)='' -- список значений в инструкции insert 
	declare @UpdateColumn nvarchar(max)='' -- список обновляемых полей и значений
	declare @razd varchar(100)='-- ============================================='
	declare @k char(1)=''''
	declare @strErr varchar(1000)='				set  @StrErr =''ERROR_NUMBER='' + isnull(convert(nvarchar(max), ERROR_NUMBER()),''-'') + '' '' + 
								''ERROR_SEVERITY='' + isnull(convert(nvarchar(max), ERROR_SEVERITY()),''-'') +  '' '' +
								''ERROR_STATE='' + isnull(convert(nvarchar(max), ERROR_STATE()),''-'') +  '' '' + 
								''ERROR_PROCEDURE='' + isnull(convert(nvarchar(max), ERROR_PROCEDURE()),''-'') +  '' '' + 
								''ERROR_LINE='' + isnull(convert(nvarchar(max), ERROR_LINE()),''-'') +  '' '' +
								''ERROR_MESSAGE='' + isnull(convert(nvarchar(max), ERROR_MESSAGE()),''-'')'

	declare @tv_Col 
		table (npp int identity, 
			   column_name nvarchar(128),
			   data_type nvarchar(128),
			   CHARACTER_MAXIMUM_LENGTH varchar(10),
			   is_identity bit,
			   ORDINAL_POSITION int,
			   prim varchar(200))

	if left(@p_table_name, 4)='dbo.' begin
		set @p_table_schema='dbo'
		set @p_table_name=right(@p_table_name, len(@p_table_name)-4)
	end
	else if left(@p_table_name, 6)='[dbo].'  begin
		set @p_table_schema='dbo'
		set @p_table_name=right(@p_table_name,len(@p_table_name)-6)
	end

	set @p_table_name = REPLACE(@p_table_name, '[','')
	set @p_table_name = REPLACE(@p_table_name, ']','')

	-- проверка существования заданной таблицы --IF OBJECT_ID (N'dbo.TableName', N'U') IS NOT NULL 
	IF OBJECT_ID (@p_table_schema+'.' + @p_table_name, N'U') IS NOT NULL  
	begin -- объект с таким именем в базе существует

		-- идентификатор таблицы
		select @int_OBJECT_ID_table = OBJECT_ID (@p_table_schema+'.' + @p_table_name, N'U') 
		--select @int_OBJECT_ID_table

		set @TablePrim=isnull((select convert(varchar(300),value) from sys.extended_properties where major_id=@int_OBJECT_ID_table and name ='prim'),'')

		if @p_NameXP=''
			set @p_NameXP='xp_Save' + case when  left(@p_table_name,3)='' then SUBSTRING(@p_table_name, 4, len(@p_table_name)-3) else @p_table_name end   

		-- название колонки, которая является идентификатором --------------------------------------------------------
		select @column_name_identity = [name] 
		from [sys].[all_columns] 
		where [object_id] = @int_OBJECT_ID_table and is_identity = 1

		/*  -- методы получения информации по свойствам таблицы
		--- информация о таблице
		sp_help 'название таблицы' 

		-- все примечания к всем объектам
		select * from sys.extended_properties 

		-- описание всех столбцов заданной таблицы
		SELECT * FROM fn_listextendedproperty (NULL, 'schema', '[название схема]', 'table', '[название таблицы]', 'column', NULL)

		-- описание заданного столбца заданной таблицы
		SELECT * FROM fn_listextendedproperty (NULL, 'schema', '[название схема]', 'table', '[название таблицы]', 'column', '[название колонки]')

		select object_name(c.object_id) as table_name, c.name as col_name, l.value
		from sys.columns c 
			inner join sys.objects o 
				on c.object_id = o.object_id 
			cross apply 
				fn_listextendedproperty (NULL, 'schema', schema_name(o.schema_id), 'table', object_name(c.object_id), 'column', c.name) l
		*/
		
		if len(@column_name_identity)>0 begin
			set @p_column_name_identity='@p_' + @column_name_identity

			-- запоминаем структуру таблицы  --------------------------------------------------------------------------------------------
			-- список всех полей и их свойств 
			insert into @tv_Col (column_name, data_type, CHARACTER_MAXIMUM_LENGTH, is_identity, ORDINAL_POSITION, prim)
			select --*-- column_name, data_type, ordinal_position
				i.[COLUMN_NAME],
				i.[DATA_TYPE],
				case 
					when i.CHARACTER_MAXIMUM_LENGTH is null then '' 
					when i.CHARACTER_MAXIMUM_LENGTH=-1 then 'max' 
					else convert(varchar(10), i.CHARACTER_MAXIMUM_LENGTH)
				end as CHARACTER_MAXIMUM_LENGTH,
				case when i.[COLUMN_NAME]=@column_name_identity then 1 else 0 end as is_identity,
				i.ORDINAL_POSITION,
				convert(varchar,isnull(prim.[value],'')) as prim
			from information_schema.columns i
				left join (SELECT [objname], [value] FROM fn_listextendedproperty (NULL, 'schema', @p_table_schema, 'table', @p_table_name, 'column', NULL)) prim
					on i.[COLUMN_NAME]=prim.[objname] collate Cyrillic_General_CI_AS 
			where table_schema = @p_table_schema
					and table_name = @p_table_name
			order by is_identity desc, [ORDINAL_POSITION] 

			-- справочная строка с описанием всех полей для размещении в создаваемой XP ------------------------------------
			select 
				@TableStructure=@TableStructure + @ns + '--	' 
					+ convert(varchar(10),ORDINAL_POSITION) + case when ORDINAL_POSITION <10 then ' ' else '' end
					+ '	[' + column_name + '] ' + data_type 
					+ case when CHARACTER_MAXIMUM_LENGTH ='' then '' 
						else '(' + CHARACTER_MAXIMUM_LENGTH + ')' end +
					+ case when len(prim)>0 then ' -------------------- ' + prim else '' end
			from @tv_Col

			-- set @TableStructure= substring(@TableStructure,2, len(@TableStructure)-1)
			set @TableStructure = '/*   структура таблицы [' + @p_table_schema+'].[' + @p_table_name +'] :' + @TablePrim + @TableStructure + @ns + '*/' + @ns

			-- перечень входных парамметров ---------------------------------------------------------------------------------
			select 
				@SpisPar=@SpisPar + ',' + @ns + '	@p_' + column_name + ' ' + data_type 
					+ case when CHARACTER_MAXIMUM_LENGTH ='' then ''
					else '(' + CHARACTER_MAXIMUM_LENGTH + ')' end 
					+ case when is_identity = 0 then ' = null' else '' end,
				@SpisParOtl=@SpisParOtl + ', p_' + column_name 
			from @tv_Col
			where column_name not in ('CreatedDate','LastModifiedDate','CreatedByUserID','LastModifiedByUserID')
		
			set @SpisPar= substring(@SpisPar,3, len(@SpisPar)-2)

			-- перечень полей и значений на вставку при insert ---------------------------------------------------------------
			select
				@InsertColumnName = @InsertColumnName + ',' + @ns + '					[' + column_name + ']',
				@InsertValues = @InsertValues + ',' + @ns + 
					case 
						when column_name in ('CreatedDate','LastModifiedDate') then '					@dt_now'
						when column_name in ('CreatedByUserID','LastModifiedByUserID') then '					@p_AddUserID' 
						else '					@p_' + column_name 
					end
			from @tv_Col
			where is_identity=0

			-- перечень полей и значений на вставку при update ---------------------------------------------------------------
			select
				@UpdateColumn = @UpdateColumn + ',' + @ns +'					[' + column_name + ']=' 
					+ case 
						when column_name = 'LastModifiedDate' then '@dt_now' 
						when column_name = 'LastModifiedByUserID' then '@p_AddUserID' 
						else '@p_' + column_name 
					  end
			from @tv_Col
			where is_identity=0 and column_name not in ('CreatedDate','CreatedByUserID')
		
			set @InsertColumnName= substring(@InsertColumnName,2, len(@InsertColumnName)-1)
			set @InsertValues= substring(@InsertValues,2, len(@InsertValues)-1)
			set @UpdateColumn= substring(@UpdateColumn,2, len(@UpdateColumn)-1)
		
			---select @UpdateColumn

			-- склейка
			set @StrXp=
				'SET ANSI_NULLS ON' + @ns + 
				'GO' + @ns + 
				'SET QUOTED_IDENTIFIER ON' + @ns + 
				'GO' + @ns + 
				@razd + @ns + 
				'-- Author:      ' + SUSER_SNAME() + @ns +
				'-- Create date: ' + convert(varchar(16),getdate(),121) + @ns +  
				'-- Description: Добавление/обновление/удаление записи в таблице ' +@p_table_schema+'.' + @p_table_name  +  @ns +
				@razd + @ns + 
				'-- ' + @p_NameXP + ' ' + substring(@SpisParOtl,2, len(@UpdateColumn)-1) + @ns + 
				@razd + @ns +
				'CREATE PROCEDURE ' + @p_table_schema + '.' + @p_NameXP	+ @ns + @SpisPar + @ns +
				'	,@p_ShowRes bit = 1 ' + @ns +
				'AS' + @ns +
				'BEGIN' + @ns +
				'	SET NOCOUNT ON' + @ns + @ns + @TableStructure + @ns + 
				'	Declare @res int=0' + @ns +
				'	Declare @StrErr nvarchar(max)' + @ns +
				'	Declare @dt_now datetime=getdate()' + @ns + @ns +
				'	if ' + @p_column_name_identity + '=0 begin' +  @ns +
				'		BEGIN TRANSACTION tr_insert' +  @ns +
				'			BEGIN TRY' +  @ns +
				'				Insert into [' +@p_table_schema+'].[' + @p_table_name + '] (' + @InsertColumnName + ')' + @ns +
				'				values (' + @InsertValues + ')' + @ns + @ns +
				'				set @res=SCOPE_IDENTITY()' +  @ns +
				'			END TRY ' +  @ns +
				'			BEGIN CATCH   ' +  @ns 
				+ @strErr +  @ns +
				'				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  ' +  @ns +
				'				IF @@TRANCOUNT > 0 ' +  @ns +
				'				begin' +  @ns +
				'					ROLLBACK TRANSACTION;' +  @ns +
				'					set @res=0;' +  @ns +
				'				end' +  @ns +
				'			END CATCH; ' +  @ns +
				'			IF @@TRANCOUNT > 0 ' +  @ns +
				'				COMMIT TRANSACTION tr_insert; ' +  @ns +  @ns +
				'	end' +  @ns +
				'	else if  ' + @p_column_name_identity + '>0 begin' +  @ns +
				'		begin tran tr_update' +  @ns +
				'			BEGIN TRY' +  @ns +
				'				Update [' + @p_table_schema+'].[' + @p_table_name + ']' + @ns +
				'				set ' + @UpdateColumn + @ns +
				'				where ' + @column_name_identity + ' = ' + @p_column_name_identity + @ns + @ns +
				'				set @res = case when @@rowcount=1 then ' + @p_column_name_identity + ' else 0 end' + @ns +
				'			END TRY ' +  @ns +
				'			BEGIN CATCH   ' +  @ns 
				+ @strErr +  @ns +
				'				exec dbo.xp_SaveLogErr @p_AddUserID, @StrErr  ' +  @ns +
				'				IF @@TRANCOUNT > 0 ' +  @ns +
				'				begin' +  @ns +
				'					ROLLBACK TRANSACTION;' +  @ns +
				'					set @res=0;' +  @ns +
				'				end' +  @ns +
				'			END CATCH; ' +  @ns +
				'			IF @@TRANCOUNT > 0 ' +  @ns +
				'				COMMIT TRANSACTION tr_update; ' +  @ns +  @ns +
				'	end' +  @ns +
				'	else if  ' + @p_column_name_identity + '<0 begin' +  @ns +
				'		begin tran tr_delete' +  @ns +
				'			delete from [' + @p_table_schema+'].[' + @p_table_name +']' + @ns +
				'			where ' + @column_name_identity + '= -' + @p_column_name_identity + @ns + @ns +
				'			set @res = @@rowcount ' + @ns +
				'		commit tran tr_delete' +  @ns +
				'	end' +  @ns +
				'	if @p_ShowRes = 1 select @res  as res' +  @ns +
				'END' +  @ns
		end
		else begin
			set @StrXp='В выбранной таблице нет identity поля'
		end
	end
	else begin -- объект не найден
		set @StrXp='Указанная таблица не существует.'
	end
	
	select @StrXp -- @SpisPar
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE xps_LogStructDB

AS
BEGIN

--USE JDB_POS
--GO

--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TABLE [srv].[ddl_log](
--    [DDL_Log_GUID] [uniqueidentifier] NOT NULL,
--    [PostTime] [datetime] NOT NULL,
--    [DB_Login] [nvarchar](255) NULL,
--    [DB_User] [nvarchar](255) NULL,
--    [Event] [nvarchar](255) NULL,
--    [TSQL] [nvarchar](max) NULL,
-- CONSTRAINT [PK_ddl_log] PRIMARY KEY CLUSTERED 
--(
--    [DDL_Log_GUID] ASC
--)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
--) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

--GO

--ALTER TABLE [srv].[ddl_log] ADD  CONSTRAINT [DF_ddl_log_DDL_Log_GUID]  DEFAULT (newid()) FOR [DDL_Log_GUID]
--GO

--USE JDB_POS
--GO

--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TABLE [srv].[ddl_log_all](
--    [DDL_Log_GUID] [uniqueidentifier] NOT NULL,
--    [Server_Name] [nvarchar](255) NOT NULL,
--    [DB_Name] [nvarchar](255) NOT NULL,
--    [PostTime] [datetime] NOT NULL,
--    [DB_Login] [nvarchar](255) NULL,
--    [DB_User] [nvarchar](255) NULL,
--    [Event] [nvarchar](255) NULL,
--    [TSQL] [nvarchar](max) NULL,
--    [InsertUTCDate] [datetime] NOT NULL,
-- CONSTRAINT [PK_ddl_log_all] PRIMARY KEY CLUSTERED 
--(
--    [DDL_Log_GUID] ASC
--)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
--) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

--GO

--ALTER TABLE [srv].[ddl_log_all] ADD  CONSTRAINT [DF_ddl_log_all_DDL_Log_GUID]  DEFAULT (newid()) FOR [DDL_Log_GUID]
--GO

--ALTER TABLE [srv].[ddl_log_all] ADD  CONSTRAINT [DF_ddl_log_all_InsertUTCDate]  DEFAULT (getutcdate()) FOR [InsertUTCDate]
--GO

--USE JDB_POS
--GO

--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TRIGGER [SchemaLog] 
--ON DATABASE --ALL SERVER 
--FOR DDL_DATABASE_LEVEL_EVENTS 
--AS
--    SET NOCOUNT ON;
--    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
--    DECLARE @data XML
--    begin try
--    if(CURRENT_USER<>'NT AUTHORITY\NETWORK SERVICE' and SYSTEM_USER<>'NT AUTHORITY\NETWORK SERVICE')
--    begin
--        SET @data = EVENTDATA();
--        INSERT srv.ddl_log(
--                    PostTime,
--                    DB_Login,
--                    DB_User,
--                    Event,
--                    TSQL
--                  ) 
--        select 
--                    GETUTCDATE(),
--                    CONVERT(nvarchar(255), SYSTEM_USER),
--                    CONVERT(nvarchar(255), CURRENT_USER), 
--                    @data.value('(/EVENT_INSTANCE/EventType)[1]', 'nvarchar(255)'), 
--                    @data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'nvarchar(max)')
--        where       @data.value('(/EVENT_INSTANCE/EventType)[1]', 'nvarchar(255)') not in('UPDATE_STATISTICS', 'ALTER_INDEX')
--                and @data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'nvarchar(max)') not like '%Msmerge%'; --не нужно следить за изменения объектов репликации
--    end
--    end try
--    begin catch
--    end catch

--GO

--SET ANSI_NULLS OFF
--GO

--SET QUOTED_IDENTIFIER OFF
--GO

--ENABLE TRIGGER [SchemaLog] ON DATABASE
--GO
	
	select 1


END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	показывает блокировки
-- =============================================
CREATE PROCEDURE xps_ShowBlock
	@p_TableName nvarchar(128)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT
		 db_name(tl.resource_database_id) AS DB_Name,
		 object_name(p.object_id) AS TableName,
		 si.index_id AS IndexID,
		 si.name AS IndexName,
		 tl.resource_type AS ResourceType,
		 tl.request_mode AS RequestMode,
		 tl.request_type AS RequestType,
		 tl.request_status AS RequestStatus,
		 tl.request_session_id AS RequestSessionID,
		 tl.resource_description AS ResourceDescription
	FROM sys.dm_tran_locks AS tl 
		left join sys.partitions AS p
			ON p.hobt_id = tl.resource_associated_entity_id
		left join sys.indexes AS si
			ON p.object_id = si.object_id
				and p.index_id = si.index_id
	WHERE 
		tl.resource_database_id = DB_ID(DB_NAME()) /* Condition by DB */
			and (@p_TableName='' or p.object_id = object_id(@p_TableName)) /* Condition by table */
	ORDER BY
		tl.request_session_id,
		si.index_id
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[xps_StructTblToVChar]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	declare @tAllTbl table (npp int identity, Name varchar(200), TableId int, CreateDt datetime, ModifyDt datetime)
	declare @tAllCol table (npp int identity, 
							TablNpp int, 
							TableName varchar(200), 
							TableId int,
							CreateDt datetime,
							ModifyDt datetime,
							ORDINAL_POSITION int,
							column_name nvarchar(128),
							data_type nvarchar(128),
							MaxLen varchar(10),
							is_identity bit,
							prim varchar(200))

	insert into @tAllTbl (Name, TableId, CreateDt, ModifyDt)
	select 
		t.name,
		t.object_id,
		t.create_date,
		t.modify_date
	from sys.tables t

	insert into @tAllCol 
	select 
		t.npp,
		t.Name,
		t.TableId,
		t.CreateDt,
		t.ModifyDt,
		c.ORDINAL_POSITION,
		c.column_name,
		c.data_type,
		c.CHARACTER_MAXIMUM_LENGTH,
		c.is_identity,
		c.prim
	from @tAllTbl t
		outer apply [dbo].[tf_GetTableStructure](t.TableId,'','') c
	order by t.TableId, c.column_name

	declare @V nvarchar(max)=''
	declare @r nvarchar='`'
	select @V=@V+ 
		convert(nvarchar, npp) + @r +
		convert(nvarchar, TablNpp) + @r +
		TableName + @r +
		convert(nvarchar, TableId) + @r +
		convert(nvarchar, CreateDt) + @r +
		convert(nvarchar, ModifyDt) + @r +
		convert(nvarchar, ORDINAL_POSITION) + @r +
		column_name + @r +
		data_type + @r +
		MaxLen + @r +
		convert(nvarchar,is_identity) + @r +
		prim + @r
	from @tAllCol
	order by npp

	--select * from @tAllCol

	select len(@V), @V

	select 
		convert(int, t.Val1) as npp,
		t.Val2 as TablNpp,
		t.Val3 as TableName,
		t.Val4 as TableId,
		t.Val5 as CreateDt,
		t.Val6 as ModifyDt,
		t.Val7 as ORDINAL_POSITION,
		t.Val8 as column_name,
		t.Val9 as data_type,
		t.Val10 as MaxLen,
		t.Val11 as is_identity,
		t.Val12 as prim
	from dbo.[tf_ParserNVCharToTblNVChar](12, @V) t
	order by 1
END
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		Yuri Grushovskiy
-- Create date: 2014-11-19
-- Description:	Convert char(8) to German format
-- Input: YYYYMMDD
-- Output: DD.MM.YYYY
-- =============================================
CREATE FUNCTION [dbo].[ConvertCharDate2Rus]
(
	@charDate char(14)
)
RETURNS char(23)
AS
BEGIN
	declare @res char(23);
	
	if (@charDate is null)
		set @res = null;
	else
	BEGIN
		set @res = substring(@charDate, 1,4) +'-'+ substring(@charDate, 5,2) + '-' + substring(@charDate, 7,2) + ' ' + substring(@charDate, 9,2) + ':' + substring(@charDate, 11,2) + ':' + substring(@charDate, 13,2) + '.000'
	END

	RETURN @res;

END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	форматирование даты до заданного формата
-- select dbo.sf_D_to_STR(GETDATE(),'-')
-- =============================================
create FUNCTION [dbo].[sf_D_to_STR]
(
	@DT DATE,
	@x as char(1)
)
RETURNS VARCHAR(16)
AS
BEGIN
    DECLARE @dt_str VARCHAR(25)
   
    
    IF @DT IS NULL 
		set @dt_str=''
    ELSE BEGIN    
		set @dt_str= convert (char(16) , @DT, 121)
		SET @dt_str=SUBSTRING(@dt_str,9,2) + 
				@x + SUBSTRING(@dt_str,6,2)+ 
				@x + SUBSTRING(@dt_str,1,4)
    END
    
    RETURN @dt_str
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	форматирование даты до заданного формата
-- select dbo.sf_DT_to_STR(GETDATE(),'-','s')
-- =============================================
Create FUNCTION [dbo].[sf_DT_to_STR]
(
	@DT DATETIME,
	@x as char(1),
	@ShowTime char(1)
)
RETURNS VARCHAR(20)
AS
BEGIN
    DECLARE @dt_str VARCHAR(25)
    declare @time varchar(8)
    
    
    IF @DT IS NULL 
		set @dt_str=''
    ELSE BEGIN    
		set @time=convert(time,@DT)
		set @dt_str= convert (char(16) , @DT, 121)
		SET @dt_str=SUBSTRING(@dt_str,9,2) + 
				@x + SUBSTRING(@dt_str,6,2)+ 
				@x + SUBSTRING(@dt_str,1,4)
				
		if	@ShowTime='s' 
			set @dt_str=@dt_str + ' ' + @time
		else if @ShowTime='m' 
			set @dt_str=@dt_str + ' ' + left(@time,5)
		else if @ShowTime='h' 
			set @dt_str=@dt_str + ' ' + left(@time,2) + 'h'				
    END
    
    RETURN @dt_str
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create FUNCTION [dbo].[tf_GetTableStructure]
(
	@p_TableID int,
	@SchemaName nvarchar(255), -- название схемы
	@TableName nvarchar(255)    -- название таблицы
)
RETURNS 
@RetTabletable table
(
	--npp int identity, 
	ORDINAL_POSITION int,
	column_name nvarchar(128),
	data_type nvarchar(128),
	CHARACTER_MAXIMUM_LENGTH varchar(10),
	is_identity bit,			   
	prim varchar(200)
)

AS
BEGIN

	declare @column_name_identity nvarchar(128)='' -- название колонки с идентификаторами записей

	if @p_TableID=0 begin
		select 
			@p_TableID=t.object_id
		from sys.tables t 
			inner join sys.schemas s on t.schema_id=s.schema_id
		where t.name=@TableName and s.name=@SchemaName
	end
	else begin
		select 
			@TableName=t.name,
			@SchemaName=s.name
		from sys.tables t 
			inner join sys.schemas s on t.schema_id=s.schema_id
		where t.object_id=@p_TableID
	end

	-- название колонки, которая является идентификатором --------------------------------------------------------
	select @column_name_identity = [name] 
	from [sys].[all_columns] 
	where [object_id] = @p_TableID and is_identity = 1

	/*
	ORDINAL_POSITION int,
	column_name nvarchar(128),
	data_type nvarchar(128),
	CHARACTER_MAXIMUM_LENGTH varchar(10),
	is_identity bit,			   
	prim varchar(200)
	*/

	insert into @RetTabletable (ORDINAL_POSITION, column_name, data_type, prim, CHARACTER_MAXIMUM_LENGTH, is_identity)
	select
		ORDINAL_POSITION,
		[COLUMN_NAME],
		[DATA_TYPE],
		prim,
		CHARACTER_MAXIMUM_LENGTH,
		is_identity
		--,[COLUMN_NAME] + ' ' + [DATA_TYPE] + 
		--		case when len(CHARACTER_MAXIMUM_LENGTH)>0 then '(' + CHARACTER_MAXIMUM_LENGTH + ')' else '' end + 
		--		case when is_identity=1 then '=идентификатор' else '' end + 
		--		case when len(prim)>0 then '-------' + prim + '-------' else '' end as AllInStr
	from (
	select --*-- column_name, data_type, ordinal_position
		i.[COLUMN_NAME],
		i.[DATA_TYPE],
		case 
			when i.CHARACTER_MAXIMUM_LENGTH is null then '' 
			when i.CHARACTER_MAXIMUM_LENGTH=-1 then 'max' 
			else convert(varchar(10), i.CHARACTER_MAXIMUM_LENGTH)
		end as CHARACTER_MAXIMUM_LENGTH,
		case when i.[COLUMN_NAME]=@column_name_identity then 1 else 0 end as is_identity,
		i.ORDINAL_POSITION,
		convert(varchar,isnull(prim.[value],'')) as prim
	from information_schema.columns i
		left join (SELECT [objname], [value] FROM fn_listextendedproperty (NULL, 'schema', @SchemaName, 'table', @TableName, 'column', NULL)) prim
			on i.[COLUMN_NAME]=prim.[objname] collate Cyrillic_General_CI_AS 
	where i.TABLE_SCHEMA = @SchemaName and i.table_name = @TableName) Z
	order by is_identity desc, [ORDINAL_POSITION] 
	
	RETURN 
END

 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:          <ShAl>
-- Create date: 
-- Description:     возвращает таблицу int значений 
-- =============================================
-- select * from dbo.tf_npp(1,5) 
-- =============================================
create FUNCTION [dbo].[tf_npp]
(		
	@p_start int,
	@p_end int	
)
RETURNS 
@IntVal TABLE 
(
       SerialNumber int identity(1,1), -- порядковый номер значения
       IntVal int                                     -- значение
)
AS
BEGIN

       declare @i int=@p_start

       while @i<=@p_end begin  -- 
			insert into @IntVal (IntVal) VALUES (@i)
            set @i=@i+1
       end
       RETURN 
END





 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<AlSh>
-- Create date: 14.01.2019
-- Description:  из строки nvarchar(max) значений с разделителем возвращает таблицу из n (1-15) колонок nvarchar(max)
-- =============================================
-- select * from dbo.[tf_ParserNVCharToTblNVChar](15, '1,2,3,4,5,7,6,8,9,10,11,12,13,14,15,')
-- =============================================
CREATE FUNCTION [dbo].[tf_ParserNVCharToTblNVChar]
(
	@QtyCol int, -- количество колонок в результирующем наборе
	@StrVal nvarchar(max) -- строка значений в бинарном виде
)
RETURNS 
@NVChar TABLE 
(
	SerialNumber int identity(1,1), -- порядковый номер значения
	Val1 nvarchar(max),
	Val2 nvarchar(max),
	Val3 nvarchar(max),
	Val4 nvarchar(max),
	Val5 nvarchar(max),
	Val6 nvarchar(max),
	Val7 nvarchar(max),
	Val8 nvarchar(max),
	Val9 nvarchar(max),
	Val10 nvarchar(max),
	Val11 nvarchar(max),
	Val12 nvarchar(max),
	Val13 nvarchar(max),
	Val14 nvarchar(max),
	Val15 nvarchar(max)
)
AS
BEGIN

	declare @LenVal int=Len(@StrVal) -- длина строки значений
	Declare @InsVal nvarchar(255)
	declare @i int=1
	declare @s int=1
	declare @Separator nvarchar(2)=right(@StrVal,1) 

	declare @Val0 nvarchar(max)=null 
	declare @Val1 nvarchar(max)=null
	declare @Val2 nvarchar(max)=null 
	declare @Val3 nvarchar(max)=null
	declare @Val4 nvarchar(max)=null 
	declare @Val5 nvarchar(max)=null
	declare @Val6 nvarchar(max)=null 
	declare @Val7 nvarchar(max)=null
	declare @Val8 nvarchar(max)=null
	declare @Val9 nvarchar(max)=null
	declare @Val10 nvarchar(max)=null 
	declare @Val11 nvarchar(max)=null
	declare @Val12 nvarchar(max)=null
	declare @Val13 nvarchar(max)=null
	declare @Val14 nvarchar(max)=null

	--declare @f float =5
	--declare @DecimalSeparator char(1)=substring(convert(char(10),@f/2),2,1) 
	

	if @QtyCol=1 begin		
		while @i<=@LenVal begin -- просмартиваем посимвольно строку значений в поиске разделителей
			if SUBSTRING(@StrVal, @i, 1) = @Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1)
					values (@Val0)
					set @Val0=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=2 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1) = @Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2)
					values (@Val0, @Val1)

					select @Val0=null, @Val1=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=3 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1 

					insert into @NVChar (Val1, Val2, Val3)
					values (@Val0, @Val1, @Val2)

					select @Val0=null, @Val1=null,@Val2=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=4 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2, Val3, Val4)
					values (@Val0, @Val1, @Val2, @Val3)

					select @Val0=null, @Val1=null,@Val2=null,@Val3=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=5 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2, Val3, Val4, Val5)
					values (@Val0, @Val1, @Val2, @Val3, @Val4)

					select @Val0=null, @Val1=null,@Val2=null,@Val3=null,@Val4=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=6 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5)

					select @Val0=null, @Val1=null,@Val2=null,@Val3=null,@Val4=null,@Val5=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=7 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, @Val6=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=8 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, @Val6=null, @Val7=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=9 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, @Val6=null, @Val7=null, @Val8=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=10 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val9 is null begin
					set @Val9=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9, Val10)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8, @Val9)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, @Val6=null, @Val7=null, @Val8=null, @Val9=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=11 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val9 is null begin
					set @Val9=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val10 is null begin
					set @Val10=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9, Val10, Val11)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8, @Val9, @Val10)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, @Val6=null, @Val7=null, @Val8=null, @Val9=null, @Val10=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=12 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val9 is null begin
					set @Val9=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val10 is null begin
					set @Val10=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val11 is null begin
					set @Val11=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9, Val10, Val11, Val12)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8, @Val9, @Val10, @Val11)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, 
						@Val6=null, @Val7=null, @Val8=null, @Val9=null, @Val10=null, @Val11=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=13 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val9 is null begin
					set @Val9=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val10 is null begin
					set @Val10=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val11 is null begin
					set @Val11=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val12 is null begin
					set @Val12=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9, Val10, Val11, Val12, Val13)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8, @Val9, @Val10, @Val11, @Val12)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, 
						@Val6=null, @Val7=null, @Val8=null, @Val9=null, @Val10=null, @Val11=null, @Val12=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=14 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val9 is null begin
					set @Val9=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val10 is null begin
					set @Val10=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val11 is null begin
					set @Val11=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val12 is null begin
					set @Val12=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end


				else if @Val13 is null begin
					set @Val13=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9, Val10, Val11, Val12, Val13, Val14)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8, @Val9, @Val10, @Val11, @Val12, @Val13)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, 
						@Val6=null, @Val7=null, @Val8=null, @Val9=null, @Val10=null, @Val11=null, @Val12=null, @Val13=null
				end
			end
			set @i=@i+1
		end
	end
	else if @QtyCol=15 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val9 is null begin
					set @Val9=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val10 is null begin
					set @Val10=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val11 is null begin
					set @Val11=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val12 is null begin
					set @Val12=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val13 is null begin
					set @Val13=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val14 is null begin
					set @Val14=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9, Val10, Val11, Val12, Val13, Val14, Val15)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8, @Val9, @Val10, @Val11, @Val12, @Val13, @Val14)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, 
						@Val6=null, @Val7=null, @Val8=null, @Val9=null, @Val10=null, @Val11=null, @Val12=null, @Val13=null, @Val14=null
				end
			end
			set @i=@i+1
		end
	end
	RETURN 
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<AlSh>
-- Create date: 14.01.2019
-- Description:  из строки nvarchar(max) значений с разделителем возвращает таблицу из n (1-15) колонок nvarchar(max)
-- =============================================
-- select * from dbo.[tf_ParserStrTo10Varchar150](10, '1,2,3,4,5,7,6,8,9,10,')
-- =============================================
CREATE FUNCTION [dbo].[tf_ParserStrTo10Varchar150]
(
	@QtyCol int, -- количество колонок в результирующем наборе
	@StrVal nvarchar(max) -- строка значений в бинарном виде
)
RETURNS 
@NVChar TABLE 
(
	SerialNumber int identity(1,1), -- порядковый номер значения
	Val1 nvarchar(max),
	Val2 nvarchar(max),
	Val3 nvarchar(max),
	Val4 nvarchar(max),
	Val5 nvarchar(max),
	Val6 nvarchar(max),
	Val7 nvarchar(max),
	Val8 nvarchar(max),
	Val9 nvarchar(max),
	Val10 nvarchar(max)
)
AS
BEGIN

	declare @LenVal int=Len(@StrVal) -- длина строки значений
	Declare @InsVal nvarchar(255)
	declare @i int=1
	declare @s int=1
	declare @Separator nvarchar(2)=right(@StrVal,1) 

	declare @Val0 nvarchar(max)=null 
	declare @Val1 nvarchar(max)=null
	declare @Val2 nvarchar(max)=null 
	declare @Val3 nvarchar(max)=null
	declare @Val4 nvarchar(max)=null 
	declare @Val5 nvarchar(max)=null
	declare @Val6 nvarchar(max)=null 
	declare @Val7 nvarchar(max)=null
	declare @Val8 nvarchar(max)=null
	declare @Val9 nvarchar(max)=null
	declare @Val10 nvarchar(max)=null 

	--declare @f float =5
	--declare @DecimalSeparator char(1)=substring(convert(char(10),@f/2),2,1) 
	
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1)=@Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val2 is null begin
					set @Val2=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val3 is null begin
					set @Val3=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val4 is null begin
					set @Val4=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val5 is null begin
					set @Val5=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val6 is null begin
					set @Val6=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val7 is null begin
					set @Val7=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val8 is null begin
					set @Val8=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end				
				else if @Val9 is null begin
					set @Val9=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
					insert into @NVChar (Val1, Val2, Val3, Val4, Val5, Val6, Val7, Val8, Val9, Val10)
					values (@Val0, @Val1, @Val2, @Val3, @Val4, @Val5, @Val6, @Val7, @Val8, @Val9)

					select @Val0=null, @Val1=null, @Val2=null, @Val3=null, @Val4=null, @Val5=null, @Val6=null, @Val7=null, @Val8=null, @Val9=null
				end
			end
			set @i=@i+1
		end
	

	RETURN 
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO


-- =============================================
-- select * from dbo.tf_ParserStrTo1Varchar150('int|CompanyID|int|NodeID|smallint|RoleID','|')
-- select * from dbo.tf_ParserStrTo1Varchar150('922337203685478|')
-- =============================================
CREATE FUNCTION [dbo].[tf_ParserStrTo1Varchar150]
(
	@StrVal varchar(max),      -- строка значений
	@SeparatorCharacte char(1) -- разделитель
)
RETURNS 
@TblStrVal TABLE 
(
	SerialNumber int identity(1,1), -- порядковый номер значения
	Val1 varchar(MAX)
)
AS
BEGIN

	declare @LenStrVal int=0
	declare @i int=0
	declare @s int=1

	declare @Val1 varchar(MAX)=''
	
	set @StrVal=rtrim(@StrVal) 
	set @LenStrVal=len(@StrVal) -- длина строки значений

	-- проверка на существование разделителя в конце строки
	if RIGHT(@StrVal,1)!=@SeparatorCharacte begin
		set @StrVal=@StrVal+@SeparatorCharacte -- добавили разделитель в конец строки
		set @LenStrVal=@LenStrVal+1
	end

	-- просмартиваем посимвольно строку значений в поиске разделителей
	while @i<=@LenStrVal begin  -- 
		if SUBSTRING(@StrVal,@i,1)=@SeparatorCharacte begin -- попали на разделитель

			if len(@Val1)=0 begin
				set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
				set @s=@i+1

				insert into @TblStrVal (Val1)
				select @Val1
				set @Val1=''				 
			end
		end
		set @i=@i+1
	end	
	RETURN 
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

-- =============================================
-- Author:		<AlSh>
-- Create date: 14.01.2019
-- Description:  из бинарной строки значений с разделителем	возвращает таблицу из 2-х колонок nvarchar(max)
-- =============================================
-- select * from dbo.[tf_ParserStrTo2Varchar150]('63975|215|63980|216|')
-- =============================================
CREATE FUNCTION [dbo].[tf_ParserStrTo2Varchar150]
(
	@StrVal nvarchar(max) -- строка значений в бинарном виде
)
RETURNS 
@NVChar TABLE 
(
	--SerialNumber int identity(1,1), -- порядковый номер значения
	Val1 nvarchar(max),
	Val2 nvarchar(max)
)
AS
BEGIN
	declare @CountCol int = 2
	declare @LenVal int=Len(@StrVal) -- длина строки значений
	Declare @InsVal nvarchar(255)
	declare @i int=1
	declare @s int=1
	declare @Separator nvarchar(2)=right(@StrVal,1) 

	declare @Val0 nvarchar(max)=null 
	declare @Val1 nvarchar(max)=null
	declare @Val2 nvarchar(max)=null 
	declare @Val3 nvarchar(max)=null
	declare @Val4 nvarchar(max)=null 
	declare @Val5 nvarchar(max)=null
	declare @Val6 nvarchar(max)=null 
	declare @Val7 nvarchar(max)=null
	declare @Val8 nvarchar(max)=null
	declare @Val9 nvarchar(max)=null

	if @CountCol=1 begin		
		while @i<=@LenVal begin -- просмартиваем посимвольно строку значений в поиске разделителей
			if SUBSTRING(@StrVal, @i, 1) = @Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1)
					values (@Val0)
					set @Val0=null
				end
			end
			set @i=@i+1
		end
	end
	else if @CountCol=2 begin
		while @i<=@LenVal begin 
			if SUBSTRING(@StrVal, @i, 1) = @Separator begin -- попали на разделитель
				if @Val0 is null begin
					set @Val0=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1
				end
				else if @Val1 is null begin
					set @Val1=SUBSTRING(@StrVal,@s, @i-@s)
					set @s=@i + 1

					insert into @NVChar (Val1, Val2)
					values (@Val0, @Val1)

					select @Val0=null, @Val1=null
				end
			end
			set @i=@i+1
		end
	end
	RETURN 
END


 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- select * from dbo.tf_StructTblFromStr('1`1`UsersWRK`293576084`Sep 16 2019  3:29PM`Sep 16 2019  3:29PM`4`DtAdd`datetime``0``2`1`UsersWRK`293576084`Sep 16 2019  3:29PM`Sep 16 2019  3:29PM`1`ID`int``1``3`1`UsersWRK`293576084`Sep 16 2019  3:29PM`Sep 16 2019  3:29PM`3`Type`tinyint``0``4`1`UsersWRK`293576084`Sep 16 2019  3:29PM`Sep 16 2019  3:29PM`2`UserID`int``0``5`2`Shop`341576255`Sep 16 2019  3:31PM`Sep 16 2019  3:31PM`5`CreatedByUserID`int``0``6`2`Shop`341576255`Sep 16 2019  3:31PM`Sep 16 2019  3:31PM`3`CreatedDate`datetime``0``7`2`Shop`341576255`Sep 16 2019  3:31PM`Sep 16 2019  3:31PM`1`ID`int``1``8`2`Shop`341576255`Sep 16 2019  3:31PM`Sep 16 2019  3:31PM`6`LastModifiedByUserID`int``0``9`2`Shop`341576255`Sep 16 2019  3:31PM`Sep 16 2019  3:31PM`4`LastModifiedDate`datetime``0``10`2`Shop`341576255`Sep 16 2019  3:31PM`Sep 16 2019  3:31PM`2`Number`int``0``11`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`7`CreatedByUserID`int``0``12`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`5`CreatedDate`datetime``0``13`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`2`Description`nvarchar`150`0``14`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`1`ID`int``1``15`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`8`LastModifiedByUserID`int``0``16`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`6`LastModifiedDate`datetime``0``17`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`4`ShopID`int``0``18`3`CashDesc`373576369`Sep 16 2019  3:37PM`Sep 16 2019  3:37PM`3`TerminalID`int``0``19`4`LogErr`453576654`Sep 16 2019  5:55PM`Sep 16 2019  5:55PM`3`DtErr`datetime``0``20`4`LogErr`453576654`Sep 16 2019  5:55PM`Sep 16 2019  5:55PM`4`ERROR_MESSAGE`nvarchar`4000`0``21`4`LogErr`453576654`Sep 16 2019  5:55PM`Sep 16 2019  5:55PM`1`LogErrID`int``1``22`4`LogErr`453576654`Sep 16 2019  5:55PM`Sep 16 2019  5:55PM`2`UserID`int``0``23`5`Prog`629577281`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`4`DtAdd`datetime2``0``24`5`Prog`629577281`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`1`ID`smallint``1``25`5`Prog`629577281`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`2`Name`varchar`50`0``26`5`Prog`629577281`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`3`Prim`varchar`500`0``27`6`ProgVer`709577566`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`7`DtAdd`datetime2``0``28`6`ProgVer`709577566`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`4`DtVer`date``0`дата загрузки версии`29`6`ProgVer`709577566`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`1`ID`smallint``1``30`6`ProgVer`709577566`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`6`IsAct`bit``0`флаг указывает что версия явля`31`6`ProgVer`709577566`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`3`NameVer`varchar`50`0`Название/Номер версии`32`6`ProgVer`709577566`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`5`Prim`varchar`1000`0``33`6`ProgVer`709577566`Sep 16 2019  6:22PM`Sep 16 2019  6:22PM`2`ProgID`smallint``0`идентификатор программы`34`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`5`BinFile`varbinary`max`0``35`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`8`DtAdd`datetime``0``36`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`1`ID`int``1``37`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`9`MD5`char`32`0``38`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`4`NameFile`varchar`150`0``39`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`7`PathFile`varchar`150`0``40`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`6`SizeFile`int``0``41`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`3`StartF`bit``0``42`7`ProgF`885578193`Sep 17 2019  7:07PM`Sep 17 2019  7:07PM`2`VerID`smallint``0``43`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`7`CreatedByUserID`int``0``44`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`5`CreatedDate`datetime``0``45`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`1`ID`smallint``1``46`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`8`LastModifiedByUserID`int``0``47`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`6`LastModifiedDate`datetime``0``48`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`3`Name`varchar`255`0``49`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`2`Type`tinyint``0``50`8`Attributes`997578592`Sep 18 2019 12:22PM`Sep 18 2019 12:22PM`4`Value`nvarchar`255`0``51`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`7`CreatedByUserID`int``0``52`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`5`CreatedDate`datetime``0``53`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`1`ID`int``1``54`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`8`LastModifiedByUserID`int``0``55`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`6`LastModifiedDate`datetime``0``56`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`3`ParentID`int``0``57`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`4`Photo`varbinary`max`0``58`9`Photo`1141579105`Sep 19 2019 12:01PM`Sep 19 2019 12:01PM`2`Type`tinyint``0``59`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`10`Active`bit``0``60`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`18`Birthday`date``0``61`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`16`CreatedByUserID`int``0``62`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`14`CreatedDate`datetime``0``63`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`9`Email`varchar`30`0``64`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`3`FirstName`nvarchar`30`0``65`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`19`GenderID`tinyint``0``66`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`1`ID`int``1``67`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`6`INN`varchar`20`0``68`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`17`LastModifiedByUserID`int``0``69`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`15`LastModifiedDate`datetime``0``70`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`4`LastName`nvarchar`30`0``71`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`11`Login`nvarchar`30`0``72`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`2`Number`int``0``73`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`12`Password`nvarchar`30`0``74`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`8`Phone`varchar`50`0``75`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`7`RoleID`tinyint``0``76`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`5`SecondName`nvarchar`30`0``77`10`Users`1301579675`Sep 20 2019  5:35PM`Sep 20 2019  5:35PM`13`ShopID`int``0``')
-- =============================================
CREATE FUNCTION dbo.tf_StructTblFromStr
(	
	@Str nvarchar(max)
)
RETURNS TABLE 
AS
RETURN 
(
	select 
		convert(int, t.Val1) as npp,
		t.Val2 as TablNpp,
		t.Val3 as TableName,
		t.Val4 as TableId,
		t.Val5 as CreateDt,
		t.Val6 as ModifyDt,
		t.Val7 as ORDINAL_POSITION,
		t.Val8 as column_name,
		t.Val9 as data_type,
		t.Val10 as MaxLen,
		t.Val11 as is_identity,
		t.Val12 as prim
	from dbo.[tf_ParserNVCharToTblNVChar](12, @Str) t
	--order by 1
)
 

GO
SET ANSI_NULLS ON 

GO
SET QUOTED_IDENTIFIER ON 

GO

CREATE TRIGGER [SchemaLog] 
ON DATABASE --ALL SERVER 
FOR DDL_DATABASE_LEVEL_EVENTS 
AS
    SET NOCOUNT ON;
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @data XML
    begin try
    if(CURRENT_USER<>'NT AUTHORITY\NETWORK SERVICE' and SYSTEM_USER<>'NT AUTHORITY\NETWORK SERVICE')
    begin
        SET @data = EVENTDATA();
        INSERT srv.ddl_log(
                    PostTime,
                    DB_Login,
                    DB_User,
                    Event,
                    TSQL
                  ) 
        select 
                    GETUTCDATE(),
                    CONVERT(nvarchar(255), SYSTEM_USER),
                    CONVERT(nvarchar(255), CURRENT_USER), 
                    @data.value('(/EVENT_INSTANCE/EventType)[1]', 'nvarchar(255)'), 
                    @data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'nvarchar(max)')
        where       @data.value('(/EVENT_INSTANCE/EventType)[1]', 'nvarchar(255)') not in('UPDATE_STATISTICS', 'ALTER_INDEX')
                and @data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'nvarchar(max)') not like '%Msmerge%'; --не нужно следить за изменения объектов репликации
    end
    end try
    begin catch
    end catch

 

GO
ENABLE TRIGGER [SchemaLog] ON DATABASE 
